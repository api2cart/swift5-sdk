//
// OrderAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OrderAPI {

    /**
     order.abandoned.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter customerId: (query) Retrieves orders specified by customer id (optional)
     - parameter customerEmail: (query) Retrieves orders specified by customer email (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter skipEmptyEmail: (query) Filter empty emails (optional, default to false)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "customer,totals,items")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderAbandonedList(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, customerId: String? = nil, customerEmail: String? = nil, storeId: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, skipEmptyEmail: Bool? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseOrderAbandonedList?, _ error: Error?) -> Void)) -> RequestTask {
        return orderAbandonedListWithRequestBuilder(start: start, count: count, pageCursor: pageCursor, customerId: customerId, customerEmail: customerEmail, storeId: storeId, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, skipEmptyEmail: skipEmptyEmail, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.abandoned.list
     - GET /order.abandoned.list.json
     - Get list of orders that were left by customers before completing the order.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter customerId: (query) Retrieves orders specified by customer id (optional)
     - parameter customerEmail: (query) Retrieves orders specified by customer email (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter skipEmptyEmail: (query) Filter empty emails (optional, default to false)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "customer,totals,items")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ModelResponseOrderAbandonedList> 
     */
    open class func orderAbandonedListWithRequestBuilder(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, customerId: String? = nil, customerEmail: String? = nil, storeId: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, skipEmptyEmail: Bool? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<ModelResponseOrderAbandonedList> {
        let localVariablePath = "/order.abandoned.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "customer_id": (wrappedValue: customerId?.encodeToJSON(), isExplode: true),
            "customer_email": (wrappedValue: customerEmail?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "skip_empty_email": (wrappedValue: skipEmptyEmail?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseOrderAbandonedList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.add
     
     - parameter orderAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderAdd(orderAdd: OrderAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderAddWithRequestBuilder(orderAdd: orderAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.add
     - POST /order.add.json
     - Add a new order to the cart.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderAdd: (body)  
     - returns: RequestBuilder<OrderAdd200Response> 
     */
    open class func orderAddWithRequestBuilder(orderAdd: OrderAdd) -> RequestBuilder<OrderAdd200Response> {
        let localVariablePath = "/order.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.count
     
     - parameter orderIds: (query) Counts orders specified by order ids (optional)
     - parameter ids: (query) Counts orders specified by ids (optional)
     - parameter customerId: (query) Counts orders quantity specified by customer id (optional)
     - parameter storeId: (query) Counts orders quantity specified by store id (optional)
     - parameter customerEmail: (query) Counts orders quantity specified by customer email (optional)
     - parameter orderStatus: (query) Counts orders quantity specified by order status (optional)
     - parameter orderStatusIds: (query) Retrieves orders specified by order statuses (optional)
     - parameter ebayOrderStatus: (query) Counts orders quantity specified by order status (optional)
     - parameter financialStatus: (query) Counts orders quantity specified by financial status (optional)
     - parameter financialStatusIds: (query) Retrieves orders count specified by financial status ids (optional)
     - parameter fulfillmentChannel: (query) Retrieves order with a fulfillment channel (optional)
     - parameter fulfillmentStatus: (query) Create order with fulfillment status (optional)
     - parameter shippingMethod: (query) Retrieve entities according to shipping method (optional)
     - parameter deliveryMethod: (query) Retrieves order with delivery method (optional)
     - parameter tags: (query) Order tags (optional)
     - parameter shipNodeType: (query) Retrieves order with ship node type (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderCount(orderIds: String? = nil, ids: String? = nil, customerId: String? = nil, storeId: String? = nil, customerEmail: String? = nil, orderStatus: String? = nil, orderStatusIds: [String]? = nil, ebayOrderStatus: String? = nil, financialStatus: String? = nil, financialStatusIds: [String]? = nil, fulfillmentChannel: String? = nil, fulfillmentStatus: String? = nil, shippingMethod: String? = nil, deliveryMethod: String? = nil, tags: String? = nil, shipNodeType: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderCount200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderCountWithRequestBuilder(orderIds: orderIds, ids: ids, customerId: customerId, storeId: storeId, customerEmail: customerEmail, orderStatus: orderStatus, orderStatusIds: orderStatusIds, ebayOrderStatus: ebayOrderStatus, financialStatus: financialStatus, financialStatusIds: financialStatusIds, fulfillmentChannel: fulfillmentChannel, fulfillmentStatus: fulfillmentStatus, shippingMethod: shippingMethod, deliveryMethod: deliveryMethod, tags: tags, shipNodeType: shipNodeType, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.count
     - GET /order.count.json
     - Count orders in store
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderIds: (query) Counts orders specified by order ids (optional)
     - parameter ids: (query) Counts orders specified by ids (optional)
     - parameter customerId: (query) Counts orders quantity specified by customer id (optional)
     - parameter storeId: (query) Counts orders quantity specified by store id (optional)
     - parameter customerEmail: (query) Counts orders quantity specified by customer email (optional)
     - parameter orderStatus: (query) Counts orders quantity specified by order status (optional)
     - parameter orderStatusIds: (query) Retrieves orders specified by order statuses (optional)
     - parameter ebayOrderStatus: (query) Counts orders quantity specified by order status (optional)
     - parameter financialStatus: (query) Counts orders quantity specified by financial status (optional)
     - parameter financialStatusIds: (query) Retrieves orders count specified by financial status ids (optional)
     - parameter fulfillmentChannel: (query) Retrieves order with a fulfillment channel (optional)
     - parameter fulfillmentStatus: (query) Create order with fulfillment status (optional)
     - parameter shippingMethod: (query) Retrieve entities according to shipping method (optional)
     - parameter deliveryMethod: (query) Retrieves order with delivery method (optional)
     - parameter tags: (query) Order tags (optional)
     - parameter shipNodeType: (query) Retrieves order with ship node type (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - returns: RequestBuilder<OrderCount200Response> 
     */
    open class func orderCountWithRequestBuilder(orderIds: String? = nil, ids: String? = nil, customerId: String? = nil, storeId: String? = nil, customerEmail: String? = nil, orderStatus: String? = nil, orderStatusIds: [String]? = nil, ebayOrderStatus: String? = nil, financialStatus: String? = nil, financialStatusIds: [String]? = nil, fulfillmentChannel: String? = nil, fulfillmentStatus: String? = nil, shippingMethod: String? = nil, deliveryMethod: String? = nil, tags: String? = nil, shipNodeType: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil) -> RequestBuilder<OrderCount200Response> {
        let localVariablePath = "/order.count.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "order_ids": (wrappedValue: orderIds?.encodeToJSON(), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "customer_id": (wrappedValue: customerId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "customer_email": (wrappedValue: customerEmail?.encodeToJSON(), isExplode: true),
            "order_status": (wrappedValue: orderStatus?.encodeToJSON(), isExplode: true),
            "order_status_ids": (wrappedValue: orderStatusIds?.encodeToJSON(), isExplode: true),
            "ebay_order_status": (wrappedValue: ebayOrderStatus?.encodeToJSON(), isExplode: true),
            "financial_status": (wrappedValue: financialStatus?.encodeToJSON(), isExplode: true),
            "financial_status_ids": (wrappedValue: financialStatusIds?.encodeToJSON(), isExplode: true),
            "fulfillment_channel": (wrappedValue: fulfillmentChannel?.encodeToJSON(), isExplode: true),
            "fulfillment_status": (wrappedValue: fulfillmentStatus?.encodeToJSON(), isExplode: true),
            "shipping_method": (wrappedValue: shippingMethod?.encodeToJSON(), isExplode: true),
            "delivery_method": (wrappedValue: deliveryMethod?.encodeToJSON(), isExplode: true),
            "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
            "ship_node_type": (wrappedValue: shipNodeType?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderCount200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.financial_status.list
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderFinancialStatusList(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderFinancialStatusList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderFinancialStatusListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.financial_status.list
     - GET /order.financial_status.list.json
     - Retrieve list of financial statuses
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - returns: RequestBuilder<OrderFinancialStatusList200Response> 
     */
    open class func orderFinancialStatusListWithRequestBuilder() -> RequestBuilder<OrderFinancialStatusList200Response> {
        let localVariablePath = "/order.financial_status.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderFinancialStatusList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.fulfillment_status.list
     
     - parameter action: (query) Available statuses for the specified action. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderFulfillmentStatusList(action: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderFulfillmentStatusList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderFulfillmentStatusListWithRequestBuilder(action: action).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.fulfillment_status.list
     - GET /order.fulfillment_status.list.json
     - Retrieve list of fulfillment statuses
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter action: (query) Available statuses for the specified action. (optional)
     - returns: RequestBuilder<OrderFulfillmentStatusList200Response> 
     */
    open class func orderFulfillmentStatusListWithRequestBuilder(action: String? = nil) -> RequestBuilder<OrderFulfillmentStatusList200Response> {
        let localVariablePath = "/order.fulfillment_status.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderFulfillmentStatusList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.info
     
     - parameter id: (query) Retrieves order info specified by id (optional)
     - parameter orderId: (query) Retrieves order’s info specified by order id (optional)
     - parameter storeId: (query) Defines store id where the order should be found (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "order_id,customer,totals,address,items,bundles,status")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter enableCache: (query) If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderInfo(id: String? = nil, orderId: String? = nil, storeId: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, enableCache: Bool? = nil, useLatestApiVersion: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderInfo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderInfoWithRequestBuilder(id: id, orderId: orderId, storeId: storeId, params: params, responseFields: responseFields, exclude: exclude, enableCache: enableCache, useLatestApiVersion: useLatestApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.info
     - GET /order.info.json
     - Info about a specific order by ID
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Retrieves order info specified by id (optional)
     - parameter orderId: (query) Retrieves order’s info specified by order id (optional)
     - parameter storeId: (query) Defines store id where the order should be found (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "order_id,customer,totals,address,items,bundles,status")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter enableCache: (query) If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - returns: RequestBuilder<OrderInfo200Response> 
     */
    open class func orderInfoWithRequestBuilder(id: String? = nil, orderId: String? = nil, storeId: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, enableCache: Bool? = nil, useLatestApiVersion: Bool? = nil) -> RequestBuilder<OrderInfo200Response> {
        let localVariablePath = "/order.info.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "order_id": (wrappedValue: orderId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "enable_cache": (wrappedValue: enableCache?.encodeToJSON(), isExplode: true),
            "use_latest_api_version": (wrappedValue: useLatestApiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderInfo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter ids: (query) Retrieves orders specified by ids (optional)
     - parameter orderIds: (query) Retrieves orders specified by order ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter customerId: (query) Retrieves orders specified by customer id (optional)
     - parameter customerEmail: (query) Retrieves orders specified by customer email (optional)
     - parameter basketId: (query) Retrieves order’s info specified by basket id. (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter phone: (query) Filter orders by customer&#39;s phone number (optional)
     - parameter orderStatus: (query) Retrieves orders specified by order status (optional)
     - parameter orderStatusIds: (query) Retrieves orders specified by order statuses (optional)
     - parameter ebayOrderStatus: (query) Retrieves orders specified by order status (optional)
     - parameter financialStatus: (query) Retrieves orders specified by financial status (optional)
     - parameter financialStatusIds: (query) Retrieves orders specified by financial status ids (optional)
     - parameter fulfillmentStatus: (query) Create order with fulfillment status (optional)
     - parameter returnStatus: (query) Retrieves orders specified by return status (optional)
     - parameter fulfillmentChannel: (query) Retrieves order with a fulfillment channel (optional)
     - parameter shippingMethod: (query) Retrieve entities according to shipping method (optional)
     - parameter skipOrderIds: (query) Skipped orders by ids (optional)
     - parameter isDeleted: (query) Filter deleted orders (optional)
     - parameter shippingCountryIso3: (query) Retrieve entities according to shipping country (optional)
     - parameter deliveryMethod: (query) Retrieves order with delivery method (optional)
     - parameter shipNodeType: (query) Retrieves order with ship node type (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter tags: (query) Order tags (optional)
     - parameter sortBy: (query) Set field to sort by (optional, default to "order_id")
     - parameter sortDirection: (query) Set sorting direction (optional, default to "asc")
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "order_id,customer,totals,address,items,bundles,status")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter enableCache: (query) If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderList(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, ids: String? = nil, orderIds: String? = nil, sinceId: String? = nil, storeId: String? = nil, customerId: String? = nil, customerEmail: String? = nil, basketId: String? = nil, currencyId: String? = nil, phone: String? = nil, orderStatus: String? = nil, orderStatusIds: [String]? = nil, ebayOrderStatus: String? = nil, financialStatus: String? = nil, financialStatusIds: [String]? = nil, fulfillmentStatus: String? = nil, returnStatus: String? = nil, fulfillmentChannel: String? = nil, shippingMethod: String? = nil, skipOrderIds: String? = nil, isDeleted: Bool? = nil, shippingCountryIso3: String? = nil, deliveryMethod: String? = nil, shipNodeType: String? = nil, createdTo: String? = nil, createdFrom: String? = nil, modifiedTo: String? = nil, modifiedFrom: String? = nil, tags: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, enableCache: Bool? = nil, useLatestApiVersion: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseOrderList?, _ error: Error?) -> Void)) -> RequestTask {
        return orderListWithRequestBuilder(start: start, count: count, pageCursor: pageCursor, ids: ids, orderIds: orderIds, sinceId: sinceId, storeId: storeId, customerId: customerId, customerEmail: customerEmail, basketId: basketId, currencyId: currencyId, phone: phone, orderStatus: orderStatus, orderStatusIds: orderStatusIds, ebayOrderStatus: ebayOrderStatus, financialStatus: financialStatus, financialStatusIds: financialStatusIds, fulfillmentStatus: fulfillmentStatus, returnStatus: returnStatus, fulfillmentChannel: fulfillmentChannel, shippingMethod: shippingMethod, skipOrderIds: skipOrderIds, isDeleted: isDeleted, shippingCountryIso3: shippingCountryIso3, deliveryMethod: deliveryMethod, shipNodeType: shipNodeType, createdTo: createdTo, createdFrom: createdFrom, modifiedTo: modifiedTo, modifiedFrom: modifiedFrom, tags: tags, sortBy: sortBy, sortDirection: sortDirection, params: params, responseFields: responseFields, exclude: exclude, enableCache: enableCache, useLatestApiVersion: useLatestApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.list
     - GET /order.list.json
     - Get list of orders from store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter ids: (query) Retrieves orders specified by ids (optional)
     - parameter orderIds: (query) Retrieves orders specified by order ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter customerId: (query) Retrieves orders specified by customer id (optional)
     - parameter customerEmail: (query) Retrieves orders specified by customer email (optional)
     - parameter basketId: (query) Retrieves order’s info specified by basket id. (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter phone: (query) Filter orders by customer&#39;s phone number (optional)
     - parameter orderStatus: (query) Retrieves orders specified by order status (optional)
     - parameter orderStatusIds: (query) Retrieves orders specified by order statuses (optional)
     - parameter ebayOrderStatus: (query) Retrieves orders specified by order status (optional)
     - parameter financialStatus: (query) Retrieves orders specified by financial status (optional)
     - parameter financialStatusIds: (query) Retrieves orders specified by financial status ids (optional)
     - parameter fulfillmentStatus: (query) Create order with fulfillment status (optional)
     - parameter returnStatus: (query) Retrieves orders specified by return status (optional)
     - parameter fulfillmentChannel: (query) Retrieves order with a fulfillment channel (optional)
     - parameter shippingMethod: (query) Retrieve entities according to shipping method (optional)
     - parameter skipOrderIds: (query) Skipped orders by ids (optional)
     - parameter isDeleted: (query) Filter deleted orders (optional)
     - parameter shippingCountryIso3: (query) Retrieve entities according to shipping country (optional)
     - parameter deliveryMethod: (query) Retrieves order with delivery method (optional)
     - parameter shipNodeType: (query) Retrieves order with ship node type (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter tags: (query) Order tags (optional)
     - parameter sortBy: (query) Set field to sort by (optional, default to "order_id")
     - parameter sortDirection: (query) Set sorting direction (optional, default to "asc")
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "order_id,customer,totals,address,items,bundles,status")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter enableCache: (query) If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - returns: RequestBuilder<ModelResponseOrderList> 
     */
    open class func orderListWithRequestBuilder(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, ids: String? = nil, orderIds: String? = nil, sinceId: String? = nil, storeId: String? = nil, customerId: String? = nil, customerEmail: String? = nil, basketId: String? = nil, currencyId: String? = nil, phone: String? = nil, orderStatus: String? = nil, orderStatusIds: [String]? = nil, ebayOrderStatus: String? = nil, financialStatus: String? = nil, financialStatusIds: [String]? = nil, fulfillmentStatus: String? = nil, returnStatus: String? = nil, fulfillmentChannel: String? = nil, shippingMethod: String? = nil, skipOrderIds: String? = nil, isDeleted: Bool? = nil, shippingCountryIso3: String? = nil, deliveryMethod: String? = nil, shipNodeType: String? = nil, createdTo: String? = nil, createdFrom: String? = nil, modifiedTo: String? = nil, modifiedFrom: String? = nil, tags: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, enableCache: Bool? = nil, useLatestApiVersion: Bool? = nil) -> RequestBuilder<ModelResponseOrderList> {
        let localVariablePath = "/order.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "order_ids": (wrappedValue: orderIds?.encodeToJSON(), isExplode: true),
            "since_id": (wrappedValue: sinceId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "customer_id": (wrappedValue: customerId?.encodeToJSON(), isExplode: true),
            "customer_email": (wrappedValue: customerEmail?.encodeToJSON(), isExplode: true),
            "basket_id": (wrappedValue: basketId?.encodeToJSON(), isExplode: true),
            "currency_id": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
            "phone": (wrappedValue: phone?.encodeToJSON(), isExplode: true),
            "order_status": (wrappedValue: orderStatus?.encodeToJSON(), isExplode: true),
            "order_status_ids": (wrappedValue: orderStatusIds?.encodeToJSON(), isExplode: true),
            "ebay_order_status": (wrappedValue: ebayOrderStatus?.encodeToJSON(), isExplode: true),
            "financial_status": (wrappedValue: financialStatus?.encodeToJSON(), isExplode: true),
            "financial_status_ids": (wrappedValue: financialStatusIds?.encodeToJSON(), isExplode: true),
            "fulfillment_status": (wrappedValue: fulfillmentStatus?.encodeToJSON(), isExplode: true),
            "return_status": (wrappedValue: returnStatus?.encodeToJSON(), isExplode: true),
            "fulfillment_channel": (wrappedValue: fulfillmentChannel?.encodeToJSON(), isExplode: true),
            "shipping_method": (wrappedValue: shippingMethod?.encodeToJSON(), isExplode: true),
            "skip_order_ids": (wrappedValue: skipOrderIds?.encodeToJSON(), isExplode: true),
            "is_deleted": (wrappedValue: isDeleted?.encodeToJSON(), isExplode: true),
            "shipping_country_iso3": (wrappedValue: shippingCountryIso3?.encodeToJSON(), isExplode: true),
            "delivery_method": (wrappedValue: deliveryMethod?.encodeToJSON(), isExplode: true),
            "ship_node_type": (wrappedValue: shipNodeType?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
            "sort_by": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "sort_direction": (wrappedValue: sortDirection?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "enable_cache": (wrappedValue: enableCache?.encodeToJSON(), isExplode: true),
            "use_latest_api_version": (wrappedValue: useLatestApiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseOrderList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.preestimate_shipping.list
     
     - parameter orderPreestimateShippingList: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderPreestimateShippingList(orderPreestimateShippingList: OrderPreestimateShippingList, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseOrderPreestimateShippingList?, _ error: Error?) -> Void)) -> RequestTask {
        return orderPreestimateShippingListWithRequestBuilder(orderPreestimateShippingList: orderPreestimateShippingList).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.preestimate_shipping.list
     - POST /order.preestimate_shipping.list.json
     - Retrieve list of order preestimated shipping methods
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderPreestimateShippingList: (body)  
     - returns: RequestBuilder<ModelResponseOrderPreestimateShippingList> 
     */
    open class func orderPreestimateShippingListWithRequestBuilder(orderPreestimateShippingList: OrderPreestimateShippingList) -> RequestBuilder<ModelResponseOrderPreestimateShippingList> {
        let localVariablePath = "/order.preestimate_shipping.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderPreestimateShippingList)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseOrderPreestimateShippingList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.refund.add
     
     - parameter orderRefundAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderRefundAdd(orderRefundAdd: OrderRefundAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderRefundAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderRefundAddWithRequestBuilder(orderRefundAdd: orderRefundAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.refund.add
     - POST /order.refund.add.json
     - Add a refund to the order.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderRefundAdd: (body)  
     - returns: RequestBuilder<OrderRefundAdd200Response> 
     */
    open class func orderRefundAddWithRequestBuilder(orderRefundAdd: OrderRefundAdd) -> RequestBuilder<OrderRefundAdd200Response> {
        let localVariablePath = "/order.refund.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderRefundAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderRefundAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.return.add
     
     - parameter orderReturnAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderReturnAdd(orderReturnAdd: OrderReturnAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderReturnAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderReturnAddWithRequestBuilder(orderReturnAdd: orderReturnAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.return.add
     - POST /order.return.add.json
     - Create new return request.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderReturnAdd: (body)  
     - returns: RequestBuilder<OrderReturnAdd200Response> 
     */
    open class func orderReturnAddWithRequestBuilder(orderReturnAdd: OrderReturnAdd) -> RequestBuilder<OrderReturnAdd200Response> {
        let localVariablePath = "/order.return.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderReturnAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderReturnAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.return.delete
     
     - parameter returnId: (query) Return ID 
     - parameter orderId: (query) Defines the order id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderReturnDelete(returnId: String, orderId: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeValueDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderReturnDeleteWithRequestBuilder(returnId: returnId, orderId: orderId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.return.delete
     - DELETE /order.return.delete.json
     - Delete return.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter returnId: (query) Return ID 
     - parameter orderId: (query) Defines the order id 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<AttributeValueDelete200Response> 
     */
    open class func orderReturnDeleteWithRequestBuilder(returnId: String, orderId: String, storeId: String? = nil) -> RequestBuilder<AttributeValueDelete200Response> {
        let localVariablePath = "/order.return.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "return_id": (wrappedValue: returnId.encodeToJSON(), isExplode: true),
            "order_id": (wrappedValue: orderId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeValueDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.return.update
     
     - parameter orderReturnUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderReturnUpdate(orderReturnUpdate: OrderReturnUpdate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderReturnUpdateWithRequestBuilder(orderReturnUpdate: orderReturnUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.return.update
     - PUT /order.return.update.json
     - Update order's shipment information.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderReturnUpdate: (body)  
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func orderReturnUpdateWithRequestBuilder(orderReturnUpdate: OrderReturnUpdate) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/order.return.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderReturnUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.shipment.add
     
     - parameter orderShipmentAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderShipmentAdd(orderShipmentAdd: OrderShipmentAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderShipmentAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderShipmentAddWithRequestBuilder(orderShipmentAdd: orderShipmentAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.shipment.add
     - POST /order.shipment.add.json
     - Add a shipment to the order.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderShipmentAdd: (body)  
     - returns: RequestBuilder<OrderShipmentAdd200Response> 
     */
    open class func orderShipmentAddWithRequestBuilder(orderShipmentAdd: OrderShipmentAdd) -> RequestBuilder<OrderShipmentAdd200Response> {
        let localVariablePath = "/order.shipment.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderShipmentAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderShipmentAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.shipment.add.batch
     
     - parameter orderShipmentAddBatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderShipmentAddBatch(orderShipmentAddBatch: OrderShipmentAddBatch, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CategoryAddBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderShipmentAddBatchWithRequestBuilder(orderShipmentAddBatch: orderShipmentAddBatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.shipment.add.batch
     - POST /order.shipment.add.batch.json
     - Add a shipments to the orders.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderShipmentAddBatch: (body)  
     - returns: RequestBuilder<CategoryAddBatch200Response> 
     */
    open class func orderShipmentAddBatchWithRequestBuilder(orderShipmentAddBatch: OrderShipmentAddBatch) -> RequestBuilder<CategoryAddBatch200Response> {
        let localVariablePath = "/order.shipment.add.batch.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderShipmentAddBatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAddBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.shipment.delete
     
     - parameter shipmentId: (query) Shipment id indicates the number of delivery 
     - parameter orderId: (query) Defines the order for which the shipment will be deleted 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderShipmentDelete(shipmentId: String, orderId: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderShipmentDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderShipmentDeleteWithRequestBuilder(shipmentId: shipmentId, orderId: orderId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.shipment.delete
     - DELETE /order.shipment.delete.json
     - Delete order's shipment.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter shipmentId: (query) Shipment id indicates the number of delivery 
     - parameter orderId: (query) Defines the order for which the shipment will be deleted 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<OrderShipmentDelete200Response> 
     */
    open class func orderShipmentDeleteWithRequestBuilder(shipmentId: String, orderId: String, storeId: String? = nil) -> RequestBuilder<OrderShipmentDelete200Response> {
        let localVariablePath = "/order.shipment.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "shipment_id": (wrappedValue: shipmentId.encodeToJSON(), isExplode: true),
            "order_id": (wrappedValue: orderId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderShipmentDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.shipment.info
     
     - parameter id: (query) Entity id 
     - parameter orderId: (query) Defines the order id 
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter storeId: (query) Store Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_id,items,tracking_numbers")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderShipmentInfo(id: String, orderId: String, start: Int? = nil, storeId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderShipmentInfo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderShipmentInfoWithRequestBuilder(id: id, orderId: orderId, start: start, storeId: storeId, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.shipment.info
     - GET /order.shipment.info.json
     - Get information of shipment.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter orderId: (query) Defines the order id 
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter storeId: (query) Store Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_id,items,tracking_numbers")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<OrderShipmentInfo200Response> 
     */
    open class func orderShipmentInfoWithRequestBuilder(id: String, orderId: String, start: Int? = nil, storeId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<OrderShipmentInfo200Response> {
        let localVariablePath = "/order.shipment.info.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "order_id": (wrappedValue: orderId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderShipmentInfo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.shipment.list
     
     - parameter orderId: (query) Retrieves shipments specified by order id 
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_id,items,tracking_numbers")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderShipmentList(orderId: String, start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, storeId: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseOrderShipmentList?, _ error: Error?) -> Void)) -> RequestTask {
        return orderShipmentListWithRequestBuilder(orderId: orderId, start: start, count: count, pageCursor: pageCursor, storeId: storeId, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.shipment.list
     - GET /order.shipment.list.json
     - Get list of shipments per order.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderId: (query) Retrieves shipments specified by order id 
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_id,items,tracking_numbers")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ModelResponseOrderShipmentList> 
     */
    open class func orderShipmentListWithRequestBuilder(orderId: String, start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, storeId: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<ModelResponseOrderShipmentList> {
        let localVariablePath = "/order.shipment.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "order_id": (wrappedValue: orderId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseOrderShipmentList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.shipment.tracking.add
     
     - parameter orderShipmentTrackingAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderShipmentTrackingAdd(orderShipmentTrackingAdd: OrderShipmentTrackingAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderShipmentTrackingAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderShipmentTrackingAddWithRequestBuilder(orderShipmentTrackingAdd: orderShipmentTrackingAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.shipment.tracking.add
     - POST /order.shipment.tracking.add.json
     - Add order shipment's tracking info.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderShipmentTrackingAdd: (body)  
     - returns: RequestBuilder<OrderShipmentTrackingAdd200Response> 
     */
    open class func orderShipmentTrackingAddWithRequestBuilder(orderShipmentTrackingAdd: OrderShipmentTrackingAdd) -> RequestBuilder<OrderShipmentTrackingAdd200Response> {
        let localVariablePath = "/order.shipment.tracking.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderShipmentTrackingAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderShipmentTrackingAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.shipment.update
     
     - parameter orderShipmentUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderShipmentUpdate(orderShipmentUpdate: OrderShipmentUpdate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderShipmentUpdateWithRequestBuilder(orderShipmentUpdate: orderShipmentUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.shipment.update
     - PUT /order.shipment.update.json
     - Update order's shipment information.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderShipmentUpdate: (body)  
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func orderShipmentUpdateWithRequestBuilder(orderShipmentUpdate: OrderShipmentUpdate) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/order.shipment.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderShipmentUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.status.list
     
     - parameter storeId: (query) Store Id (optional)
     - parameter action: (query) Available statuses for the specified action. (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderStatusList(storeId: String? = nil, action: String? = nil, responseFields: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseOrderStatusList?, _ error: Error?) -> Void)) -> RequestTask {
        return orderStatusListWithRequestBuilder(storeId: storeId, action: action, responseFields: responseFields).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.status.list
     - GET /order.status.list.json
     - Retrieve list of statuses
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter storeId: (query) Store Id (optional)
     - parameter action: (query) Available statuses for the specified action. (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - returns: RequestBuilder<ModelResponseOrderStatusList> 
     */
    open class func orderStatusListWithRequestBuilder(storeId: String? = nil, action: String? = nil, responseFields: String? = nil) -> RequestBuilder<ModelResponseOrderStatusList> {
        let localVariablePath = "/order.status.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "action": (wrappedValue: action?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseOrderStatusList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.transaction.list
     
     - parameter orderIds: (query) Retrieves order transactions specified by order ids 
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_id,amount,description")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderTransactionList(orderIds: String, count: Int? = nil, pageCursor: String? = nil, storeId: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseOrderTransactionList?, _ error: Error?) -> Void)) -> RequestTask {
        return orderTransactionListWithRequestBuilder(orderIds: orderIds, count: count, pageCursor: pageCursor, storeId: storeId, params: params, responseFields: responseFields, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.transaction.list
     - GET /order.transaction.list.json
     - Retrieve list of order transaction
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderIds: (query) Retrieves order transactions specified by order ids 
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_id,amount,description")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ModelResponseOrderTransactionList> 
     */
    open class func orderTransactionListWithRequestBuilder(orderIds: String, count: Int? = nil, pageCursor: String? = nil, storeId: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil) -> RequestBuilder<ModelResponseOrderTransactionList> {
        let localVariablePath = "/order.transaction.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "order_ids": (wrappedValue: orderIds.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseOrderTransactionList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     order.update
     
     - parameter orderId: (query) Defines the orders specified by order id 
     - parameter storeId: (query) Defines store id where the order should be found (optional)
     - parameter orderStatus: (query) Defines new order&#39;s status (optional)
     - parameter financialStatus: (query) Update order financial status to specified (optional)
     - parameter fulfillmentStatus: (query) Create order with fulfillment status (optional)
     - parameter cancellationReason: (query) Defines the cancellation reason when the order will be canceled (optional)
     - parameter orderPaymentMethod: (query) Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     - parameter comment: (query) Specifies order comment (optional)
     - parameter adminComment: (query) Specifies admin&#39;s order comment (optional)
     - parameter adminPrivateComment: (query) Specifies private admin&#39;s order comment (optional)
     - parameter invoiceAdminComment: (query) Specifies admin&#39;s order invoice comment (optional)
     - parameter dateModified: (query) Specifies order&#39;s  modification date (optional)
     - parameter dateFinished: (query) Specifies order&#39;s  finished date (optional)
     - parameter sendNotifications: (query) Send notifications to customer after order was created (optional, default to false)
     - parameter createInvoice: (query) Determines whether an invoice should be created if it has not already been created (optional)
     - parameter origin: (query) The source of the order (optional)
     - parameter tags: (query) Order tags (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderUpdate(orderId: String, storeId: String? = nil, orderStatus: String? = nil, financialStatus: String? = nil, fulfillmentStatus: String? = nil, cancellationReason: String? = nil, orderPaymentMethod: String? = nil, comment: String? = nil, adminComment: String? = nil, adminPrivateComment: String? = nil, invoiceAdminComment: String? = nil, dateModified: String? = nil, dateFinished: String? = nil, sendNotifications: Bool? = nil, createInvoice: Bool? = nil, origin: String? = nil, tags: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orderUpdateWithRequestBuilder(orderId: orderId, storeId: storeId, orderStatus: orderStatus, financialStatus: financialStatus, fulfillmentStatus: fulfillmentStatus, cancellationReason: cancellationReason, orderPaymentMethod: orderPaymentMethod, comment: comment, adminComment: adminComment, adminPrivateComment: adminPrivateComment, invoiceAdminComment: invoiceAdminComment, dateModified: dateModified, dateFinished: dateFinished, sendNotifications: sendNotifications, createInvoice: createInvoice, origin: origin, tags: tags).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     order.update
     - PUT /order.update.json
     - Update existing order.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderId: (query) Defines the orders specified by order id 
     - parameter storeId: (query) Defines store id where the order should be found (optional)
     - parameter orderStatus: (query) Defines new order&#39;s status (optional)
     - parameter financialStatus: (query) Update order financial status to specified (optional)
     - parameter fulfillmentStatus: (query) Create order with fulfillment status (optional)
     - parameter cancellationReason: (query) Defines the cancellation reason when the order will be canceled (optional)
     - parameter orderPaymentMethod: (query) Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     - parameter comment: (query) Specifies order comment (optional)
     - parameter adminComment: (query) Specifies admin&#39;s order comment (optional)
     - parameter adminPrivateComment: (query) Specifies private admin&#39;s order comment (optional)
     - parameter invoiceAdminComment: (query) Specifies admin&#39;s order invoice comment (optional)
     - parameter dateModified: (query) Specifies order&#39;s  modification date (optional)
     - parameter dateFinished: (query) Specifies order&#39;s  finished date (optional)
     - parameter sendNotifications: (query) Send notifications to customer after order was created (optional, default to false)
     - parameter createInvoice: (query) Determines whether an invoice should be created if it has not already been created (optional)
     - parameter origin: (query) The source of the order (optional)
     - parameter tags: (query) Order tags (optional)
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func orderUpdateWithRequestBuilder(orderId: String, storeId: String? = nil, orderStatus: String? = nil, financialStatus: String? = nil, fulfillmentStatus: String? = nil, cancellationReason: String? = nil, orderPaymentMethod: String? = nil, comment: String? = nil, adminComment: String? = nil, adminPrivateComment: String? = nil, invoiceAdminComment: String? = nil, dateModified: String? = nil, dateFinished: String? = nil, sendNotifications: Bool? = nil, createInvoice: Bool? = nil, origin: String? = nil, tags: String? = nil) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/order.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "order_id": (wrappedValue: orderId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "order_status": (wrappedValue: orderStatus?.encodeToJSON(), isExplode: true),
            "financial_status": (wrappedValue: financialStatus?.encodeToJSON(), isExplode: true),
            "fulfillment_status": (wrappedValue: fulfillmentStatus?.encodeToJSON(), isExplode: true),
            "cancellation_reason": (wrappedValue: cancellationReason?.encodeToJSON(), isExplode: true),
            "order_payment_method": (wrappedValue: orderPaymentMethod?.encodeToJSON(), isExplode: true),
            "comment": (wrappedValue: comment?.encodeToJSON(), isExplode: true),
            "admin_comment": (wrappedValue: adminComment?.encodeToJSON(), isExplode: true),
            "admin_private_comment": (wrappedValue: adminPrivateComment?.encodeToJSON(), isExplode: true),
            "invoice_admin_comment": (wrappedValue: invoiceAdminComment?.encodeToJSON(), isExplode: true),
            "date_modified": (wrappedValue: dateModified?.encodeToJSON(), isExplode: true),
            "date_finished": (wrappedValue: dateFinished?.encodeToJSON(), isExplode: true),
            "send_notifications": (wrappedValue: sendNotifications?.encodeToJSON(), isExplode: true),
            "create_invoice": (wrappedValue: createInvoice?.encodeToJSON(), isExplode: true),
            "origin": (wrappedValue: origin?.encodeToJSON(), isExplode: true),
            "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
