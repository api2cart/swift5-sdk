//
// AccountAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AccountAPI {

    /**
     account.cart.add
     
     - parameter accountCartAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accountCartAdd(accountCartAdd: AccountCartAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountCartAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return accountCartAddWithRequestBuilder(accountCartAdd: accountCartAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     account.cart.add
     - POST /account.cart.add.json
     - Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter accountCartAdd: (body)  
     - returns: RequestBuilder<AccountCartAdd200Response> 
     */
    open class func accountCartAddWithRequestBuilder(accountCartAdd: AccountCartAdd) -> RequestBuilder<AccountCartAdd200Response> {
        let localVariablePath = "/account.cart.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accountCartAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountCartAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     account.cart.list
     
     - parameter storeUrl: (query) A web address of a store (optional)
     - parameter storeKey: (query) Find store by store key (optional)
     - parameter requestFromDate: (query) Retrieve entities from their creation date (optional)
     - parameter requestToDate: (query) Retrieve entities to their creation date (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accountCartList(storeUrl: String? = nil, storeKey: String? = nil, requestFromDate: String? = nil, requestToDate: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountCartList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return accountCartListWithRequestBuilder(storeUrl: storeUrl, storeKey: storeKey, requestFromDate: requestFromDate, requestToDate: requestToDate, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     account.cart.list
     - GET /account.cart.list.json
     - This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter storeUrl: (query) A web address of a store (optional)
     - parameter storeKey: (query) Find store by store key (optional)
     - parameter requestFromDate: (query) Retrieve entities from their creation date (optional)
     - parameter requestToDate: (query) Retrieve entities to their creation date (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<AccountCartList200Response> 
     */
    open class func accountCartListWithRequestBuilder(storeUrl: String? = nil, storeKey: String? = nil, requestFromDate: String? = nil, requestToDate: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<AccountCartList200Response> {
        let localVariablePath = "/account.cart.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "store_url": (wrappedValue: storeUrl?.encodeToJSON(), isExplode: true),
            "store_key": (wrappedValue: storeKey?.encodeToJSON(), isExplode: true),
            "request_from_date": (wrappedValue: requestFromDate?.encodeToJSON(), isExplode: true),
            "request_to_date": (wrappedValue: requestToDate?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountCartList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     account.config.update
     
     - parameter replaceParameters: (query) Identifies if there is a necessity to replace parameters (optional)
     - parameter newStoreUrl: (query) The web address of the store you want to update to connect to API2Cart (optional)
     - parameter newStoreKey: (query) Update store key (optional)
     - parameter bridgeUrl: (query) This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     - parameter storeRoot: (query) Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     - parameter dbTablesPrefix: (query) DB tables prefix (optional)
     - parameter userAgent: (query) This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     - parameter _3dcartPrivateKey: (query) 3DCart Private Key (optional)
     - parameter _3dcartAccessToken: (query) 3DCart Token (optional)
     - parameter _3dcartapiApiKey: (query) 3DCart API Key (optional)
     - parameter amazonSpClientId: (query) Amazon SP API app client id (optional)
     - parameter amazonSpClientSecret: (query) Amazon SP API app client secret (optional)
     - parameter amazonSpRefreshToken: (query) Amazon SP API OAuth refresh token (optional)
     - parameter amazonSpAwsRegion: (query) Amazon AWS Region (optional)
     - parameter amazonSpApiEnvironment: (query) Amazon SP API environment (optional, default to "production")
     - parameter amazonSellerId: (query) Amazon Seller ID (Merchant token) (optional)
     - parameter aspdotnetstorefrontApiUser: (query) It&#39;s a AspDotNetStorefront account for which API is available (optional)
     - parameter aspdotnetstorefrontApiPass: (query) AspDotNetStorefront API Password (optional)
     - parameter bigcommerceapiAdminAccount: (query) It&#39;s a BigCommerce account for which API is enabled (optional)
     - parameter bigcommerceapiApiPath: (query) BigCommerce API URL (optional)
     - parameter bigcommerceapiApiKey: (query) Bigcommerce API Key (optional)
     - parameter bigcommerceapiClientId: (query) Client ID of the requesting app (optional)
     - parameter bigcommerceapiAccessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter bigcommerceapiContext: (query) API Path section unique to the store (optional)
     - parameter bolApiKey: (query) Bol API Key (optional)
     - parameter bolApiSecret: (query) Bol API Secret (optional)
     - parameter bolRetailerId: (query) Bol Retailer ID (optional)
     - parameter demandwareClientId: (query) Demandware client id (optional)
     - parameter demandwareApiPassword: (query) Demandware api password (optional)
     - parameter demandwareUserName: (query) Demandware user name (optional)
     - parameter demandwareUserPassword: (query) Demandware user password (optional)
     - parameter ebayClientId: (query) Application ID (AppID). (optional)
     - parameter ebayClientSecret: (query) Shared Secret from eBay application (optional)
     - parameter ebayRuname: (query) The RuName value that eBay assigns to your application. (optional)
     - parameter ebayAccessToken: (query) Used to authenticate API requests. (optional)
     - parameter ebayRefreshToken: (query) Used to renew the access token. (optional)
     - parameter ebayEnvironment: (query) eBay environment (optional)
     - parameter ebaySiteId: (query) eBay global ID (optional, default to 0)
     - parameter ecwidAcessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter ecwidStoreId: (query) Store Id (optional)
     - parameter lazadaAppId: (query) Lazada App ID (optional)
     - parameter lazadaAppSecret: (query) Lazada App Secret (optional)
     - parameter lazadaRefreshToken: (query) Lazada Refresh Token (optional)
     - parameter lazadaRegion: (query) Lazada API endpoint Region (optional)
     - parameter etsyKeystring: (query) Etsy keystring (optional)
     - parameter etsySharedSecret: (query) Etsy shared secret (optional)
     - parameter etsyAccessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter etsyTokenSecret: (query) Secret token authorizing the app to access resources on behalf of a user (optional)
     - parameter etsyClientId: (query) Etsy Client Id (optional)
     - parameter etsyRefreshToken: (query) Etsy Refresh token (optional)
     - parameter facebookAppId: (query) Facebook App ID (optional)
     - parameter facebookAppSecret: (query) Facebook App Secret (optional)
     - parameter facebookAccessToken: (query) Facebook Access Token (optional)
     - parameter facebookBusinessId: (query) Facebook Business ID (optional)
     - parameter netoApiKey: (query) Neto API Key (optional)
     - parameter netoApiUsername: (query) Neto User Name (optional)
     - parameter shoplineAccessToken: (query) Shopline APP Key (optional)
     - parameter shoplineAppKey: (query) Shopline APP Key (optional)
     - parameter shoplineAppSecret: (query) Shopline App Secret (optional)
     - parameter shoplineSharedSecret: (query) Shopline Shared Secret (optional)
     - parameter shopifyAccessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter shopifyApiKey: (query) Shopify API Key (optional)
     - parameter shopifyApiPassword: (query) Shopify API Password (optional)
     - parameter shopifySharedSecret: (query) Shared secret (optional)
     - parameter shopeePartnerId: (query) Shopee Partner ID (optional)
     - parameter shopeePartnerKey: (query) Shopee Partner Key (optional)
     - parameter shopeeShopId: (query) Shopee SHOP ID (optional)
     - parameter shopeeRefreshToken: (query) Shopee Refresh Token (optional)
     - parameter shopeeRegion: (query) Shopee API endpoint Region. Use for Chinese Mainland or Brazil. (optional)
     - parameter shopeeEnvironment: (query) Shopee Environment (optional)
     - parameter shoplazzaAccessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter shoplazzaSharedSecret: (query) Shared secret (optional)
     - parameter mivaAccessToken: (query) Miva access token (optional)
     - parameter mivaSignature: (query) Miva signature (optional)
     - parameter shopwareAccessKey: (query) Shopware access key (optional)
     - parameter shopwareApiKey: (query) Shopware api key (optional)
     - parameter shopwareApiSecret: (query) Shopware client secret access key (optional)
     - parameter bigcartelUserName: (query) Subdomain of store (optional)
     - parameter bigcartelPassword: (query) BigCartel account password (optional)
     - parameter bricklinkConsumerKey: (query) Bricklink Consumer Key (optional)
     - parameter bricklinkConsumerSecret: (query) Bricklink Consumer Secret (optional)
     - parameter bricklinkToken: (query) Bricklink Access Token (optional)
     - parameter bricklinkTokenSecret: (query) Bricklink Access Token Secret (optional)
     - parameter volusionLogin: (query) It&#39;s a Volusion account for which API is enabled (optional)
     - parameter volusionPassword: (query) Volusion API Password (optional)
     - parameter walmartClientId: (query) Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     - parameter walmartClientSecret: (query) Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     - parameter walmartEnvironment: (query) Walmart environment (optional, default to "production")
     - parameter walmartChannelType: (query) Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     - parameter walmartRegion: (query) Walmart region (optional, default to "us")
     - parameter squareClientId: (query) Square (Weebly) Client ID (optional)
     - parameter squareClientSecret: (query) Square (Weebly) Client Secret (optional)
     - parameter squareRefreshToken: (query) Square (Weebly) Refresh Token (optional)
     - parameter squarespaceApiKey: (query) Squarespace API Key (optional)
     - parameter squarespaceClientId: (query) Squarespace Connector Client ID (optional)
     - parameter squarespaceClientSecret: (query) Squarespace Connector Client Secret (optional)
     - parameter squarespaceAccessToken: (query) Squarespace access token (optional)
     - parameter squarespaceRefreshToken: (query) Squarespace refresh token (optional)
     - parameter hybrisClientId: (query) Omni Commerce Connector Client ID (optional)
     - parameter hybrisClientSecret: (query) Omni Commerce Connector Client Secret (optional)
     - parameter hybrisUsername: (query) User Name (optional)
     - parameter hybrisPassword: (query) User password (optional)
     - parameter hybrisWebsites: (query) Websites to stores mapping data (optional)
     - parameter lightspeedApiKey: (query) LightSpeed api key (optional)
     - parameter lightspeedApiSecret: (query) LightSpeed api secret (optional)
     - parameter commercehqApiKey: (query) CommerceHQ api key (optional)
     - parameter commercehqApiPassword: (query) CommerceHQ api password (optional)
     - parameter wcConsumerKey: (query) Woocommerce consumer key (optional)
     - parameter wcConsumerSecret: (query) Woocommerce consumer secret (optional)
     - parameter magentoConsumerKey: (query) Magento Consumer Key (optional)
     - parameter magentoConsumerSecret: (query) Magento Consumer Secret (optional)
     - parameter magentoAccessToken: (query) Magento Access Token (optional)
     - parameter magentoTokenSecret: (query) Magento Token Secret (optional)
     - parameter prestashopWebserviceKey: (query) Prestashop webservice key (optional)
     - parameter wixAppId: (query) Wix App ID (optional)
     - parameter wixAppSecretKey: (query) Wix App Secret Key (optional)
     - parameter wixInstanceId: (query) Wix Instance ID (optional)
     - parameter wixRefreshToken: (query) Wix refresh token (optional)
     - parameter mercadoLibreAppId: (query) Mercado Libre App ID (optional)
     - parameter mercadoLibreAppSecretKey: (query) Mercado Libre App Secret Key (optional)
     - parameter mercadoLibreRefreshToken: (query) Mercado Libre Refresh Token (optional)
     - parameter zidClientId: (query) Zid Client ID (optional)
     - parameter zidClientSecret: (query) Zid Client Secret (optional)
     - parameter zidAccessToken: (query) Zid Access Token (optional)
     - parameter zidAuthorization: (query) Zid Authorization (optional)
     - parameter zidRefreshToken: (query) Zid refresh token (optional)
     - parameter flipkartClientId: (query) Flipkart Client ID (optional)
     - parameter flipkartClientSecret: (query) Flipkart Client Secret (optional)
     - parameter allegroClientId: (query) Allegro Client ID (optional)
     - parameter allegroClientSecret: (query) Allegro Client Secret (optional)
     - parameter allegroAccessToken: (query) Allegro Access Token (optional)
     - parameter allegroRefreshToken: (query) Allegro Refresh Token (optional)
     - parameter allegroEnvironment: (query) Allegro Environment (optional, default to "production")
     - parameter zohoClientId: (query) Zoho Client ID (optional)
     - parameter zohoClientSecret: (query) Zoho Client Secret (optional)
     - parameter zohoRefreshToken: (query) Zoho Refresh Token (optional)
     - parameter zohoRegion: (query) Zoho API endpoint Region (optional)
     - parameter tiendanubeUserId: (query) Tiendanube User ID (optional)
     - parameter tiendanubeAccessToken: (query) Tiendanube Access Token (optional)
     - parameter tiendanubeClientSecret: (query) Tiendanube Client Secret (optional)
     - parameter ottoClientId: (query) Otto Client ID (optional)
     - parameter ottoClientSecret: (query) Otto Client Secret (optional)
     - parameter ottoAppId: (query) Otto App ID (optional)
     - parameter ottoRefreshToken: (query) Otto Refresh Token (optional)
     - parameter ottoEnvironment: (query) Otto Environment (optional)
     - parameter ottoAccessToken: (query) Otto Access Token (optional)
     - parameter tiktokshopAppKey: (query) TikTok Shop App Key (optional)
     - parameter tiktokshopAppSecret: (query) TikTok Shop App Secret (optional)
     - parameter tiktokshopRefreshToken: (query) TikTok Shop Refresh Token (optional)
     - parameter tiktokshopAccessToken: (query) TikTok Shop Access Token (optional)
     - parameter sallaClientId: (query) Salla Client ID (optional)
     - parameter sallaClientSecret: (query) Salla Client Secret (optional)
     - parameter sallaRefreshToken: (query) Salla Refresh Token (optional)
     - parameter sallaAccessToken: (query) Salla Access Token (optional)
     - parameter temuAppKey: (query) Temu App Key (optional)
     - parameter temuAppSecret: (query) Temu App Secret (optional)
     - parameter temuAccessToken: (query) Temu Access Token (optional)
     - parameter temuRegion: (query) Temu API endpoint Region. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accountConfigUpdate(replaceParameters: Bool? = nil, newStoreUrl: String? = nil, newStoreKey: String? = nil, bridgeUrl: String? = nil, storeRoot: String? = nil, dbTablesPrefix: String? = nil, userAgent: String? = nil, _3dcartPrivateKey: String? = nil, _3dcartAccessToken: String? = nil, _3dcartapiApiKey: String? = nil, amazonSpClientId: String? = nil, amazonSpClientSecret: String? = nil, amazonSpRefreshToken: String? = nil, amazonSpAwsRegion: String? = nil, amazonSpApiEnvironment: String? = nil, amazonSellerId: String? = nil, aspdotnetstorefrontApiUser: String? = nil, aspdotnetstorefrontApiPass: String? = nil, bigcommerceapiAdminAccount: String? = nil, bigcommerceapiApiPath: String? = nil, bigcommerceapiApiKey: String? = nil, bigcommerceapiClientId: String? = nil, bigcommerceapiAccessToken: String? = nil, bigcommerceapiContext: String? = nil, bolApiKey: String? = nil, bolApiSecret: String? = nil, bolRetailerId: Int? = nil, demandwareClientId: String? = nil, demandwareApiPassword: String? = nil, demandwareUserName: String? = nil, demandwareUserPassword: String? = nil, ebayClientId: String? = nil, ebayClientSecret: String? = nil, ebayRuname: String? = nil, ebayAccessToken: String? = nil, ebayRefreshToken: String? = nil, ebayEnvironment: String? = nil, ebaySiteId: Int? = nil, ecwidAcessToken: String? = nil, ecwidStoreId: String? = nil, lazadaAppId: String? = nil, lazadaAppSecret: String? = nil, lazadaRefreshToken: String? = nil, lazadaRegion: String? = nil, etsyKeystring: String? = nil, etsySharedSecret: String? = nil, etsyAccessToken: String? = nil, etsyTokenSecret: String? = nil, etsyClientId: String? = nil, etsyRefreshToken: String? = nil, facebookAppId: String? = nil, facebookAppSecret: String? = nil, facebookAccessToken: String? = nil, facebookBusinessId: String? = nil, netoApiKey: String? = nil, netoApiUsername: String? = nil, shoplineAccessToken: String? = nil, shoplineAppKey: String? = nil, shoplineAppSecret: String? = nil, shoplineSharedSecret: String? = nil, shopifyAccessToken: String? = nil, shopifyApiKey: String? = nil, shopifyApiPassword: String? = nil, shopifySharedSecret: String? = nil, shopeePartnerId: String? = nil, shopeePartnerKey: String? = nil, shopeeShopId: String? = nil, shopeeRefreshToken: String? = nil, shopeeRegion: String? = nil, shopeeEnvironment: String? = nil, shoplazzaAccessToken: String? = nil, shoplazzaSharedSecret: String? = nil, mivaAccessToken: String? = nil, mivaSignature: String? = nil, shopwareAccessKey: String? = nil, shopwareApiKey: String? = nil, shopwareApiSecret: String? = nil, bigcartelUserName: String? = nil, bigcartelPassword: String? = nil, bricklinkConsumerKey: String? = nil, bricklinkConsumerSecret: String? = nil, bricklinkToken: String? = nil, bricklinkTokenSecret: String? = nil, volusionLogin: String? = nil, volusionPassword: String? = nil, walmartClientId: String? = nil, walmartClientSecret: String? = nil, walmartEnvironment: String? = nil, walmartChannelType: String? = nil, walmartRegion: String? = nil, squareClientId: String? = nil, squareClientSecret: String? = nil, squareRefreshToken: String? = nil, squarespaceApiKey: String? = nil, squarespaceClientId: String? = nil, squarespaceClientSecret: String? = nil, squarespaceAccessToken: String? = nil, squarespaceRefreshToken: String? = nil, hybrisClientId: String? = nil, hybrisClientSecret: String? = nil, hybrisUsername: String? = nil, hybrisPassword: String? = nil, hybrisWebsites: [String]? = nil, lightspeedApiKey: String? = nil, lightspeedApiSecret: String? = nil, commercehqApiKey: String? = nil, commercehqApiPassword: String? = nil, wcConsumerKey: String? = nil, wcConsumerSecret: String? = nil, magentoConsumerKey: String? = nil, magentoConsumerSecret: String? = nil, magentoAccessToken: String? = nil, magentoTokenSecret: String? = nil, prestashopWebserviceKey: String? = nil, wixAppId: String? = nil, wixAppSecretKey: String? = nil, wixInstanceId: String? = nil, wixRefreshToken: String? = nil, mercadoLibreAppId: String? = nil, mercadoLibreAppSecretKey: String? = nil, mercadoLibreRefreshToken: String? = nil, zidClientId: Int? = nil, zidClientSecret: String? = nil, zidAccessToken: String? = nil, zidAuthorization: String? = nil, zidRefreshToken: String? = nil, flipkartClientId: String? = nil, flipkartClientSecret: String? = nil, allegroClientId: String? = nil, allegroClientSecret: String? = nil, allegroAccessToken: String? = nil, allegroRefreshToken: String? = nil, allegroEnvironment: String? = nil, zohoClientId: String? = nil, zohoClientSecret: String? = nil, zohoRefreshToken: String? = nil, zohoRegion: String? = nil, tiendanubeUserId: Int? = nil, tiendanubeAccessToken: String? = nil, tiendanubeClientSecret: String? = nil, ottoClientId: String? = nil, ottoClientSecret: String? = nil, ottoAppId: String? = nil, ottoRefreshToken: String? = nil, ottoEnvironment: String? = nil, ottoAccessToken: String? = nil, tiktokshopAppKey: String? = nil, tiktokshopAppSecret: String? = nil, tiktokshopRefreshToken: String? = nil, tiktokshopAccessToken: String? = nil, sallaClientId: String? = nil, sallaClientSecret: String? = nil, sallaRefreshToken: String? = nil, sallaAccessToken: String? = nil, temuAppKey: String? = nil, temuAppSecret: String? = nil, temuAccessToken: String? = nil, temuRegion: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return accountConfigUpdateWithRequestBuilder(replaceParameters: replaceParameters, newStoreUrl: newStoreUrl, newStoreKey: newStoreKey, bridgeUrl: bridgeUrl, storeRoot: storeRoot, dbTablesPrefix: dbTablesPrefix, userAgent: userAgent, _3dcartPrivateKey: _3dcartPrivateKey, _3dcartAccessToken: _3dcartAccessToken, _3dcartapiApiKey: _3dcartapiApiKey, amazonSpClientId: amazonSpClientId, amazonSpClientSecret: amazonSpClientSecret, amazonSpRefreshToken: amazonSpRefreshToken, amazonSpAwsRegion: amazonSpAwsRegion, amazonSpApiEnvironment: amazonSpApiEnvironment, amazonSellerId: amazonSellerId, aspdotnetstorefrontApiUser: aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass: aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount: bigcommerceapiAdminAccount, bigcommerceapiApiPath: bigcommerceapiApiPath, bigcommerceapiApiKey: bigcommerceapiApiKey, bigcommerceapiClientId: bigcommerceapiClientId, bigcommerceapiAccessToken: bigcommerceapiAccessToken, bigcommerceapiContext: bigcommerceapiContext, bolApiKey: bolApiKey, bolApiSecret: bolApiSecret, bolRetailerId: bolRetailerId, demandwareClientId: demandwareClientId, demandwareApiPassword: demandwareApiPassword, demandwareUserName: demandwareUserName, demandwareUserPassword: demandwareUserPassword, ebayClientId: ebayClientId, ebayClientSecret: ebayClientSecret, ebayRuname: ebayRuname, ebayAccessToken: ebayAccessToken, ebayRefreshToken: ebayRefreshToken, ebayEnvironment: ebayEnvironment, ebaySiteId: ebaySiteId, ecwidAcessToken: ecwidAcessToken, ecwidStoreId: ecwidStoreId, lazadaAppId: lazadaAppId, lazadaAppSecret: lazadaAppSecret, lazadaRefreshToken: lazadaRefreshToken, lazadaRegion: lazadaRegion, etsyKeystring: etsyKeystring, etsySharedSecret: etsySharedSecret, etsyAccessToken: etsyAccessToken, etsyTokenSecret: etsyTokenSecret, etsyClientId: etsyClientId, etsyRefreshToken: etsyRefreshToken, facebookAppId: facebookAppId, facebookAppSecret: facebookAppSecret, facebookAccessToken: facebookAccessToken, facebookBusinessId: facebookBusinessId, netoApiKey: netoApiKey, netoApiUsername: netoApiUsername, shoplineAccessToken: shoplineAccessToken, shoplineAppKey: shoplineAppKey, shoplineAppSecret: shoplineAppSecret, shoplineSharedSecret: shoplineSharedSecret, shopifyAccessToken: shopifyAccessToken, shopifyApiKey: shopifyApiKey, shopifyApiPassword: shopifyApiPassword, shopifySharedSecret: shopifySharedSecret, shopeePartnerId: shopeePartnerId, shopeePartnerKey: shopeePartnerKey, shopeeShopId: shopeeShopId, shopeeRefreshToken: shopeeRefreshToken, shopeeRegion: shopeeRegion, shopeeEnvironment: shopeeEnvironment, shoplazzaAccessToken: shoplazzaAccessToken, shoplazzaSharedSecret: shoplazzaSharedSecret, mivaAccessToken: mivaAccessToken, mivaSignature: mivaSignature, shopwareAccessKey: shopwareAccessKey, shopwareApiKey: shopwareApiKey, shopwareApiSecret: shopwareApiSecret, bigcartelUserName: bigcartelUserName, bigcartelPassword: bigcartelPassword, bricklinkConsumerKey: bricklinkConsumerKey, bricklinkConsumerSecret: bricklinkConsumerSecret, bricklinkToken: bricklinkToken, bricklinkTokenSecret: bricklinkTokenSecret, volusionLogin: volusionLogin, volusionPassword: volusionPassword, walmartClientId: walmartClientId, walmartClientSecret: walmartClientSecret, walmartEnvironment: walmartEnvironment, walmartChannelType: walmartChannelType, walmartRegion: walmartRegion, squareClientId: squareClientId, squareClientSecret: squareClientSecret, squareRefreshToken: squareRefreshToken, squarespaceApiKey: squarespaceApiKey, squarespaceClientId: squarespaceClientId, squarespaceClientSecret: squarespaceClientSecret, squarespaceAccessToken: squarespaceAccessToken, squarespaceRefreshToken: squarespaceRefreshToken, hybrisClientId: hybrisClientId, hybrisClientSecret: hybrisClientSecret, hybrisUsername: hybrisUsername, hybrisPassword: hybrisPassword, hybrisWebsites: hybrisWebsites, lightspeedApiKey: lightspeedApiKey, lightspeedApiSecret: lightspeedApiSecret, commercehqApiKey: commercehqApiKey, commercehqApiPassword: commercehqApiPassword, wcConsumerKey: wcConsumerKey, wcConsumerSecret: wcConsumerSecret, magentoConsumerKey: magentoConsumerKey, magentoConsumerSecret: magentoConsumerSecret, magentoAccessToken: magentoAccessToken, magentoTokenSecret: magentoTokenSecret, prestashopWebserviceKey: prestashopWebserviceKey, wixAppId: wixAppId, wixAppSecretKey: wixAppSecretKey, wixInstanceId: wixInstanceId, wixRefreshToken: wixRefreshToken, mercadoLibreAppId: mercadoLibreAppId, mercadoLibreAppSecretKey: mercadoLibreAppSecretKey, mercadoLibreRefreshToken: mercadoLibreRefreshToken, zidClientId: zidClientId, zidClientSecret: zidClientSecret, zidAccessToken: zidAccessToken, zidAuthorization: zidAuthorization, zidRefreshToken: zidRefreshToken, flipkartClientId: flipkartClientId, flipkartClientSecret: flipkartClientSecret, allegroClientId: allegroClientId, allegroClientSecret: allegroClientSecret, allegroAccessToken: allegroAccessToken, allegroRefreshToken: allegroRefreshToken, allegroEnvironment: allegroEnvironment, zohoClientId: zohoClientId, zohoClientSecret: zohoClientSecret, zohoRefreshToken: zohoRefreshToken, zohoRegion: zohoRegion, tiendanubeUserId: tiendanubeUserId, tiendanubeAccessToken: tiendanubeAccessToken, tiendanubeClientSecret: tiendanubeClientSecret, ottoClientId: ottoClientId, ottoClientSecret: ottoClientSecret, ottoAppId: ottoAppId, ottoRefreshToken: ottoRefreshToken, ottoEnvironment: ottoEnvironment, ottoAccessToken: ottoAccessToken, tiktokshopAppKey: tiktokshopAppKey, tiktokshopAppSecret: tiktokshopAppSecret, tiktokshopRefreshToken: tiktokshopRefreshToken, tiktokshopAccessToken: tiktokshopAccessToken, sallaClientId: sallaClientId, sallaClientSecret: sallaClientSecret, sallaRefreshToken: sallaRefreshToken, sallaAccessToken: sallaAccessToken, temuAppKey: temuAppKey, temuAppSecret: temuAppSecret, temuAccessToken: temuAccessToken, temuRegion: temuRegion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     account.config.update
     - PUT /account.config.update.json
     - Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter replaceParameters: (query) Identifies if there is a necessity to replace parameters (optional)
     - parameter newStoreUrl: (query) The web address of the store you want to update to connect to API2Cart (optional)
     - parameter newStoreKey: (query) Update store key (optional)
     - parameter bridgeUrl: (query) This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     - parameter storeRoot: (query) Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     - parameter dbTablesPrefix: (query) DB tables prefix (optional)
     - parameter userAgent: (query) This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     - parameter _3dcartPrivateKey: (query) 3DCart Private Key (optional)
     - parameter _3dcartAccessToken: (query) 3DCart Token (optional)
     - parameter _3dcartapiApiKey: (query) 3DCart API Key (optional)
     - parameter amazonSpClientId: (query) Amazon SP API app client id (optional)
     - parameter amazonSpClientSecret: (query) Amazon SP API app client secret (optional)
     - parameter amazonSpRefreshToken: (query) Amazon SP API OAuth refresh token (optional)
     - parameter amazonSpAwsRegion: (query) Amazon AWS Region (optional)
     - parameter amazonSpApiEnvironment: (query) Amazon SP API environment (optional, default to "production")
     - parameter amazonSellerId: (query) Amazon Seller ID (Merchant token) (optional)
     - parameter aspdotnetstorefrontApiUser: (query) It&#39;s a AspDotNetStorefront account for which API is available (optional)
     - parameter aspdotnetstorefrontApiPass: (query) AspDotNetStorefront API Password (optional)
     - parameter bigcommerceapiAdminAccount: (query) It&#39;s a BigCommerce account for which API is enabled (optional)
     - parameter bigcommerceapiApiPath: (query) BigCommerce API URL (optional)
     - parameter bigcommerceapiApiKey: (query) Bigcommerce API Key (optional)
     - parameter bigcommerceapiClientId: (query) Client ID of the requesting app (optional)
     - parameter bigcommerceapiAccessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter bigcommerceapiContext: (query) API Path section unique to the store (optional)
     - parameter bolApiKey: (query) Bol API Key (optional)
     - parameter bolApiSecret: (query) Bol API Secret (optional)
     - parameter bolRetailerId: (query) Bol Retailer ID (optional)
     - parameter demandwareClientId: (query) Demandware client id (optional)
     - parameter demandwareApiPassword: (query) Demandware api password (optional)
     - parameter demandwareUserName: (query) Demandware user name (optional)
     - parameter demandwareUserPassword: (query) Demandware user password (optional)
     - parameter ebayClientId: (query) Application ID (AppID). (optional)
     - parameter ebayClientSecret: (query) Shared Secret from eBay application (optional)
     - parameter ebayRuname: (query) The RuName value that eBay assigns to your application. (optional)
     - parameter ebayAccessToken: (query) Used to authenticate API requests. (optional)
     - parameter ebayRefreshToken: (query) Used to renew the access token. (optional)
     - parameter ebayEnvironment: (query) eBay environment (optional)
     - parameter ebaySiteId: (query) eBay global ID (optional, default to 0)
     - parameter ecwidAcessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter ecwidStoreId: (query) Store Id (optional)
     - parameter lazadaAppId: (query) Lazada App ID (optional)
     - parameter lazadaAppSecret: (query) Lazada App Secret (optional)
     - parameter lazadaRefreshToken: (query) Lazada Refresh Token (optional)
     - parameter lazadaRegion: (query) Lazada API endpoint Region (optional)
     - parameter etsyKeystring: (query) Etsy keystring (optional)
     - parameter etsySharedSecret: (query) Etsy shared secret (optional)
     - parameter etsyAccessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter etsyTokenSecret: (query) Secret token authorizing the app to access resources on behalf of a user (optional)
     - parameter etsyClientId: (query) Etsy Client Id (optional)
     - parameter etsyRefreshToken: (query) Etsy Refresh token (optional)
     - parameter facebookAppId: (query) Facebook App ID (optional)
     - parameter facebookAppSecret: (query) Facebook App Secret (optional)
     - parameter facebookAccessToken: (query) Facebook Access Token (optional)
     - parameter facebookBusinessId: (query) Facebook Business ID (optional)
     - parameter netoApiKey: (query) Neto API Key (optional)
     - parameter netoApiUsername: (query) Neto User Name (optional)
     - parameter shoplineAccessToken: (query) Shopline APP Key (optional)
     - parameter shoplineAppKey: (query) Shopline APP Key (optional)
     - parameter shoplineAppSecret: (query) Shopline App Secret (optional)
     - parameter shoplineSharedSecret: (query) Shopline Shared Secret (optional)
     - parameter shopifyAccessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter shopifyApiKey: (query) Shopify API Key (optional)
     - parameter shopifyApiPassword: (query) Shopify API Password (optional)
     - parameter shopifySharedSecret: (query) Shared secret (optional)
     - parameter shopeePartnerId: (query) Shopee Partner ID (optional)
     - parameter shopeePartnerKey: (query) Shopee Partner Key (optional)
     - parameter shopeeShopId: (query) Shopee SHOP ID (optional)
     - parameter shopeeRefreshToken: (query) Shopee Refresh Token (optional)
     - parameter shopeeRegion: (query) Shopee API endpoint Region. Use for Chinese Mainland or Brazil. (optional)
     - parameter shopeeEnvironment: (query) Shopee Environment (optional)
     - parameter shoplazzaAccessToken: (query) Access token authorizing the app to access resources on behalf of a user (optional)
     - parameter shoplazzaSharedSecret: (query) Shared secret (optional)
     - parameter mivaAccessToken: (query) Miva access token (optional)
     - parameter mivaSignature: (query) Miva signature (optional)
     - parameter shopwareAccessKey: (query) Shopware access key (optional)
     - parameter shopwareApiKey: (query) Shopware api key (optional)
     - parameter shopwareApiSecret: (query) Shopware client secret access key (optional)
     - parameter bigcartelUserName: (query) Subdomain of store (optional)
     - parameter bigcartelPassword: (query) BigCartel account password (optional)
     - parameter bricklinkConsumerKey: (query) Bricklink Consumer Key (optional)
     - parameter bricklinkConsumerSecret: (query) Bricklink Consumer Secret (optional)
     - parameter bricklinkToken: (query) Bricklink Access Token (optional)
     - parameter bricklinkTokenSecret: (query) Bricklink Access Token Secret (optional)
     - parameter volusionLogin: (query) It&#39;s a Volusion account for which API is enabled (optional)
     - parameter volusionPassword: (query) Volusion API Password (optional)
     - parameter walmartClientId: (query) Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     - parameter walmartClientSecret: (query) Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     - parameter walmartEnvironment: (query) Walmart environment (optional, default to "production")
     - parameter walmartChannelType: (query) Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     - parameter walmartRegion: (query) Walmart region (optional, default to "us")
     - parameter squareClientId: (query) Square (Weebly) Client ID (optional)
     - parameter squareClientSecret: (query) Square (Weebly) Client Secret (optional)
     - parameter squareRefreshToken: (query) Square (Weebly) Refresh Token (optional)
     - parameter squarespaceApiKey: (query) Squarespace API Key (optional)
     - parameter squarespaceClientId: (query) Squarespace Connector Client ID (optional)
     - parameter squarespaceClientSecret: (query) Squarespace Connector Client Secret (optional)
     - parameter squarespaceAccessToken: (query) Squarespace access token (optional)
     - parameter squarespaceRefreshToken: (query) Squarespace refresh token (optional)
     - parameter hybrisClientId: (query) Omni Commerce Connector Client ID (optional)
     - parameter hybrisClientSecret: (query) Omni Commerce Connector Client Secret (optional)
     - parameter hybrisUsername: (query) User Name (optional)
     - parameter hybrisPassword: (query) User password (optional)
     - parameter hybrisWebsites: (query) Websites to stores mapping data (optional)
     - parameter lightspeedApiKey: (query) LightSpeed api key (optional)
     - parameter lightspeedApiSecret: (query) LightSpeed api secret (optional)
     - parameter commercehqApiKey: (query) CommerceHQ api key (optional)
     - parameter commercehqApiPassword: (query) CommerceHQ api password (optional)
     - parameter wcConsumerKey: (query) Woocommerce consumer key (optional)
     - parameter wcConsumerSecret: (query) Woocommerce consumer secret (optional)
     - parameter magentoConsumerKey: (query) Magento Consumer Key (optional)
     - parameter magentoConsumerSecret: (query) Magento Consumer Secret (optional)
     - parameter magentoAccessToken: (query) Magento Access Token (optional)
     - parameter magentoTokenSecret: (query) Magento Token Secret (optional)
     - parameter prestashopWebserviceKey: (query) Prestashop webservice key (optional)
     - parameter wixAppId: (query) Wix App ID (optional)
     - parameter wixAppSecretKey: (query) Wix App Secret Key (optional)
     - parameter wixInstanceId: (query) Wix Instance ID (optional)
     - parameter wixRefreshToken: (query) Wix refresh token (optional)
     - parameter mercadoLibreAppId: (query) Mercado Libre App ID (optional)
     - parameter mercadoLibreAppSecretKey: (query) Mercado Libre App Secret Key (optional)
     - parameter mercadoLibreRefreshToken: (query) Mercado Libre Refresh Token (optional)
     - parameter zidClientId: (query) Zid Client ID (optional)
     - parameter zidClientSecret: (query) Zid Client Secret (optional)
     - parameter zidAccessToken: (query) Zid Access Token (optional)
     - parameter zidAuthorization: (query) Zid Authorization (optional)
     - parameter zidRefreshToken: (query) Zid refresh token (optional)
     - parameter flipkartClientId: (query) Flipkart Client ID (optional)
     - parameter flipkartClientSecret: (query) Flipkart Client Secret (optional)
     - parameter allegroClientId: (query) Allegro Client ID (optional)
     - parameter allegroClientSecret: (query) Allegro Client Secret (optional)
     - parameter allegroAccessToken: (query) Allegro Access Token (optional)
     - parameter allegroRefreshToken: (query) Allegro Refresh Token (optional)
     - parameter allegroEnvironment: (query) Allegro Environment (optional, default to "production")
     - parameter zohoClientId: (query) Zoho Client ID (optional)
     - parameter zohoClientSecret: (query) Zoho Client Secret (optional)
     - parameter zohoRefreshToken: (query) Zoho Refresh Token (optional)
     - parameter zohoRegion: (query) Zoho API endpoint Region (optional)
     - parameter tiendanubeUserId: (query) Tiendanube User ID (optional)
     - parameter tiendanubeAccessToken: (query) Tiendanube Access Token (optional)
     - parameter tiendanubeClientSecret: (query) Tiendanube Client Secret (optional)
     - parameter ottoClientId: (query) Otto Client ID (optional)
     - parameter ottoClientSecret: (query) Otto Client Secret (optional)
     - parameter ottoAppId: (query) Otto App ID (optional)
     - parameter ottoRefreshToken: (query) Otto Refresh Token (optional)
     - parameter ottoEnvironment: (query) Otto Environment (optional)
     - parameter ottoAccessToken: (query) Otto Access Token (optional)
     - parameter tiktokshopAppKey: (query) TikTok Shop App Key (optional)
     - parameter tiktokshopAppSecret: (query) TikTok Shop App Secret (optional)
     - parameter tiktokshopRefreshToken: (query) TikTok Shop Refresh Token (optional)
     - parameter tiktokshopAccessToken: (query) TikTok Shop Access Token (optional)
     - parameter sallaClientId: (query) Salla Client ID (optional)
     - parameter sallaClientSecret: (query) Salla Client Secret (optional)
     - parameter sallaRefreshToken: (query) Salla Refresh Token (optional)
     - parameter sallaAccessToken: (query) Salla Access Token (optional)
     - parameter temuAppKey: (query) Temu App Key (optional)
     - parameter temuAppSecret: (query) Temu App Secret (optional)
     - parameter temuAccessToken: (query) Temu Access Token (optional)
     - parameter temuRegion: (query) Temu API endpoint Region. (optional)
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func accountConfigUpdateWithRequestBuilder(replaceParameters: Bool? = nil, newStoreUrl: String? = nil, newStoreKey: String? = nil, bridgeUrl: String? = nil, storeRoot: String? = nil, dbTablesPrefix: String? = nil, userAgent: String? = nil, _3dcartPrivateKey: String? = nil, _3dcartAccessToken: String? = nil, _3dcartapiApiKey: String? = nil, amazonSpClientId: String? = nil, amazonSpClientSecret: String? = nil, amazonSpRefreshToken: String? = nil, amazonSpAwsRegion: String? = nil, amazonSpApiEnvironment: String? = nil, amazonSellerId: String? = nil, aspdotnetstorefrontApiUser: String? = nil, aspdotnetstorefrontApiPass: String? = nil, bigcommerceapiAdminAccount: String? = nil, bigcommerceapiApiPath: String? = nil, bigcommerceapiApiKey: String? = nil, bigcommerceapiClientId: String? = nil, bigcommerceapiAccessToken: String? = nil, bigcommerceapiContext: String? = nil, bolApiKey: String? = nil, bolApiSecret: String? = nil, bolRetailerId: Int? = nil, demandwareClientId: String? = nil, demandwareApiPassword: String? = nil, demandwareUserName: String? = nil, demandwareUserPassword: String? = nil, ebayClientId: String? = nil, ebayClientSecret: String? = nil, ebayRuname: String? = nil, ebayAccessToken: String? = nil, ebayRefreshToken: String? = nil, ebayEnvironment: String? = nil, ebaySiteId: Int? = nil, ecwidAcessToken: String? = nil, ecwidStoreId: String? = nil, lazadaAppId: String? = nil, lazadaAppSecret: String? = nil, lazadaRefreshToken: String? = nil, lazadaRegion: String? = nil, etsyKeystring: String? = nil, etsySharedSecret: String? = nil, etsyAccessToken: String? = nil, etsyTokenSecret: String? = nil, etsyClientId: String? = nil, etsyRefreshToken: String? = nil, facebookAppId: String? = nil, facebookAppSecret: String? = nil, facebookAccessToken: String? = nil, facebookBusinessId: String? = nil, netoApiKey: String? = nil, netoApiUsername: String? = nil, shoplineAccessToken: String? = nil, shoplineAppKey: String? = nil, shoplineAppSecret: String? = nil, shoplineSharedSecret: String? = nil, shopifyAccessToken: String? = nil, shopifyApiKey: String? = nil, shopifyApiPassword: String? = nil, shopifySharedSecret: String? = nil, shopeePartnerId: String? = nil, shopeePartnerKey: String? = nil, shopeeShopId: String? = nil, shopeeRefreshToken: String? = nil, shopeeRegion: String? = nil, shopeeEnvironment: String? = nil, shoplazzaAccessToken: String? = nil, shoplazzaSharedSecret: String? = nil, mivaAccessToken: String? = nil, mivaSignature: String? = nil, shopwareAccessKey: String? = nil, shopwareApiKey: String? = nil, shopwareApiSecret: String? = nil, bigcartelUserName: String? = nil, bigcartelPassword: String? = nil, bricklinkConsumerKey: String? = nil, bricklinkConsumerSecret: String? = nil, bricklinkToken: String? = nil, bricklinkTokenSecret: String? = nil, volusionLogin: String? = nil, volusionPassword: String? = nil, walmartClientId: String? = nil, walmartClientSecret: String? = nil, walmartEnvironment: String? = nil, walmartChannelType: String? = nil, walmartRegion: String? = nil, squareClientId: String? = nil, squareClientSecret: String? = nil, squareRefreshToken: String? = nil, squarespaceApiKey: String? = nil, squarespaceClientId: String? = nil, squarespaceClientSecret: String? = nil, squarespaceAccessToken: String? = nil, squarespaceRefreshToken: String? = nil, hybrisClientId: String? = nil, hybrisClientSecret: String? = nil, hybrisUsername: String? = nil, hybrisPassword: String? = nil, hybrisWebsites: [String]? = nil, lightspeedApiKey: String? = nil, lightspeedApiSecret: String? = nil, commercehqApiKey: String? = nil, commercehqApiPassword: String? = nil, wcConsumerKey: String? = nil, wcConsumerSecret: String? = nil, magentoConsumerKey: String? = nil, magentoConsumerSecret: String? = nil, magentoAccessToken: String? = nil, magentoTokenSecret: String? = nil, prestashopWebserviceKey: String? = nil, wixAppId: String? = nil, wixAppSecretKey: String? = nil, wixInstanceId: String? = nil, wixRefreshToken: String? = nil, mercadoLibreAppId: String? = nil, mercadoLibreAppSecretKey: String? = nil, mercadoLibreRefreshToken: String? = nil, zidClientId: Int? = nil, zidClientSecret: String? = nil, zidAccessToken: String? = nil, zidAuthorization: String? = nil, zidRefreshToken: String? = nil, flipkartClientId: String? = nil, flipkartClientSecret: String? = nil, allegroClientId: String? = nil, allegroClientSecret: String? = nil, allegroAccessToken: String? = nil, allegroRefreshToken: String? = nil, allegroEnvironment: String? = nil, zohoClientId: String? = nil, zohoClientSecret: String? = nil, zohoRefreshToken: String? = nil, zohoRegion: String? = nil, tiendanubeUserId: Int? = nil, tiendanubeAccessToken: String? = nil, tiendanubeClientSecret: String? = nil, ottoClientId: String? = nil, ottoClientSecret: String? = nil, ottoAppId: String? = nil, ottoRefreshToken: String? = nil, ottoEnvironment: String? = nil, ottoAccessToken: String? = nil, tiktokshopAppKey: String? = nil, tiktokshopAppSecret: String? = nil, tiktokshopRefreshToken: String? = nil, tiktokshopAccessToken: String? = nil, sallaClientId: String? = nil, sallaClientSecret: String? = nil, sallaRefreshToken: String? = nil, sallaAccessToken: String? = nil, temuAppKey: String? = nil, temuAppSecret: String? = nil, temuAccessToken: String? = nil, temuRegion: String? = nil) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/account.config.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "replace_parameters": (wrappedValue: replaceParameters?.encodeToJSON(), isExplode: true),
            "new_store_url": (wrappedValue: newStoreUrl?.encodeToJSON(), isExplode: true),
            "new_store_key": (wrappedValue: newStoreKey?.encodeToJSON(), isExplode: true),
            "bridge_url": (wrappedValue: bridgeUrl?.encodeToJSON(), isExplode: true),
            "store_root": (wrappedValue: storeRoot?.encodeToJSON(), isExplode: true),
            "db_tables_prefix": (wrappedValue: dbTablesPrefix?.encodeToJSON(), isExplode: true),
            "user_agent": (wrappedValue: userAgent?.encodeToJSON(), isExplode: true),
            "3dcart_private_key": (wrappedValue: _3dcartPrivateKey?.encodeToJSON(), isExplode: true),
            "3dcart_access_token": (wrappedValue: _3dcartAccessToken?.encodeToJSON(), isExplode: true),
            "3dcartapi_api_key": (wrappedValue: _3dcartapiApiKey?.encodeToJSON(), isExplode: true),
            "amazon_sp_client_id": (wrappedValue: amazonSpClientId?.encodeToJSON(), isExplode: true),
            "amazon_sp_client_secret": (wrappedValue: amazonSpClientSecret?.encodeToJSON(), isExplode: true),
            "amazon_sp_refresh_token": (wrappedValue: amazonSpRefreshToken?.encodeToJSON(), isExplode: true),
            "amazon_sp_aws_region": (wrappedValue: amazonSpAwsRegion?.encodeToJSON(), isExplode: true),
            "amazon_sp_api_environment": (wrappedValue: amazonSpApiEnvironment?.encodeToJSON(), isExplode: true),
            "amazon_seller_id": (wrappedValue: amazonSellerId?.encodeToJSON(), isExplode: true),
            "aspdotnetstorefront_api_user": (wrappedValue: aspdotnetstorefrontApiUser?.encodeToJSON(), isExplode: true),
            "aspdotnetstorefront_api_pass": (wrappedValue: aspdotnetstorefrontApiPass?.encodeToJSON(), isExplode: true),
            "bigcommerceapi_admin_account": (wrappedValue: bigcommerceapiAdminAccount?.encodeToJSON(), isExplode: true),
            "bigcommerceapi_api_path": (wrappedValue: bigcommerceapiApiPath?.encodeToJSON(), isExplode: true),
            "bigcommerceapi_api_key": (wrappedValue: bigcommerceapiApiKey?.encodeToJSON(), isExplode: true),
            "bigcommerceapi_client_id": (wrappedValue: bigcommerceapiClientId?.encodeToJSON(), isExplode: true),
            "bigcommerceapi_access_token": (wrappedValue: bigcommerceapiAccessToken?.encodeToJSON(), isExplode: true),
            "bigcommerceapi_context": (wrappedValue: bigcommerceapiContext?.encodeToJSON(), isExplode: true),
            "bol_api_key": (wrappedValue: bolApiKey?.encodeToJSON(), isExplode: true),
            "bol_api_secret": (wrappedValue: bolApiSecret?.encodeToJSON(), isExplode: true),
            "bol_retailer_id": (wrappedValue: bolRetailerId?.encodeToJSON(), isExplode: true),
            "demandware_client_id": (wrappedValue: demandwareClientId?.encodeToJSON(), isExplode: true),
            "demandware_api_password": (wrappedValue: demandwareApiPassword?.encodeToJSON(), isExplode: true),
            "demandware_user_name": (wrappedValue: demandwareUserName?.encodeToJSON(), isExplode: true),
            "demandware_user_password": (wrappedValue: demandwareUserPassword?.encodeToJSON(), isExplode: true),
            "ebay_client_id": (wrappedValue: ebayClientId?.encodeToJSON(), isExplode: true),
            "ebay_client_secret": (wrappedValue: ebayClientSecret?.encodeToJSON(), isExplode: true),
            "ebay_runame": (wrappedValue: ebayRuname?.encodeToJSON(), isExplode: true),
            "ebay_access_token": (wrappedValue: ebayAccessToken?.encodeToJSON(), isExplode: true),
            "ebay_refresh_token": (wrappedValue: ebayRefreshToken?.encodeToJSON(), isExplode: true),
            "ebay_environment": (wrappedValue: ebayEnvironment?.encodeToJSON(), isExplode: true),
            "ebay_site_id": (wrappedValue: ebaySiteId?.encodeToJSON(), isExplode: true),
            "ecwid_acess_token": (wrappedValue: ecwidAcessToken?.encodeToJSON(), isExplode: true),
            "ecwid_store_id": (wrappedValue: ecwidStoreId?.encodeToJSON(), isExplode: true),
            "lazada_app_id": (wrappedValue: lazadaAppId?.encodeToJSON(), isExplode: true),
            "lazada_app_secret": (wrappedValue: lazadaAppSecret?.encodeToJSON(), isExplode: true),
            "lazada_refresh_token": (wrappedValue: lazadaRefreshToken?.encodeToJSON(), isExplode: true),
            "lazada_region": (wrappedValue: lazadaRegion?.encodeToJSON(), isExplode: true),
            "etsy_keystring": (wrappedValue: etsyKeystring?.encodeToJSON(), isExplode: true),
            "etsy_shared_secret": (wrappedValue: etsySharedSecret?.encodeToJSON(), isExplode: true),
            "etsy_access_token": (wrappedValue: etsyAccessToken?.encodeToJSON(), isExplode: true),
            "etsy_token_secret": (wrappedValue: etsyTokenSecret?.encodeToJSON(), isExplode: true),
            "etsy_client_id": (wrappedValue: etsyClientId?.encodeToJSON(), isExplode: true),
            "etsy_refresh_token": (wrappedValue: etsyRefreshToken?.encodeToJSON(), isExplode: true),
            "facebook_app_id": (wrappedValue: facebookAppId?.encodeToJSON(), isExplode: true),
            "facebook_app_secret": (wrappedValue: facebookAppSecret?.encodeToJSON(), isExplode: true),
            "facebook_access_token": (wrappedValue: facebookAccessToken?.encodeToJSON(), isExplode: true),
            "facebook_business_id": (wrappedValue: facebookBusinessId?.encodeToJSON(), isExplode: true),
            "neto_api_key": (wrappedValue: netoApiKey?.encodeToJSON(), isExplode: true),
            "neto_api_username": (wrappedValue: netoApiUsername?.encodeToJSON(), isExplode: true),
            "shopline_access_token": (wrappedValue: shoplineAccessToken?.encodeToJSON(), isExplode: true),
            "shopline_app_key": (wrappedValue: shoplineAppKey?.encodeToJSON(), isExplode: true),
            "shopline_app_secret": (wrappedValue: shoplineAppSecret?.encodeToJSON(), isExplode: true),
            "shopline_shared_secret": (wrappedValue: shoplineSharedSecret?.encodeToJSON(), isExplode: true),
            "shopify_access_token": (wrappedValue: shopifyAccessToken?.encodeToJSON(), isExplode: true),
            "shopify_api_key": (wrappedValue: shopifyApiKey?.encodeToJSON(), isExplode: true),
            "shopify_api_password": (wrappedValue: shopifyApiPassword?.encodeToJSON(), isExplode: true),
            "shopify_shared_secret": (wrappedValue: shopifySharedSecret?.encodeToJSON(), isExplode: true),
            "shopee_partner_id": (wrappedValue: shopeePartnerId?.encodeToJSON(), isExplode: true),
            "shopee_partner_key": (wrappedValue: shopeePartnerKey?.encodeToJSON(), isExplode: true),
            "shopee_shop_id": (wrappedValue: shopeeShopId?.encodeToJSON(), isExplode: true),
            "shopee_refresh_token": (wrappedValue: shopeeRefreshToken?.encodeToJSON(), isExplode: true),
            "shopee_region": (wrappedValue: shopeeRegion?.encodeToJSON(), isExplode: true),
            "shopee_environment": (wrappedValue: shopeeEnvironment?.encodeToJSON(), isExplode: true),
            "shoplazza_access_token": (wrappedValue: shoplazzaAccessToken?.encodeToJSON(), isExplode: true),
            "shoplazza_shared_secret": (wrappedValue: shoplazzaSharedSecret?.encodeToJSON(), isExplode: true),
            "miva_access_token": (wrappedValue: mivaAccessToken?.encodeToJSON(), isExplode: true),
            "miva_signature": (wrappedValue: mivaSignature?.encodeToJSON(), isExplode: true),
            "shopware_access_key": (wrappedValue: shopwareAccessKey?.encodeToJSON(), isExplode: true),
            "shopware_api_key": (wrappedValue: shopwareApiKey?.encodeToJSON(), isExplode: true),
            "shopware_api_secret": (wrappedValue: shopwareApiSecret?.encodeToJSON(), isExplode: true),
            "bigcartel_user_name": (wrappedValue: bigcartelUserName?.encodeToJSON(), isExplode: true),
            "bigcartel_password": (wrappedValue: bigcartelPassword?.encodeToJSON(), isExplode: true),
            "bricklink_consumer_key": (wrappedValue: bricklinkConsumerKey?.encodeToJSON(), isExplode: true),
            "bricklink_consumer_secret": (wrappedValue: bricklinkConsumerSecret?.encodeToJSON(), isExplode: true),
            "bricklink_token": (wrappedValue: bricklinkToken?.encodeToJSON(), isExplode: true),
            "bricklink_token_secret": (wrappedValue: bricklinkTokenSecret?.encodeToJSON(), isExplode: true),
            "volusion_login": (wrappedValue: volusionLogin?.encodeToJSON(), isExplode: true),
            "volusion_password": (wrappedValue: volusionPassword?.encodeToJSON(), isExplode: true),
            "walmart_client_id": (wrappedValue: walmartClientId?.encodeToJSON(), isExplode: true),
            "walmart_client_secret": (wrappedValue: walmartClientSecret?.encodeToJSON(), isExplode: true),
            "walmart_environment": (wrappedValue: walmartEnvironment?.encodeToJSON(), isExplode: true),
            "walmart_channel_type": (wrappedValue: walmartChannelType?.encodeToJSON(), isExplode: true),
            "walmart_region": (wrappedValue: walmartRegion?.encodeToJSON(), isExplode: true),
            "square_client_id": (wrappedValue: squareClientId?.encodeToJSON(), isExplode: true),
            "square_client_secret": (wrappedValue: squareClientSecret?.encodeToJSON(), isExplode: true),
            "square_refresh_token": (wrappedValue: squareRefreshToken?.encodeToJSON(), isExplode: true),
            "squarespace_api_key": (wrappedValue: squarespaceApiKey?.encodeToJSON(), isExplode: true),
            "squarespace_client_id": (wrappedValue: squarespaceClientId?.encodeToJSON(), isExplode: true),
            "squarespace_client_secret": (wrappedValue: squarespaceClientSecret?.encodeToJSON(), isExplode: true),
            "squarespace_access_token": (wrappedValue: squarespaceAccessToken?.encodeToJSON(), isExplode: true),
            "squarespace_refresh_token": (wrappedValue: squarespaceRefreshToken?.encodeToJSON(), isExplode: true),
            "hybris_client_id": (wrappedValue: hybrisClientId?.encodeToJSON(), isExplode: true),
            "hybris_client_secret": (wrappedValue: hybrisClientSecret?.encodeToJSON(), isExplode: true),
            "hybris_username": (wrappedValue: hybrisUsername?.encodeToJSON(), isExplode: true),
            "hybris_password": (wrappedValue: hybrisPassword?.encodeToJSON(), isExplode: true),
            "hybris_websites": (wrappedValue: hybrisWebsites?.encodeToJSON(), isExplode: true),
            "lightspeed_api_key": (wrappedValue: lightspeedApiKey?.encodeToJSON(), isExplode: true),
            "lightspeed_api_secret": (wrappedValue: lightspeedApiSecret?.encodeToJSON(), isExplode: true),
            "commercehq_api_key": (wrappedValue: commercehqApiKey?.encodeToJSON(), isExplode: true),
            "commercehq_api_password": (wrappedValue: commercehqApiPassword?.encodeToJSON(), isExplode: true),
            "wc_consumer_key": (wrappedValue: wcConsumerKey?.encodeToJSON(), isExplode: true),
            "wc_consumer_secret": (wrappedValue: wcConsumerSecret?.encodeToJSON(), isExplode: true),
            "magento_consumer_key": (wrappedValue: magentoConsumerKey?.encodeToJSON(), isExplode: true),
            "magento_consumer_secret": (wrappedValue: magentoConsumerSecret?.encodeToJSON(), isExplode: true),
            "magento_access_token": (wrappedValue: magentoAccessToken?.encodeToJSON(), isExplode: true),
            "magento_token_secret": (wrappedValue: magentoTokenSecret?.encodeToJSON(), isExplode: true),
            "prestashop_webservice_key": (wrappedValue: prestashopWebserviceKey?.encodeToJSON(), isExplode: true),
            "wix_app_id": (wrappedValue: wixAppId?.encodeToJSON(), isExplode: true),
            "wix_app_secret_key": (wrappedValue: wixAppSecretKey?.encodeToJSON(), isExplode: true),
            "wix_instance_id": (wrappedValue: wixInstanceId?.encodeToJSON(), isExplode: true),
            "wix_refresh_token": (wrappedValue: wixRefreshToken?.encodeToJSON(), isExplode: true),
            "mercado_libre_app_id": (wrappedValue: mercadoLibreAppId?.encodeToJSON(), isExplode: true),
            "mercado_libre_app_secret_key": (wrappedValue: mercadoLibreAppSecretKey?.encodeToJSON(), isExplode: true),
            "mercado_libre_refresh_token": (wrappedValue: mercadoLibreRefreshToken?.encodeToJSON(), isExplode: true),
            "zid_client_id": (wrappedValue: zidClientId?.encodeToJSON(), isExplode: true),
            "zid_client_secret": (wrappedValue: zidClientSecret?.encodeToJSON(), isExplode: true),
            "zid_access_token": (wrappedValue: zidAccessToken?.encodeToJSON(), isExplode: true),
            "zid_authorization": (wrappedValue: zidAuthorization?.encodeToJSON(), isExplode: true),
            "zid_refresh_token": (wrappedValue: zidRefreshToken?.encodeToJSON(), isExplode: true),
            "flipkart_client_id": (wrappedValue: flipkartClientId?.encodeToJSON(), isExplode: true),
            "flipkart_client_secret": (wrappedValue: flipkartClientSecret?.encodeToJSON(), isExplode: true),
            "allegro_client_id": (wrappedValue: allegroClientId?.encodeToJSON(), isExplode: true),
            "allegro_client_secret": (wrappedValue: allegroClientSecret?.encodeToJSON(), isExplode: true),
            "allegro_access_token": (wrappedValue: allegroAccessToken?.encodeToJSON(), isExplode: true),
            "allegro_refresh_token": (wrappedValue: allegroRefreshToken?.encodeToJSON(), isExplode: true),
            "allegro_environment": (wrappedValue: allegroEnvironment?.encodeToJSON(), isExplode: true),
            "zoho_client_id": (wrappedValue: zohoClientId?.encodeToJSON(), isExplode: true),
            "zoho_client_secret": (wrappedValue: zohoClientSecret?.encodeToJSON(), isExplode: true),
            "zoho_refresh_token": (wrappedValue: zohoRefreshToken?.encodeToJSON(), isExplode: true),
            "zoho_region": (wrappedValue: zohoRegion?.encodeToJSON(), isExplode: true),
            "tiendanube_user_id": (wrappedValue: tiendanubeUserId?.encodeToJSON(), isExplode: true),
            "tiendanube_access_token": (wrappedValue: tiendanubeAccessToken?.encodeToJSON(), isExplode: true),
            "tiendanube_client_secret": (wrappedValue: tiendanubeClientSecret?.encodeToJSON(), isExplode: true),
            "otto_client_id": (wrappedValue: ottoClientId?.encodeToJSON(), isExplode: true),
            "otto_client_secret": (wrappedValue: ottoClientSecret?.encodeToJSON(), isExplode: true),
            "otto_app_id": (wrappedValue: ottoAppId?.encodeToJSON(), isExplode: true),
            "otto_refresh_token": (wrappedValue: ottoRefreshToken?.encodeToJSON(), isExplode: true),
            "otto_environment": (wrappedValue: ottoEnvironment?.encodeToJSON(), isExplode: true),
            "otto_access_token": (wrappedValue: ottoAccessToken?.encodeToJSON(), isExplode: true),
            "tiktokshop_app_key": (wrappedValue: tiktokshopAppKey?.encodeToJSON(), isExplode: true),
            "tiktokshop_app_secret": (wrappedValue: tiktokshopAppSecret?.encodeToJSON(), isExplode: true),
            "tiktokshop_refresh_token": (wrappedValue: tiktokshopRefreshToken?.encodeToJSON(), isExplode: true),
            "tiktokshop_access_token": (wrappedValue: tiktokshopAccessToken?.encodeToJSON(), isExplode: true),
            "salla_client_id": (wrappedValue: sallaClientId?.encodeToJSON(), isExplode: true),
            "salla_client_secret": (wrappedValue: sallaClientSecret?.encodeToJSON(), isExplode: true),
            "salla_refresh_token": (wrappedValue: sallaRefreshToken?.encodeToJSON(), isExplode: true),
            "salla_access_token": (wrappedValue: sallaAccessToken?.encodeToJSON(), isExplode: true),
            "temu_app_key": (wrappedValue: temuAppKey?.encodeToJSON(), isExplode: true),
            "temu_app_secret": (wrappedValue: temuAppSecret?.encodeToJSON(), isExplode: true),
            "temu_access_token": (wrappedValue: temuAccessToken?.encodeToJSON(), isExplode: true),
            "temu_region": (wrappedValue: temuRegion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     account.failed_webhooks
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter ids: (query) List of сomma-separated webhook ids (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accountFailedWebhooks(start: Int? = nil, count: Int? = nil, ids: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountFailedWebhooks200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return accountFailedWebhooksWithRequestBuilder(start: start, count: count, ids: ids).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     account.failed_webhooks
     - GET /account.failed_webhooks.json
     - If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter ids: (query) List of сomma-separated webhook ids (optional)
     - returns: RequestBuilder<AccountFailedWebhooks200Response> 
     */
    open class func accountFailedWebhooksWithRequestBuilder(start: Int? = nil, count: Int? = nil, ids: String? = nil) -> RequestBuilder<AccountFailedWebhooks200Response> {
        let localVariablePath = "/account.failed_webhooks.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountFailedWebhooks200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     account.supported_platforms
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accountSupportedPlatforms(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountSupportedPlatforms200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return accountSupportedPlatformsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     account.supported_platforms
     - GET /account.supported_platforms.json
     - Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - returns: RequestBuilder<AccountSupportedPlatforms200Response> 
     */
    open class func accountSupportedPlatformsWithRequestBuilder() -> RequestBuilder<AccountSupportedPlatforms200Response> {
        let localVariablePath = "/account.supported_platforms.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountSupportedPlatforms200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
