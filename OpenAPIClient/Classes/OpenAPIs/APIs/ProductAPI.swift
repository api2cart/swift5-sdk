//
// ProductAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProductAPI {

    /**
     product.add
     
     - parameter productAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productAdd(productAdd: ProductAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productAddWithRequestBuilder(productAdd: productAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.add
     - POST /product.add.json
     - Add new product to store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productAdd: (body)  
     - returns: RequestBuilder<ProductAdd200Response> 
     */
    open class func productAddWithRequestBuilder(productAdd: ProductAdd) -> RequestBuilder<ProductAdd200Response> {
        let localVariablePath = "/product.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.add.batch
     
     - parameter productAddBatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productAddBatch(productAddBatch: ProductAddBatch, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CategoryAddBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productAddBatchWithRequestBuilder(productAddBatch: productAddBatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.add.batch
     - POST /product.add.batch.json
     - Add new products to the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productAddBatch: (body)  
     - returns: RequestBuilder<CategoryAddBatch200Response> 
     */
    open class func productAddBatchWithRequestBuilder(productAddBatch: ProductAddBatch) -> RequestBuilder<CategoryAddBatch200Response> {
        let localVariablePath = "/product.add.batch.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productAddBatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAddBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.attribute.list
     
     - parameter productId: (query) Retrieves attributes specified by product id 
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter attributeId: (query) Retrieves info for specified attribute_id (optional)
     - parameter variantId: (query) Defines product&#39;s variants specified by variant id (optional)
     - parameter attributeGroupId: (query) Filter by attribute_group_id (optional)
     - parameter langId: (query) Retrieves attributes specified by language id (optional)
     - parameter storeId: (query) Retrieves attributes specified by store id (optional)
     - parameter setName: (query) Retrieves attributes specified by set_name in Magento (optional)
     - parameter sortBy: (query) Set field to sort by (optional, default to "attribute_id")
     - parameter sortDirection: (query) Set sorting direction (optional, default to "asc")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "attribute_id,name")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productAttributeList(productId: String, start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, attributeId: String? = nil, variantId: String? = nil, attributeGroupId: String? = nil, langId: String? = nil, storeId: String? = nil, setName: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseProductAttributeList?, _ error: Error?) -> Void)) -> RequestTask {
        return productAttributeListWithRequestBuilder(productId: productId, start: start, count: count, pageCursor: pageCursor, attributeId: attributeId, variantId: variantId, attributeGroupId: attributeGroupId, langId: langId, storeId: storeId, setName: setName, sortBy: sortBy, sortDirection: sortDirection, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.attribute.list
     - GET /product.attribute.list.json
     - Get list of attributes and values.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Retrieves attributes specified by product id 
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter attributeId: (query) Retrieves info for specified attribute_id (optional)
     - parameter variantId: (query) Defines product&#39;s variants specified by variant id (optional)
     - parameter attributeGroupId: (query) Filter by attribute_group_id (optional)
     - parameter langId: (query) Retrieves attributes specified by language id (optional)
     - parameter storeId: (query) Retrieves attributes specified by store id (optional)
     - parameter setName: (query) Retrieves attributes specified by set_name in Magento (optional)
     - parameter sortBy: (query) Set field to sort by (optional, default to "attribute_id")
     - parameter sortDirection: (query) Set sorting direction (optional, default to "asc")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "attribute_id,name")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ModelResponseProductAttributeList> 
     */
    open class func productAttributeListWithRequestBuilder(productId: String, start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, attributeId: String? = nil, variantId: String? = nil, attributeGroupId: String? = nil, langId: String? = nil, storeId: String? = nil, setName: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<ModelResponseProductAttributeList> {
        let localVariablePath = "/product.attribute.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "attribute_id": (wrappedValue: attributeId?.encodeToJSON(), isExplode: true),
            "variant_id": (wrappedValue: variantId?.encodeToJSON(), isExplode: true),
            "attribute_group_id": (wrappedValue: attributeGroupId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "set_name": (wrappedValue: setName?.encodeToJSON(), isExplode: true),
            "sort_by": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "sort_direction": (wrappedValue: sortDirection?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseProductAttributeList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.attribute.value.set
     
     - parameter productId: (query) Defines product id where the attribute should be added 
     - parameter attributeId: (query) Filter by attribute_id (optional)
     - parameter attributeGroupId: (query) Filter by attribute_group_id (optional)
     - parameter attributeName: (query) Define attribute name (optional)
     - parameter value: (query) Define attribute value (optional)
     - parameter valueId: (query) Define attribute value id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productAttributeValueSet(productId: String, attributeId: String? = nil, attributeGroupId: String? = nil, attributeName: String? = nil, value: String? = nil, valueId: Int? = nil, langId: String? = nil, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductAttributeValueSet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productAttributeValueSetWithRequestBuilder(productId: productId, attributeId: attributeId, attributeGroupId: attributeGroupId, attributeName: attributeName, value: value, valueId: valueId, langId: langId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.attribute.value.set
     - POST /product.attribute.value.set.json
     - Set attribute value to product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines product id where the attribute should be added 
     - parameter attributeId: (query) Filter by attribute_id (optional)
     - parameter attributeGroupId: (query) Filter by attribute_group_id (optional)
     - parameter attributeName: (query) Define attribute name (optional)
     - parameter value: (query) Define attribute value (optional)
     - parameter valueId: (query) Define attribute value id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<ProductAttributeValueSet200Response> 
     */
    open class func productAttributeValueSetWithRequestBuilder(productId: String, attributeId: String? = nil, attributeGroupId: String? = nil, attributeName: String? = nil, value: String? = nil, valueId: Int? = nil, langId: String? = nil, storeId: String? = nil) -> RequestBuilder<ProductAttributeValueSet200Response> {
        let localVariablePath = "/product.attribute.value.set.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "attribute_id": (wrappedValue: attributeId?.encodeToJSON(), isExplode: true),
            "attribute_group_id": (wrappedValue: attributeGroupId?.encodeToJSON(), isExplode: true),
            "attribute_name": (wrappedValue: attributeName?.encodeToJSON(), isExplode: true),
            "value": (wrappedValue: value?.encodeToJSON(), isExplode: true),
            "value_id": (wrappedValue: valueId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductAttributeValueSet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.attribute.value.unset
     
     - parameter productId: (query) Product id 
     - parameter attributeId: (query) Attribute Id 
     - parameter storeId: (query) Store Id (optional)
     - parameter includeDefault: (query) Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)
     - parameter reindex: (query) Is reindex required (optional, default to true)
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productAttributeValueUnset(productId: String, attributeId: String, storeId: String? = nil, includeDefault: Bool? = nil, reindex: Bool? = nil, clearCache: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductAttributeValueUnset200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productAttributeValueUnsetWithRequestBuilder(productId: productId, attributeId: attributeId, storeId: storeId, includeDefault: includeDefault, reindex: reindex, clearCache: clearCache).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.attribute.value.unset
     - POST /product.attribute.value.unset.json
     - Removes attribute value for a product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Product id 
     - parameter attributeId: (query) Attribute Id 
     - parameter storeId: (query) Store Id (optional)
     - parameter includeDefault: (query) Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)
     - parameter reindex: (query) Is reindex required (optional, default to true)
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - returns: RequestBuilder<ProductAttributeValueUnset200Response> 
     */
    open class func productAttributeValueUnsetWithRequestBuilder(productId: String, attributeId: String, storeId: String? = nil, includeDefault: Bool? = nil, reindex: Bool? = nil, clearCache: Bool? = nil) -> RequestBuilder<ProductAttributeValueUnset200Response> {
        let localVariablePath = "/product.attribute.value.unset.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "attribute_id": (wrappedValue: attributeId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "include_default": (wrappedValue: includeDefault?.encodeToJSON(), isExplode: true),
            "reindex": (wrappedValue: reindex?.encodeToJSON(), isExplode: true),
            "clear_cache": (wrappedValue: clearCache?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductAttributeValueUnset200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.brand.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter brandIds: (query) Retrieves brands specified by brand ids (optional)
     - parameter categoryId: (query) Retrieves product brands specified by category id (optional)
     - parameter parentId: (query) Retrieves brands specified by parent id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,short_description,active,url")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productBrandList(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, brandIds: String? = nil, categoryId: String? = nil, parentId: String? = nil, storeId: String? = nil, langId: String? = nil, findWhere: String? = nil, findValue: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseProductBrandList?, _ error: Error?) -> Void)) -> RequestTask {
        return productBrandListWithRequestBuilder(start: start, count: count, pageCursor: pageCursor, brandIds: brandIds, categoryId: categoryId, parentId: parentId, storeId: storeId, langId: langId, findWhere: findWhere, findValue: findValue, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.brand.list
     - GET /product.brand.list.json
     - Get list of brands from your store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter brandIds: (query) Retrieves brands specified by brand ids (optional)
     - parameter categoryId: (query) Retrieves product brands specified by category id (optional)
     - parameter parentId: (query) Retrieves brands specified by parent id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,short_description,active,url")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ModelResponseProductBrandList> 
     */
    open class func productBrandListWithRequestBuilder(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, brandIds: String? = nil, categoryId: String? = nil, parentId: String? = nil, storeId: String? = nil, langId: String? = nil, findWhere: String? = nil, findValue: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<ModelResponseProductBrandList> {
        let localVariablePath = "/product.brand.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "brand_ids": (wrappedValue: brandIds?.encodeToJSON(), isExplode: true),
            "category_id": (wrappedValue: categoryId?.encodeToJSON(), isExplode: true),
            "parent_id": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseProductBrandList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.child_item.find
     
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional)
     - parameter findParams: (query) Entity search that is specified by comma-separated parameters (optional, default to "whole_words")
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productChildItemFind(findValue: String? = nil, findWhere: String? = nil, findParams: String? = nil, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductChildItemFind200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productChildItemFindWithRequestBuilder(findValue: findValue, findWhere: findWhere, findParams: findParams, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.child_item.find
     - GET /product.child_item.find.json
     - Search product child item (bundled item or configurable product variant) in store catalog.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional)
     - parameter findParams: (query) Entity search that is specified by comma-separated parameters (optional, default to "whole_words")
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<ProductChildItemFind200Response> 
     */
    open class func productChildItemFindWithRequestBuilder(findValue: String? = nil, findWhere: String? = nil, findParams: String? = nil, storeId: String? = nil) -> RequestBuilder<ProductChildItemFind200Response> {
        let localVariablePath = "/product.child_item.find.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "find_value": (wrappedValue: findValue?.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "find_params": (wrappedValue: findParams?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductChildItemFind200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.child_item.info
     
     - parameter productId: (query) Filter by parent product id 
     - parameter id: (query) Entity id 
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productChildItemInfo(productId: String, id: String, storeId: String? = nil, langId: String? = nil, currencyId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, useLatestApiVersion: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductChildItemInfo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productChildItemInfoWithRequestBuilder(productId: productId, id: id, storeId: storeId, langId: langId, currencyId: currencyId, responseFields: responseFields, params: params, exclude: exclude, useLatestApiVersion: useLatestApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.child_item.info
     - GET /product.child_item.info.json
     - Get child for specific product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Filter by parent product id 
     - parameter id: (query) Entity id 
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - returns: RequestBuilder<ProductChildItemInfo200Response> 
     */
    open class func productChildItemInfoWithRequestBuilder(productId: String, id: String, storeId: String? = nil, langId: String? = nil, currencyId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, useLatestApiVersion: Bool? = nil) -> RequestBuilder<ProductChildItemInfo200Response> {
        let localVariablePath = "/product.child_item.info.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "currency_id": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "use_latest_api_version": (wrappedValue: useLatestApiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductChildItemInfo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.child_item.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter productId: (query) Filter by parent product id (optional)
     - parameter productIds: (query) Filter by parent product ids (optional)
     - parameter sku: (query) Filter by products variant&#39;s sku (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter availSale: (query) Specifies the set of available/not available products for sale (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Child products search that is specified by field (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter returnGlobal: (query) Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productChildItemList(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, productId: String? = nil, productIds: String? = nil, sku: String? = nil, storeId: String? = nil, langId: String? = nil, currencyId: String? = nil, availSale: Bool? = nil, findValue: String? = nil, findWhere: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, returnGlobal: Bool? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, useLatestApiVersion: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseProductChildItemList?, _ error: Error?) -> Void)) -> RequestTask {
        return productChildItemListWithRequestBuilder(start: start, count: count, pageCursor: pageCursor, productId: productId, productIds: productIds, sku: sku, storeId: storeId, langId: langId, currencyId: currencyId, availSale: availSale, findValue: findValue, findWhere: findWhere, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, returnGlobal: returnGlobal, responseFields: responseFields, params: params, exclude: exclude, reportRequestId: reportRequestId, disableReportCache: disableReportCache, useLatestApiVersion: useLatestApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.child_item.list
     - GET /product.child_item.list.json
     - Get a list of a product's child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter productId: (query) Filter by parent product id (optional)
     - parameter productIds: (query) Filter by parent product ids (optional)
     - parameter sku: (query) Filter by products variant&#39;s sku (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter availSale: (query) Specifies the set of available/not available products for sale (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Child products search that is specified by field (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter returnGlobal: (query) Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - returns: RequestBuilder<ModelResponseProductChildItemList> 
     */
    open class func productChildItemListWithRequestBuilder(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, productId: String? = nil, productIds: String? = nil, sku: String? = nil, storeId: String? = nil, langId: String? = nil, currencyId: String? = nil, availSale: Bool? = nil, findValue: String? = nil, findWhere: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, returnGlobal: Bool? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, useLatestApiVersion: Bool? = nil) -> RequestBuilder<ModelResponseProductChildItemList> {
        let localVariablePath = "/product.child_item.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId?.encodeToJSON(), isExplode: true),
            "product_ids": (wrappedValue: productIds?.encodeToJSON(), isExplode: true),
            "sku": (wrappedValue: sku?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "currency_id": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
            "avail_sale": (wrappedValue: availSale?.encodeToJSON(), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "return_global": (wrappedValue: returnGlobal?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(), isExplode: true),
            "use_latest_api_version": (wrappedValue: useLatestApiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseProductChildItemList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.count
     
     - parameter productIds: (query) Counts products specified by product ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - parameter categoriesIds: (query) Defines product add that is specified by comma-separated categories id (optional)
     - parameter categoryId: (query) Counts products specified by category id (optional)
     - parameter storeId: (query) Counts products specified by store id (optional)
     - parameter langId: (query) Counts products specified by language id (optional)
     - parameter availView: (query) Specifies the set of visible/invisible products (optional)
     - parameter availSale: (query) Specifies the set of available/not available products for sale (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter brandName: (query) Retrieves brands specified by brand name (optional)
     - parameter productAttributes: (query) Defines product attributes (optional)
     - parameter status: (query) Defines product&#39;s status (optional)
     - parameter type: (query) Defines products&#39;s type (optional)
     - parameter visible: (query) Filter items by visibility status (optional, default to "everywhere")
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Counts products that are searched specified by field (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter returnGlobal: (query) Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productCount(productIds: String? = nil, sinceId: String? = nil, categoriesIds: String? = nil, categoryId: String? = nil, storeId: String? = nil, langId: String? = nil, availView: Bool? = nil, availSale: Bool? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, brandName: String? = nil, productAttributes: [String]? = nil, status: String? = nil, type: String? = nil, visible: String? = nil, findValue: String? = nil, findWhere: String? = nil, reportRequestId: String? = nil, returnGlobal: Bool? = nil, disableReportCache: Bool? = nil, useLatestApiVersion: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductCount200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productCountWithRequestBuilder(productIds: productIds, sinceId: sinceId, categoriesIds: categoriesIds, categoryId: categoryId, storeId: storeId, langId: langId, availView: availView, availSale: availSale, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, brandName: brandName, productAttributes: productAttributes, status: status, type: type, visible: visible, findValue: findValue, findWhere: findWhere, reportRequestId: reportRequestId, returnGlobal: returnGlobal, disableReportCache: disableReportCache, useLatestApiVersion: useLatestApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.count
     - GET /product.count.json
     - Count products in store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productIds: (query) Counts products specified by product ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - parameter categoriesIds: (query) Defines product add that is specified by comma-separated categories id (optional)
     - parameter categoryId: (query) Counts products specified by category id (optional)
     - parameter storeId: (query) Counts products specified by store id (optional)
     - parameter langId: (query) Counts products specified by language id (optional)
     - parameter availView: (query) Specifies the set of visible/invisible products (optional)
     - parameter availSale: (query) Specifies the set of available/not available products for sale (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter brandName: (query) Retrieves brands specified by brand name (optional)
     - parameter productAttributes: (query) Defines product attributes (optional)
     - parameter status: (query) Defines product&#39;s status (optional)
     - parameter type: (query) Defines products&#39;s type (optional)
     - parameter visible: (query) Filter items by visibility status (optional, default to "everywhere")
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Counts products that are searched specified by field (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter returnGlobal: (query) Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - returns: RequestBuilder<ProductCount200Response> 
     */
    open class func productCountWithRequestBuilder(productIds: String? = nil, sinceId: String? = nil, categoriesIds: String? = nil, categoryId: String? = nil, storeId: String? = nil, langId: String? = nil, availView: Bool? = nil, availSale: Bool? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, brandName: String? = nil, productAttributes: [String]? = nil, status: String? = nil, type: String? = nil, visible: String? = nil, findValue: String? = nil, findWhere: String? = nil, reportRequestId: String? = nil, returnGlobal: Bool? = nil, disableReportCache: Bool? = nil, useLatestApiVersion: Bool? = nil) -> RequestBuilder<ProductCount200Response> {
        let localVariablePath = "/product.count.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_ids": (wrappedValue: productIds?.encodeToJSON(), isExplode: true),
            "since_id": (wrappedValue: sinceId?.encodeToJSON(), isExplode: true),
            "categories_ids": (wrappedValue: categoriesIds?.encodeToJSON(), isExplode: true),
            "category_id": (wrappedValue: categoryId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "avail_view": (wrappedValue: availView?.encodeToJSON(), isExplode: true),
            "avail_sale": (wrappedValue: availSale?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "brand_name": (wrappedValue: brandName?.encodeToJSON(), isExplode: true),
            "product_attributes": (wrappedValue: productAttributes?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "visible": (wrappedValue: visible?.encodeToJSON(), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(), isExplode: true),
            "return_global": (wrappedValue: returnGlobal?.encodeToJSON(), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(), isExplode: true),
            "use_latest_api_version": (wrappedValue: useLatestApiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductCount200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.currency.add
     
     - parameter iso3: (query) Specifies standardized currency code 
     - parameter rate: (query) Defines the numerical identifier against to the major currency 
     - parameter name: (query) Defines currency&#39;s name (optional)
     - parameter avail: (query) Specifies whether the currency is available (optional, default to true)
     - parameter symbolLeft: (query) Defines the symbol that is located before the currency (optional)
     - parameter symbolRight: (query) Defines the symbol that is located after the currency (optional)
     - parameter _default: (query) Specifies currency&#39;s default meaning (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productCurrencyAdd(iso3: String, rate: Double, name: String? = nil, avail: Bool? = nil, symbolLeft: String? = nil, symbolRight: String? = nil, _default: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductCurrencyAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productCurrencyAddWithRequestBuilder(iso3: iso3, rate: rate, name: name, avail: avail, symbolLeft: symbolLeft, symbolRight: symbolRight, _default: _default).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.currency.add
     - POST /product.currency.add.json
     - Add currency and/or set default in store
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter iso3: (query) Specifies standardized currency code 
     - parameter rate: (query) Defines the numerical identifier against to the major currency 
     - parameter name: (query) Defines currency&#39;s name (optional)
     - parameter avail: (query) Specifies whether the currency is available (optional, default to true)
     - parameter symbolLeft: (query) Defines the symbol that is located before the currency (optional)
     - parameter symbolRight: (query) Defines the symbol that is located after the currency (optional)
     - parameter _default: (query) Specifies currency&#39;s default meaning (optional, default to false)
     - returns: RequestBuilder<ProductCurrencyAdd200Response> 
     */
    open class func productCurrencyAddWithRequestBuilder(iso3: String, rate: Double, name: String? = nil, avail: Bool? = nil, symbolLeft: String? = nil, symbolRight: String? = nil, _default: Bool? = nil) -> RequestBuilder<ProductCurrencyAdd200Response> {
        let localVariablePath = "/product.currency.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "iso3": (wrappedValue: iso3.encodeToJSON(), isExplode: true),
            "rate": (wrappedValue: rate.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "avail": (wrappedValue: avail?.encodeToJSON(), isExplode: true),
            "symbol_left": (wrappedValue: symbolLeft?.encodeToJSON(), isExplode: true),
            "symbol_right": (wrappedValue: symbolRight?.encodeToJSON(), isExplode: true),
            "default": (wrappedValue: _default?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductCurrencyAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.currency.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter _default: (query) Specifies the set of default/not default currencies (optional)
     - parameter avail: (query) Specifies the set of available/not available currencies (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "name,iso3,default,avail")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productCurrencyList(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, _default: Bool? = nil, avail: Bool? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseProductCurrencyList?, _ error: Error?) -> Void)) -> RequestTask {
        return productCurrencyListWithRequestBuilder(start: start, count: count, pageCursor: pageCursor, _default: _default, avail: avail, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.currency.list
     - GET /product.currency.list.json
     - Get list of currencies
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter _default: (query) Specifies the set of default/not default currencies (optional)
     - parameter avail: (query) Specifies the set of available/not available currencies (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "name,iso3,default,avail")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ModelResponseProductCurrencyList> 
     */
    open class func productCurrencyListWithRequestBuilder(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, _default: Bool? = nil, avail: Bool? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<ModelResponseProductCurrencyList> {
        let localVariablePath = "/product.currency.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "default": (wrappedValue: _default?.encodeToJSON(), isExplode: true),
            "avail": (wrappedValue: avail?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseProductCurrencyList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.delete
     
     - parameter id: (query) Product id that will be removed 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productDelete(id: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productDeleteWithRequestBuilder(id: id, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.delete
     - DELETE /product.delete.json
     - Product delete
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Product id that will be removed 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<CustomerDelete200Response> 
     */
    open class func productDeleteWithRequestBuilder(id: String, storeId: String? = nil) -> RequestBuilder<CustomerDelete200Response> {
        let localVariablePath = "/product.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.delete.batch
     
     - parameter productDeleteBatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productDeleteBatch(productDeleteBatch: ProductDeleteBatch, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CategoryAddBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productDeleteBatchWithRequestBuilder(productDeleteBatch: productDeleteBatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.delete.batch
     - POST /product.delete.batch.json
     - Remove product from the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productDeleteBatch: (body)  
     - returns: RequestBuilder<CategoryAddBatch200Response> 
     */
    open class func productDeleteBatchWithRequestBuilder(productDeleteBatch: ProductDeleteBatch) -> RequestBuilder<CategoryAddBatch200Response> {
        let localVariablePath = "/product.delete.batch.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productDeleteBatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAddBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.find
     
     - parameter findValue: (query) Entity search that is specified by some value 
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional, default to "name")
     - parameter findParams: (query) Entity search that is specified by comma-separated parameters (optional, default to "whole_words")
     - parameter findWhat: (query) Parameter&#39;s value specifies the entity that has to be found (optional, default to "product")
     - parameter langId: (query) Search products specified by language id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productFind(findValue: String, findWhere: String? = nil, findParams: String? = nil, findWhat: String? = nil, langId: String? = nil, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductFind200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productFindWithRequestBuilder(findValue: findValue, findWhere: findWhere, findParams: findParams, findWhat: findWhat, langId: langId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.find
     - GET /product.find.json
     - Search product in store catalog. \"Apple\" is specified here by default.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter findValue: (query) Entity search that is specified by some value 
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional, default to "name")
     - parameter findParams: (query) Entity search that is specified by comma-separated parameters (optional, default to "whole_words")
     - parameter findWhat: (query) Parameter&#39;s value specifies the entity that has to be found (optional, default to "product")
     - parameter langId: (query) Search products specified by language id (optional)
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<ProductFind200Response> 
     */
    open class func productFindWithRequestBuilder(findValue: String, findWhere: String? = nil, findParams: String? = nil, findWhat: String? = nil, langId: String? = nil, storeId: String? = nil) -> RequestBuilder<ProductFind200Response> {
        let localVariablePath = "/product.find.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "find_value": (wrappedValue: findValue.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "find_params": (wrappedValue: findParams?.encodeToJSON(), isExplode: true),
            "find_what": (wrappedValue: findWhat?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductFind200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.image.add
     
     - parameter productImageAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productImageAdd(productImageAdd: ProductImageAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductImageAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productImageAddWithRequestBuilder(productImageAdd: productImageAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.image.add
     - POST /product.image.add.json
     - Add image to product
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productImageAdd: (body)  
     - returns: RequestBuilder<ProductImageAdd200Response> 
     */
    open class func productImageAddWithRequestBuilder(productImageAdd: ProductImageAdd) -> RequestBuilder<ProductImageAdd200Response> {
        let localVariablePath = "/product.image.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productImageAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductImageAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.image.delete
     
     - parameter productId: (query) Defines product id where the image should be deleted 
     - parameter id: (query) Entity id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productImageDelete(productId: String, id: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productImageDeleteWithRequestBuilder(productId: productId, id: id, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.image.delete
     - DELETE /product.image.delete.json
     - Delete image
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines product id where the image should be deleted 
     - parameter id: (query) Entity id 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func productImageDeleteWithRequestBuilder(productId: String, id: String, storeId: String? = nil) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/product.image.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.image.update
     
     - parameter productId: (query) Defines product id where the image should be updated 
     - parameter id: (query) Defines image update specified by image id 
     - parameter variantIds: (query) Defines product&#39;s variants ids (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter imageName: (query) Defines image&#39;s name (optional)
     - parameter type: (query) Defines image&#39;s types that are specified by comma-separated list (optional, default to "additional")
     - parameter label: (query) Defines alternative text that has to be attached to the picture (optional)
     - parameter position: (query) Defines image’s position in the list (optional)
     - parameter hidden: (query) Define is hide image (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productImageUpdate(productId: String, id: String, variantIds: String? = nil, storeId: String? = nil, langId: String? = nil, imageName: String? = nil, type: String? = nil, label: String? = nil, position: Int? = nil, hidden: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductImageUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productImageUpdateWithRequestBuilder(productId: productId, id: id, variantIds: variantIds, storeId: storeId, langId: langId, imageName: imageName, type: type, label: label, position: position, hidden: hidden).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.image.update
     - PUT /product.image.update.json
     - Update details of image
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines product id where the image should be updated 
     - parameter id: (query) Defines image update specified by image id 
     - parameter variantIds: (query) Defines product&#39;s variants ids (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter imageName: (query) Defines image&#39;s name (optional)
     - parameter type: (query) Defines image&#39;s types that are specified by comma-separated list (optional, default to "additional")
     - parameter label: (query) Defines alternative text that has to be attached to the picture (optional)
     - parameter position: (query) Defines image’s position in the list (optional)
     - parameter hidden: (query) Define is hide image (optional)
     - returns: RequestBuilder<ProductImageUpdate200Response> 
     */
    open class func productImageUpdateWithRequestBuilder(productId: String, id: String, variantIds: String? = nil, storeId: String? = nil, langId: String? = nil, imageName: String? = nil, type: String? = nil, label: String? = nil, position: Int? = nil, hidden: Bool? = nil) -> RequestBuilder<ProductImageUpdate200Response> {
        let localVariablePath = "/product.image.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "variant_ids": (wrappedValue: variantIds?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "image_name": (wrappedValue: imageName?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "label": (wrappedValue: label?.encodeToJSON(), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductImageUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.info
     
     - parameter id: (query) Retrieves product&#39;s info specified by product id 
     - parameter storeId: (query) Retrieves product info specified by store id (optional)
     - parameter langId: (query) Retrieves product info specified by language id (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description,price,categories_ids")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productInfo(id: String, storeId: String? = nil, langId: String? = nil, currencyId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, useLatestApiVersion: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductInfo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productInfoWithRequestBuilder(id: id, storeId: storeId, langId: langId, currencyId: currencyId, responseFields: responseFields, params: params, exclude: exclude, reportRequestId: reportRequestId, disableReportCache: disableReportCache, useLatestApiVersion: useLatestApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.info
     - GET /product.info.json
     - Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Retrieves product&#39;s info specified by product id 
     - parameter storeId: (query) Retrieves product info specified by store id (optional)
     - parameter langId: (query) Retrieves product info specified by language id (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description,price,categories_ids")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - returns: RequestBuilder<ProductInfo200Response> 
     */
    open class func productInfoWithRequestBuilder(id: String, storeId: String? = nil, langId: String? = nil, currencyId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, useLatestApiVersion: Bool? = nil) -> RequestBuilder<ProductInfo200Response> {
        let localVariablePath = "/product.info.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "currency_id": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(), isExplode: true),
            "use_latest_api_version": (wrappedValue: useLatestApiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductInfo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter productIds: (query) Retrieves products specified by product ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - parameter categoriesIds: (query) Retrieves products specified by categories ids (optional)
     - parameter categoryId: (query) Retrieves products specified by category id (optional)
     - parameter storeId: (query) Retrieves products specified by store id (optional)
     - parameter langId: (query) Retrieves products specified by language id (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter availView: (query) Specifies the set of visible/invisible products (optional)
     - parameter availSale: (query) Specifies the set of available/not available products for sale (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter sku: (query) Filter by product&#39;s sku (optional)
     - parameter brandName: (query) Retrieves brands specified by brand name (optional)
     - parameter productAttributes: (query) Defines product attributes (optional)
     - parameter status: (query) Defines product&#39;s status (optional)
     - parameter type: (query) Defines products&#39;s type (optional)
     - parameter visible: (query) Filter items by visibility status (optional, default to "everywhere")
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Product search that is specified by field (optional)
     - parameter returnGlobal: (query) Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description,price,categories_ids")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter sortBy: (query) Set field to sort by (optional, default to "id")
     - parameter sortDirection: (query) Set sorting direction (optional, default to "asc")
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableCache: (query) Disable cache for current request (optional, default to false)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productList(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, productIds: String? = nil, sinceId: String? = nil, categoriesIds: String? = nil, categoryId: String? = nil, storeId: String? = nil, langId: String? = nil, currencyId: String? = nil, availView: Bool? = nil, availSale: Bool? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, sku: String? = nil, brandName: String? = nil, productAttributes: [String]? = nil, status: String? = nil, type: String? = nil, visible: String? = nil, findValue: String? = nil, findWhere: String? = nil, returnGlobal: Bool? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, reportRequestId: String? = nil, disableCache: Bool? = nil, disableReportCache: Bool? = nil, useLatestApiVersion: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseProductList?, _ error: Error?) -> Void)) -> RequestTask {
        return productListWithRequestBuilder(start: start, count: count, pageCursor: pageCursor, productIds: productIds, sinceId: sinceId, categoriesIds: categoriesIds, categoryId: categoryId, storeId: storeId, langId: langId, currencyId: currencyId, availView: availView, availSale: availSale, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, sku: sku, brandName: brandName, productAttributes: productAttributes, status: status, type: type, visible: visible, findValue: findValue, findWhere: findWhere, returnGlobal: returnGlobal, params: params, responseFields: responseFields, exclude: exclude, sortBy: sortBy, sortDirection: sortDirection, reportRequestId: reportRequestId, disableCache: disableCache, disableReportCache: disableReportCache, useLatestApiVersion: useLatestApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.list
     - GET /product.list.json
     - Get list of products from your store. Returns 10 products by default.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter productIds: (query) Retrieves products specified by product ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - parameter categoriesIds: (query) Retrieves products specified by categories ids (optional)
     - parameter categoryId: (query) Retrieves products specified by category id (optional)
     - parameter storeId: (query) Retrieves products specified by store id (optional)
     - parameter langId: (query) Retrieves products specified by language id (optional)
     - parameter currencyId: (query) Currency Id (optional)
     - parameter availView: (query) Specifies the set of visible/invisible products (optional)
     - parameter availSale: (query) Specifies the set of available/not available products for sale (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter sku: (query) Filter by product&#39;s sku (optional)
     - parameter brandName: (query) Retrieves brands specified by brand name (optional)
     - parameter productAttributes: (query) Defines product attributes (optional)
     - parameter status: (query) Defines product&#39;s status (optional)
     - parameter type: (query) Defines products&#39;s type (optional)
     - parameter visible: (query) Filter items by visibility status (optional, default to "everywhere")
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Product search that is specified by field (optional)
     - parameter returnGlobal: (query) Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description,price,categories_ids")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter sortBy: (query) Set field to sort by (optional, default to "id")
     - parameter sortDirection: (query) Set sorting direction (optional, default to "asc")
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableCache: (query) Disable cache for current request (optional, default to false)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter useLatestApiVersion: (query) Use the latest platform API version (optional, default to false)
     - returns: RequestBuilder<ModelResponseProductList> 
     */
    open class func productListWithRequestBuilder(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, productIds: String? = nil, sinceId: String? = nil, categoriesIds: String? = nil, categoryId: String? = nil, storeId: String? = nil, langId: String? = nil, currencyId: String? = nil, availView: Bool? = nil, availSale: Bool? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, sku: String? = nil, brandName: String? = nil, productAttributes: [String]? = nil, status: String? = nil, type: String? = nil, visible: String? = nil, findValue: String? = nil, findWhere: String? = nil, returnGlobal: Bool? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, reportRequestId: String? = nil, disableCache: Bool? = nil, disableReportCache: Bool? = nil, useLatestApiVersion: Bool? = nil) -> RequestBuilder<ModelResponseProductList> {
        let localVariablePath = "/product.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "product_ids": (wrappedValue: productIds?.encodeToJSON(), isExplode: true),
            "since_id": (wrappedValue: sinceId?.encodeToJSON(), isExplode: true),
            "categories_ids": (wrappedValue: categoriesIds?.encodeToJSON(), isExplode: true),
            "category_id": (wrappedValue: categoryId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "currency_id": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
            "avail_view": (wrappedValue: availView?.encodeToJSON(), isExplode: true),
            "avail_sale": (wrappedValue: availSale?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "sku": (wrappedValue: sku?.encodeToJSON(), isExplode: true),
            "brand_name": (wrappedValue: brandName?.encodeToJSON(), isExplode: true),
            "product_attributes": (wrappedValue: productAttributes?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "visible": (wrappedValue: visible?.encodeToJSON(), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "return_global": (wrappedValue: returnGlobal?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "sort_by": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "sort_direction": (wrappedValue: sortDirection?.encodeToJSON(), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(), isExplode: true),
            "disable_cache": (wrappedValue: disableCache?.encodeToJSON(), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(), isExplode: true),
            "use_latest_api_version": (wrappedValue: useLatestApiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseProductList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.manufacturer.add
     
     - parameter productId: (query) Defines products specified by product id 
     - parameter manufacturer: (query) Defines product’s manufacturer&#39;s name 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productManufacturerAdd(productId: String, manufacturer: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductManufacturerAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productManufacturerAddWithRequestBuilder(productId: productId, manufacturer: manufacturer, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.manufacturer.add
     - POST /product.manufacturer.add.json
     - Add manufacturer to store and assign to product
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines products specified by product id 
     - parameter manufacturer: (query) Defines product’s manufacturer&#39;s name 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<ProductManufacturerAdd200Response> 
     */
    open class func productManufacturerAddWithRequestBuilder(productId: String, manufacturer: String, storeId: String? = nil) -> RequestBuilder<ProductManufacturerAdd200Response> {
        let localVariablePath = "/product.manufacturer.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "manufacturer": (wrappedValue: manufacturer.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductManufacturerAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.option.add
     
     - parameter productOptionAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productOptionAdd(productOptionAdd: ProductOptionAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductOptionAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productOptionAddWithRequestBuilder(productOptionAdd: productOptionAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.option.add
     - POST /product.option.add.json
     - Add product option from store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productOptionAdd: (body)  
     - returns: RequestBuilder<ProductOptionAdd200Response> 
     */
    open class func productOptionAddWithRequestBuilder(productOptionAdd: ProductOptionAdd) -> RequestBuilder<ProductOptionAdd200Response> {
        let localVariablePath = "/product.option.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productOptionAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductOptionAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.option.assign
     
     - parameter productId: (query) Defines product id where the option should be assigned 
     - parameter optionId: (query) Defines option id which has to be assigned 
     - parameter _required: (query) Defines if the option is required (optional, default to false)
     - parameter sortOrder: (query) Sort number in the list (optional, default to 0)
     - parameter optionValues: (query) Defines option values that has to be assigned (optional)
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productOptionAssign(productId: String, optionId: String, _required: Bool? = nil, sortOrder: Int? = nil, optionValues: String? = nil, clearCache: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductOptionAssign200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productOptionAssignWithRequestBuilder(productId: productId, optionId: optionId, _required: _required, sortOrder: sortOrder, optionValues: optionValues, clearCache: clearCache).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.option.assign
     - POST /product.option.assign.json
     - Assign option from product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines product id where the option should be assigned 
     - parameter optionId: (query) Defines option id which has to be assigned 
     - parameter _required: (query) Defines if the option is required (optional, default to false)
     - parameter sortOrder: (query) Sort number in the list (optional, default to 0)
     - parameter optionValues: (query) Defines option values that has to be assigned (optional)
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - returns: RequestBuilder<ProductOptionAssign200Response> 
     */
    open class func productOptionAssignWithRequestBuilder(productId: String, optionId: String, _required: Bool? = nil, sortOrder: Int? = nil, optionValues: String? = nil, clearCache: Bool? = nil) -> RequestBuilder<ProductOptionAssign200Response> {
        let localVariablePath = "/product.option.assign.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "option_id": (wrappedValue: optionId.encodeToJSON(), isExplode: true),
            "required": (wrappedValue: _required?.encodeToJSON(), isExplode: true),
            "sort_order": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "option_values": (wrappedValue: optionValues?.encodeToJSON(), isExplode: true),
            "clear_cache": (wrappedValue: clearCache?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductOptionAssign200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.option.delete
     
     - parameter optionId: (query) Defines option id that should be deleted 
     - parameter productId: (query) Defines product id where the option should be deleted 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productOptionDelete(optionId: String, productId: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productOptionDeleteWithRequestBuilder(optionId: optionId, productId: productId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.option.delete
     - DELETE /product.option.delete.json
     - Product option delete.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter optionId: (query) Defines option id that should be deleted 
     - parameter productId: (query) Defines product id where the option should be deleted 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func productOptionDeleteWithRequestBuilder(optionId: String, productId: String, storeId: String? = nil) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/product.option.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "option_id": (wrappedValue: optionId.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.option.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter productId: (query) Retrieves products&#39; options specified by product id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productOptionList(start: Int? = nil, count: Int? = nil, productId: String? = nil, langId: String? = nil, storeId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseProductOptionList?, _ error: Error?) -> Void)) -> RequestTask {
        return productOptionListWithRequestBuilder(start: start, count: count, productId: productId, langId: langId, storeId: storeId, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.option.list
     - GET /product.option.list.json
     - Get list of options.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter productId: (query) Retrieves products&#39; options specified by product id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ModelResponseProductOptionList> 
     */
    open class func productOptionListWithRequestBuilder(start: Int? = nil, count: Int? = nil, productId: String? = nil, langId: String? = nil, storeId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<ModelResponseProductOptionList> {
        let localVariablePath = "/product.option.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseProductOptionList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.option.value.add
     
     - parameter productId: (query) Defines product id where the option value should be added 
     - parameter optionId: (query) Defines option id where the value has to be added 
     - parameter optionValue: (query) Defines option value that has to be added (optional)
     - parameter sortOrder: (query) Sort number in the list (optional, default to 0)
     - parameter displayValue: (query) Defines the value that will be displayed for the option value (optional)
     - parameter isDefault: (query) Defines as a default (optional)
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productOptionValueAdd(productId: String, optionId: String, optionValue: String? = nil, sortOrder: Int? = nil, displayValue: String? = nil, isDefault: Bool? = nil, clearCache: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductOptionValueAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productOptionValueAddWithRequestBuilder(productId: productId, optionId: optionId, optionValue: optionValue, sortOrder: sortOrder, displayValue: displayValue, isDefault: isDefault, clearCache: clearCache).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.option.value.add
     - POST /product.option.value.add.json
     - Add product option item from option.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines product id where the option value should be added 
     - parameter optionId: (query) Defines option id where the value has to be added 
     - parameter optionValue: (query) Defines option value that has to be added (optional)
     - parameter sortOrder: (query) Sort number in the list (optional, default to 0)
     - parameter displayValue: (query) Defines the value that will be displayed for the option value (optional)
     - parameter isDefault: (query) Defines as a default (optional)
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - returns: RequestBuilder<ProductOptionValueAdd200Response> 
     */
    open class func productOptionValueAddWithRequestBuilder(productId: String, optionId: String, optionValue: String? = nil, sortOrder: Int? = nil, displayValue: String? = nil, isDefault: Bool? = nil, clearCache: Bool? = nil) -> RequestBuilder<ProductOptionValueAdd200Response> {
        let localVariablePath = "/product.option.value.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "option_id": (wrappedValue: optionId.encodeToJSON(), isExplode: true),
            "option_value": (wrappedValue: optionValue?.encodeToJSON(), isExplode: true),
            "sort_order": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "display_value": (wrappedValue: displayValue?.encodeToJSON(), isExplode: true),
            "is_default": (wrappedValue: isDefault?.encodeToJSON(), isExplode: true),
            "clear_cache": (wrappedValue: clearCache?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductOptionValueAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.option.value.assign
     
     - parameter productOptionId: (query) Defines product&#39;s option id where the value has to be assigned 
     - parameter optionValueId: (query) Defines value id that has to be assigned 
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productOptionValueAssign(productOptionId: Int, optionValueId: String, clearCache: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductOptionValueAssign200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productOptionValueAssignWithRequestBuilder(productOptionId: productOptionId, optionValueId: optionValueId, clearCache: clearCache).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.option.value.assign
     - POST /product.option.value.assign.json
     - Assign product option item from product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productOptionId: (query) Defines product&#39;s option id where the value has to be assigned 
     - parameter optionValueId: (query) Defines value id that has to be assigned 
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - returns: RequestBuilder<ProductOptionValueAssign200Response> 
     */
    open class func productOptionValueAssignWithRequestBuilder(productOptionId: Int, optionValueId: String, clearCache: Bool? = nil) -> RequestBuilder<ProductOptionValueAssign200Response> {
        let localVariablePath = "/product.option.value.assign.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_option_id": (wrappedValue: productOptionId.encodeToJSON(), isExplode: true),
            "option_value_id": (wrappedValue: optionValueId.encodeToJSON(), isExplode: true),
            "clear_cache": (wrappedValue: clearCache?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductOptionValueAssign200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.option.value.delete
     
     - parameter optionId: (query) Defines option id where the value should be deleted 
     - parameter optionValueId: (query) Defines option value id that should be deleted 
     - parameter productId: (query) Defines product id where the option value should be deleted 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productOptionValueDelete(optionId: String, optionValueId: String, productId: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productOptionValueDeleteWithRequestBuilder(optionId: optionId, optionValueId: optionValueId, productId: productId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.option.value.delete
     - DELETE /product.option.value.delete.json
     - Product option value delete.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter optionId: (query) Defines option id where the value should be deleted 
     - parameter optionValueId: (query) Defines option value id that should be deleted 
     - parameter productId: (query) Defines product id where the option value should be deleted 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func productOptionValueDeleteWithRequestBuilder(optionId: String, optionValueId: String, productId: String, storeId: String? = nil) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/product.option.value.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "option_id": (wrappedValue: optionId.encodeToJSON(), isExplode: true),
            "option_value_id": (wrappedValue: optionValueId.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.option.value.update
     
     - parameter productId: (query) Defines product id where the option value should be updated 
     - parameter optionId: (query) Defines option id where the value has to be updated 
     - parameter optionValueId: (query) Defines value id that has to be assigned 
     - parameter optionValue: (query) Defines option value that has to be added (optional)
     - parameter price: (query) Defines new product option price (optional)
     - parameter quantity: (query) Defines new products&#39; options quantity (optional)
     - parameter displayValue: (query) Defines the value that will be displayed for the option value (optional)
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productOptionValueUpdate(productId: String, optionId: String, optionValueId: String, optionValue: String? = nil, price: Double? = nil, quantity: Double? = nil, displayValue: String? = nil, clearCache: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productOptionValueUpdateWithRequestBuilder(productId: productId, optionId: optionId, optionValueId: optionValueId, optionValue: optionValue, price: price, quantity: quantity, displayValue: displayValue, clearCache: clearCache).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.option.value.update
     - PUT /product.option.value.update.json
     - Update product option item from option.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines product id where the option value should be updated 
     - parameter optionId: (query) Defines option id where the value has to be updated 
     - parameter optionValueId: (query) Defines value id that has to be assigned 
     - parameter optionValue: (query) Defines option value that has to be added (optional)
     - parameter price: (query) Defines new product option price (optional)
     - parameter quantity: (query) Defines new products&#39; options quantity (optional)
     - parameter displayValue: (query) Defines the value that will be displayed for the option value (optional)
     - parameter clearCache: (query) Is cache clear required (optional, default to true)
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func productOptionValueUpdateWithRequestBuilder(productId: String, optionId: String, optionValueId: String, optionValue: String? = nil, price: Double? = nil, quantity: Double? = nil, displayValue: String? = nil, clearCache: Bool? = nil) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/product.option.value.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "option_id": (wrappedValue: optionId.encodeToJSON(), isExplode: true),
            "option_value_id": (wrappedValue: optionValueId.encodeToJSON(), isExplode: true),
            "option_value": (wrappedValue: optionValue?.encodeToJSON(), isExplode: true),
            "price": (wrappedValue: price?.encodeToJSON(), isExplode: true),
            "quantity": (wrappedValue: quantity?.encodeToJSON(), isExplode: true),
            "display_value": (wrappedValue: displayValue?.encodeToJSON(), isExplode: true),
            "clear_cache": (wrappedValue: clearCache?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.price.add
     
     - parameter productPriceAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productPriceAdd(productPriceAdd: ProductPriceAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CartValidate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productPriceAddWithRequestBuilder(productPriceAdd: productPriceAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.price.add
     - POST /product.price.add.json
     - Add some prices to the product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productPriceAdd: (body)  
     - returns: RequestBuilder<CartValidate200Response> 
     */
    open class func productPriceAddWithRequestBuilder(productPriceAdd: ProductPriceAdd) -> RequestBuilder<CartValidate200Response> {
        let localVariablePath = "/product.price.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productPriceAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CartValidate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.price.delete
     
     - parameter productId: (query) Defines the product where the price has to be deleted 
     - parameter groupPrices: (query) Defines product&#39;s group prices (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productPriceDelete(productId: String, groupPrices: String? = nil, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productPriceDeleteWithRequestBuilder(productId: productId, groupPrices: groupPrices, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.price.delete
     - DELETE /product.price.delete.json
     - Delete some prices of the product
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines the product where the price has to be deleted 
     - parameter groupPrices: (query) Defines product&#39;s group prices (optional)
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func productPriceDeleteWithRequestBuilder(productId: String, groupPrices: String? = nil, storeId: String? = nil) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/product.price.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "group_prices": (wrappedValue: groupPrices?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.price.update
     
     - parameter productPriceUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productPriceUpdate(productPriceUpdate: ProductPriceUpdate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productPriceUpdateWithRequestBuilder(productPriceUpdate: productPriceUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.price.update
     - PUT /product.price.update.json
     - Update some prices of the product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productPriceUpdate: (body)  
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func productPriceUpdateWithRequestBuilder(productPriceUpdate: ProductPriceUpdate) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/product.price.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productPriceUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.review.list
     
     - parameter productId: (query) Product id 
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter ids: (query) Retrieves reviews specified by ids (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter status: (query) Defines status (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productReviewList(productId: String, start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, ids: String? = nil, storeId: String? = nil, status: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseProductReviewList?, _ error: Error?) -> Void)) -> RequestTask {
        return productReviewListWithRequestBuilder(productId: productId, start: start, count: count, pageCursor: pageCursor, ids: ids, storeId: storeId, status: status, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.review.list
     - GET /product.review.list.json
     - Get reviews of a specific product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Product id 
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter ids: (query) Retrieves reviews specified by ids (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter status: (query) Defines status (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ModelResponseProductReviewList> 
     */
    open class func productReviewListWithRequestBuilder(productId: String, start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, ids: String? = nil, storeId: String? = nil, status: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<ModelResponseProductReviewList> {
        let localVariablePath = "/product.review.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseProductReviewList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.store.assign
     
     - parameter productId: (query) Defines id of the product which should be assigned to a store 
     - parameter storeId: (query) Defines id of the store product should be assigned to 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productStoreAssign(productId: String, storeId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productStoreAssignWithRequestBuilder(productId: productId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.store.assign
     - POST /product.store.assign.json
     - Assign product to store
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines id of the product which should be assigned to a store 
     - parameter storeId: (query) Defines id of the store product should be assigned to 
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func productStoreAssignWithRequestBuilder(productId: String, storeId: String) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/product.store.assign.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.tax.add
     
     - parameter productTaxAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productTaxAdd(productTaxAdd: ProductTaxAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductTaxAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productTaxAddWithRequestBuilder(productTaxAdd: productTaxAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.tax.add
     - POST /product.tax.add.json
     - Add tax class and tax rate to store and assign to product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productTaxAdd: (body)  
     - returns: RequestBuilder<ProductTaxAdd200Response> 
     */
    open class func productTaxAddWithRequestBuilder(productTaxAdd: ProductTaxAdd) -> RequestBuilder<ProductTaxAdd200Response> {
        let localVariablePath = "/product.tax.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productTaxAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductTaxAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.update
     
     - parameter productUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productUpdate(productUpdate: ProductUpdate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productUpdateWithRequestBuilder(productUpdate: productUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.update
     - PUT /product.update.json
     - This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productUpdate: (body)  
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func productUpdateWithRequestBuilder(productUpdate: ProductUpdate) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/product.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.update.batch
     
     - parameter productUpdateBatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productUpdateBatch(productUpdateBatch: ProductUpdateBatch, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CategoryAddBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productUpdateBatchWithRequestBuilder(productUpdateBatch: productUpdateBatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.update.batch
     - POST /product.update.batch.json
     - Update products on the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productUpdateBatch: (body)  
     - returns: RequestBuilder<CategoryAddBatch200Response> 
     */
    open class func productUpdateBatchWithRequestBuilder(productUpdateBatch: ProductUpdateBatch) -> RequestBuilder<CategoryAddBatch200Response> {
        let localVariablePath = "/product.update.batch.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productUpdateBatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAddBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.add
     
     - parameter productVariantAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantAdd(productVariantAdd: ProductVariantAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductVariantAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantAddWithRequestBuilder(productVariantAdd: productVariantAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.add
     - POST /product.variant.add.json
     - Add variant to product.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productVariantAdd: (body)  
     - returns: RequestBuilder<ProductVariantAdd200Response> 
     */
    open class func productVariantAddWithRequestBuilder(productVariantAdd: ProductVariantAdd) -> RequestBuilder<ProductVariantAdd200Response> {
        let localVariablePath = "/product.variant.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productVariantAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductVariantAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.add.batch
     
     - parameter productVariantAddBatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantAddBatch(productVariantAddBatch: ProductVariantAddBatch, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CategoryAddBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantAddBatchWithRequestBuilder(productVariantAddBatch: productVariantAddBatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.add.batch
     - POST /product.variant.add.batch.json
     - Add new product variants to the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productVariantAddBatch: (body)  
     - returns: RequestBuilder<CategoryAddBatch200Response> 
     */
    open class func productVariantAddBatchWithRequestBuilder(productVariantAddBatch: ProductVariantAddBatch) -> RequestBuilder<CategoryAddBatch200Response> {
        let localVariablePath = "/product.variant.add.batch.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productVariantAddBatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAddBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.delete
     
     - parameter id: (query) Defines variant removal, specified by variant id 
     - parameter productId: (query) Defines product&#39;s id where the variant has to be deleted 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantDelete(id: String, productId: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeValueDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantDeleteWithRequestBuilder(id: id, productId: productId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.delete
     - DELETE /product.variant.delete.json
     - Delete variant.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Defines variant removal, specified by variant id 
     - parameter productId: (query) Defines product&#39;s id where the variant has to be deleted 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<AttributeValueDelete200Response> 
     */
    open class func productVariantDeleteWithRequestBuilder(id: String, productId: String, storeId: String? = nil) -> RequestBuilder<AttributeValueDelete200Response> {
        let localVariablePath = "/product.variant.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeValueDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.delete.batch
     
     - parameter productVariantDeleteBatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantDeleteBatch(productVariantDeleteBatch: ProductVariantDeleteBatch, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CategoryAddBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantDeleteBatchWithRequestBuilder(productVariantDeleteBatch: productVariantDeleteBatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.delete.batch
     - POST /product.variant.delete.batch.json
     - Remove product variants from the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productVariantDeleteBatch: (body)  
     - returns: RequestBuilder<CategoryAddBatch200Response> 
     */
    open class func productVariantDeleteBatchWithRequestBuilder(productVariantDeleteBatch: ProductVariantDeleteBatch) -> RequestBuilder<CategoryAddBatch200Response> {
        let localVariablePath = "/product.variant.delete.batch.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productVariantDeleteBatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAddBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.image.add
     
     - parameter productVariantImageAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantImageAdd(productVariantImageAdd: ProductVariantImageAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductVariantImageAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantImageAddWithRequestBuilder(productVariantImageAdd: productVariantImageAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.image.add
     - POST /product.variant.image.add.json
     - Add image to product
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productVariantImageAdd: (body)  
     - returns: RequestBuilder<ProductVariantImageAdd200Response> 
     */
    open class func productVariantImageAddWithRequestBuilder(productVariantImageAdd: ProductVariantImageAdd) -> RequestBuilder<ProductVariantImageAdd200Response> {
        let localVariablePath = "/product.variant.image.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productVariantImageAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductVariantImageAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.image.delete
     
     - parameter productId: (query) Defines product id where the variant image should be deleted 
     - parameter productVariantId: (query) Defines product&#39;s variants specified by variant id 
     - parameter id: (query) Entity id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantImageDelete(productId: String, productVariantId: String, id: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantImageDeleteWithRequestBuilder(productId: productId, productVariantId: productVariantId, id: id, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.image.delete
     - DELETE /product.variant.image.delete.json
     - Delete  image to product
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productId: (query) Defines product id where the variant image should be deleted 
     - parameter productVariantId: (query) Defines product&#39;s variants specified by variant id 
     - parameter id: (query) Entity id 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func productVariantImageDeleteWithRequestBuilder(productId: String, productVariantId: String, id: String, storeId: String? = nil) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/product.variant.image.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "product_variant_id": (wrappedValue: productVariantId.encodeToJSON(), isExplode: true),
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.price.add
     
     - parameter productVariantPriceAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantPriceAdd(productVariantPriceAdd: ProductVariantPriceAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CartValidate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantPriceAddWithRequestBuilder(productVariantPriceAdd: productVariantPriceAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.price.add
     - POST /product.variant.price.add.json
     - Add some prices to the product variant.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productVariantPriceAdd: (body)  
     - returns: RequestBuilder<CartValidate200Response> 
     */
    open class func productVariantPriceAddWithRequestBuilder(productVariantPriceAdd: ProductVariantPriceAdd) -> RequestBuilder<CartValidate200Response> {
        let localVariablePath = "/product.variant.price.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productVariantPriceAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CartValidate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.price.delete
     
     - parameter id: (query) Defines the variant where the price has to be deleted 
     - parameter productId: (query) Product id 
     - parameter groupPrices: (query) Defines variants&#39;s group prices 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantPriceDelete(id: String, productId: String, groupPrices: String, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantPriceDeleteWithRequestBuilder(id: id, productId: productId, groupPrices: groupPrices, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.price.delete
     - DELETE /product.variant.price.delete.json
     - Delete some prices of the product variant.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Defines the variant where the price has to be deleted 
     - parameter productId: (query) Product id 
     - parameter groupPrices: (query) Defines variants&#39;s group prices 
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func productVariantPriceDeleteWithRequestBuilder(id: String, productId: String, groupPrices: String, storeId: String? = nil) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/product.variant.price.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
            "group_prices": (wrappedValue: groupPrices.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.price.update
     
     - parameter productVariantPriceUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantPriceUpdate(productVariantPriceUpdate: ProductVariantPriceUpdate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantPriceUpdateWithRequestBuilder(productVariantPriceUpdate: productVariantPriceUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.price.update
     - PUT /product.variant.price.update.json
     - Update some prices of the product variant.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productVariantPriceUpdate: (body)  
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func productVariantPriceUpdateWithRequestBuilder(productVariantPriceUpdate: ProductVariantPriceUpdate) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/product.variant.price.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productVariantPriceUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.update
     
     - parameter productVariantUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantUpdate(productVariantUpdate: ProductVariantUpdate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantUpdateWithRequestBuilder(productVariantUpdate: productVariantUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.update
     - PUT /product.variant.update.json
     - Update variant.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productVariantUpdate: (body)  
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func productVariantUpdateWithRequestBuilder(productVariantUpdate: ProductVariantUpdate) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/product.variant.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productVariantUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     product.variant.update.batch
     
     - parameter productVariantUpdateBatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productVariantUpdateBatch(productVariantUpdateBatch: ProductVariantUpdateBatch, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CategoryAddBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return productVariantUpdateBatchWithRequestBuilder(productVariantUpdateBatch: productVariantUpdateBatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     product.variant.update.batch
     - POST /product.variant.update.batch.json
     - Update products variants on the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter productVariantUpdateBatch: (body)  
     - returns: RequestBuilder<CategoryAddBatch200Response> 
     */
    open class func productVariantUpdateBatchWithRequestBuilder(productVariantUpdateBatch: ProductVariantUpdateBatch) -> RequestBuilder<CategoryAddBatch200Response> {
        let localVariablePath = "/product.variant.update.batch.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productVariantUpdateBatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAddBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
