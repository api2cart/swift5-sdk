//
// WebhookAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WebhookAPI {

    /**
     webhook.count
     
     - parameter entity: (query) The entity you want to filter webhooks by (e.g. order or product) (optional)
     - parameter action: (query) The action you want to filter webhooks by (e.g. order or product) (optional)
     - parameter active: (query) The webhook status you want to filter webhooks by (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func webhookCount(entity: String? = nil, action: String? = nil, active: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookCount200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return webhookCountWithRequestBuilder(entity: entity, action: action, active: active).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     webhook.count
     - GET /webhook.count.json
     - Count registered webhooks on the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter entity: (query) The entity you want to filter webhooks by (e.g. order or product) (optional)
     - parameter action: (query) The action you want to filter webhooks by (e.g. order or product) (optional)
     - parameter active: (query) The webhook status you want to filter webhooks by (optional)
     - returns: RequestBuilder<WebhookCount200Response> 
     */
    open class func webhookCountWithRequestBuilder(entity: String? = nil, action: String? = nil, active: Bool? = nil) -> RequestBuilder<WebhookCount200Response> {
        let localVariablePath = "/webhook.count.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "entity": (wrappedValue: entity?.encodeToJSON(), isExplode: true),
            "action": (wrappedValue: action?.encodeToJSON(), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookCount200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     webhook.create
     
     - parameter entity: (query) Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) 
     - parameter action: (query) Specify what action (event) will trigger the webhook (e.g add, delete, or update) 
     - parameter callback: (query) Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     - parameter label: (query) The name you give to the webhook (optional)
     - parameter fields: (query) Fields the webhook should send (optional, default to "force_all")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter active: (query) Webhook status (optional, default to true)
     - parameter langId: (query) Language id (optional)
     - parameter storeId: (query) Defines store id where the webhook should be assigned (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func webhookCreate(entity: String, action: String, callback: String? = nil, label: String? = nil, fields: String? = nil, responseFields: String? = nil, active: Bool? = nil, langId: String? = nil, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BasketLiveShippingServiceCreate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return webhookCreateWithRequestBuilder(entity: entity, action: action, callback: callback, label: label, fields: fields, responseFields: responseFields, active: active, langId: langId, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     webhook.create
     - POST /webhook.create.json
     - Create webhook on the store and subscribe to it.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter entity: (query) Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) 
     - parameter action: (query) Specify what action (event) will trigger the webhook (e.g add, delete, or update) 
     - parameter callback: (query) Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     - parameter label: (query) The name you give to the webhook (optional)
     - parameter fields: (query) Fields the webhook should send (optional, default to "force_all")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter active: (query) Webhook status (optional, default to true)
     - parameter langId: (query) Language id (optional)
     - parameter storeId: (query) Defines store id where the webhook should be assigned (optional)
     - returns: RequestBuilder<BasketLiveShippingServiceCreate200Response> 
     */
    open class func webhookCreateWithRequestBuilder(entity: String, action: String, callback: String? = nil, label: String? = nil, fields: String? = nil, responseFields: String? = nil, active: Bool? = nil, langId: String? = nil, storeId: String? = nil) -> RequestBuilder<BasketLiveShippingServiceCreate200Response> {
        let localVariablePath = "/webhook.create.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "entity": (wrappedValue: entity.encodeToJSON(), isExplode: true),
            "action": (wrappedValue: action.encodeToJSON(), isExplode: true),
            "callback": (wrappedValue: callback?.encodeToJSON(), isExplode: true),
            "label": (wrappedValue: label?.encodeToJSON(), isExplode: true),
            "fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BasketLiveShippingServiceCreate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     webhook.delete
     
     - parameter id: (query) Webhook id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func webhookDelete(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return webhookDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     webhook.delete
     - DELETE /webhook.delete.json
     - Delete registered webhook on the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Webhook id 
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func webhookDeleteWithRequestBuilder(id: String) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/webhook.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     webhook.events
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func webhookEvents(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookEvents200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return webhookEventsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     webhook.events
     - GET /webhook.events.json
     - List all Webhooks that are available on this store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - returns: RequestBuilder<WebhookEvents200Response> 
     */
    open class func webhookEventsWithRequestBuilder() -> RequestBuilder<WebhookEvents200Response> {
        let localVariablePath = "/webhook.events.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookEvents200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     webhook.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter entity: (query) The entity you want to filter webhooks by (e.g. order or product) (optional)
     - parameter action: (query) The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     - parameter active: (query) The webhook status you want to filter webhooks by (optional)
     - parameter ids: (query) List of сomma-separated webhook ids (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,entity,action,callback")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func webhookList(start: Int? = nil, count: Int? = nil, entity: String? = nil, action: String? = nil, active: Bool? = nil, ids: String? = nil, params: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return webhookListWithRequestBuilder(start: start, count: count, entity: entity, action: action, active: active, ids: ids, params: params).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     webhook.list
     - GET /webhook.list.json
     - List registered webhook on the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter entity: (query) The entity you want to filter webhooks by (e.g. order or product) (optional)
     - parameter action: (query) The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     - parameter active: (query) The webhook status you want to filter webhooks by (optional)
     - parameter ids: (query) List of сomma-separated webhook ids (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,entity,action,callback")
     - returns: RequestBuilder<WebhookList200Response> 
     */
    open class func webhookListWithRequestBuilder(start: Int? = nil, count: Int? = nil, entity: String? = nil, action: String? = nil, active: Bool? = nil, ids: String? = nil, params: String? = nil) -> RequestBuilder<WebhookList200Response> {
        let localVariablePath = "/webhook.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "entity": (wrappedValue: entity?.encodeToJSON(), isExplode: true),
            "action": (wrappedValue: action?.encodeToJSON(), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     webhook.update
     
     - parameter id: (query) Webhook id 
     - parameter callback: (query) Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     - parameter label: (query) The name you give to the webhook (optional)
     - parameter fields: (query) Fields the webhook should send (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter active: (query) Webhook status (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func webhookUpdate(id: String, callback: String? = nil, label: String? = nil, fields: String? = nil, responseFields: String? = nil, active: Bool? = nil, langId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductImageUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return webhookUpdateWithRequestBuilder(id: id, callback: callback, label: label, fields: fields, responseFields: responseFields, active: active, langId: langId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     webhook.update
     - PUT /webhook.update.json
     - Update Webhooks parameters.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Webhook id 
     - parameter callback: (query) Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     - parameter label: (query) The name you give to the webhook (optional)
     - parameter fields: (query) Fields the webhook should send (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter active: (query) Webhook status (optional)
     - parameter langId: (query) Language id (optional)
     - returns: RequestBuilder<ProductImageUpdate200Response> 
     */
    open class func webhookUpdateWithRequestBuilder(id: String, callback: String? = nil, label: String? = nil, fields: String? = nil, responseFields: String? = nil, active: Bool? = nil, langId: String? = nil) -> RequestBuilder<ProductImageUpdate200Response> {
        let localVariablePath = "/webhook.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "callback": (wrappedValue: callback?.encodeToJSON(), isExplode: true),
            "label": (wrappedValue: label?.encodeToJSON(), isExplode: true),
            "fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductImageUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
