//
// OrderCalculate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderCalculate: Codable, JSONEncodable, Hashable {

    public static let couponsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    /** Defines the customer specified by email for whom the order needs to be calculated */
    public var customerEmail: String
    /** Currency Id */
    public var currencyId: String?
    /** Store Id */
    public var storeId: String?
    /** Coupons that will be applied to order. If the order isn't eligible for any given discount code or there is no discount with such a code it will be skipped during calculation */
    public var coupons: [String]?
    /** Specifies shipping first name */
    public var shippFirstName: String
    /** Specifies shipping last name */
    public var shippLastName: String
    /** Specifies first shipping address */
    public var shippAddress1: String
    /** Specifies second address line of a shipping street address */
    public var shippAddress2: String?
    /** Specifies shipping city */
    public var shippCity: String
    /** Specifies shipping postcode */
    public var shippPostcode: String
    /** Specifies shipping state code */
    public var shippState: String?
    /** Specifies shipping country code */
    public var shippCountry: String
    /** Specifies shipping company */
    public var shippCompany: String?
    /** Specifies shipping phone */
    public var shippPhone: String?
    /** Specifies billing first name */
    public var billFirstName: String?
    /** Specifies billing last name */
    public var billLastName: String?
    /** Specifies first billing address */
    public var billAddress1: String?
    /** Specifies second billing address */
    public var billAddress2: String?
    /** Specifies billing city */
    public var billCity: String?
    /** Specifies billing postcode */
    public var billPostcode: String?
    /** Specifies billing state code */
    public var billState: String?
    /** Specifies billing country code */
    public var billCountry: String?
    /** Specifies billing company */
    public var billCompany: String?
    /** Specifies billing phone */
    public var billPhone: String?
    /** Set this parameter in order to choose which entity fields you want to retrieve */
    public var responseFields: String?
    public var orderItem: [OrderCalculateOrderItemInner]

    public init(customerEmail: String, currencyId: String? = nil, storeId: String? = nil, coupons: [String]? = nil, shippFirstName: String, shippLastName: String, shippAddress1: String, shippAddress2: String? = nil, shippCity: String, shippPostcode: String, shippState: String? = nil, shippCountry: String, shippCompany: String? = nil, shippPhone: String? = nil, billFirstName: String? = nil, billLastName: String? = nil, billAddress1: String? = nil, billAddress2: String? = nil, billCity: String? = nil, billPostcode: String? = nil, billState: String? = nil, billCountry: String? = nil, billCompany: String? = nil, billPhone: String? = nil, responseFields: String? = nil, orderItem: [OrderCalculateOrderItemInner]) {
        self.customerEmail = customerEmail
        self.currencyId = currencyId
        self.storeId = storeId
        self.coupons = coupons
        self.shippFirstName = shippFirstName
        self.shippLastName = shippLastName
        self.shippAddress1 = shippAddress1
        self.shippAddress2 = shippAddress2
        self.shippCity = shippCity
        self.shippPostcode = shippPostcode
        self.shippState = shippState
        self.shippCountry = shippCountry
        self.shippCompany = shippCompany
        self.shippPhone = shippPhone
        self.billFirstName = billFirstName
        self.billLastName = billLastName
        self.billAddress1 = billAddress1
        self.billAddress2 = billAddress2
        self.billCity = billCity
        self.billPostcode = billPostcode
        self.billState = billState
        self.billCountry = billCountry
        self.billCompany = billCompany
        self.billPhone = billPhone
        self.responseFields = responseFields
        self.orderItem = orderItem
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case customerEmail = "customer_email"
        case currencyId = "currency_id"
        case storeId = "store_id"
        case coupons
        case shippFirstName = "shipp_first_name"
        case shippLastName = "shipp_last_name"
        case shippAddress1 = "shipp_address_1"
        case shippAddress2 = "shipp_address_2"
        case shippCity = "shipp_city"
        case shippPostcode = "shipp_postcode"
        case shippState = "shipp_state"
        case shippCountry = "shipp_country"
        case shippCompany = "shipp_company"
        case shippPhone = "shipp_phone"
        case billFirstName = "bill_first_name"
        case billLastName = "bill_last_name"
        case billAddress1 = "bill_address_1"
        case billAddress2 = "bill_address_2"
        case billCity = "bill_city"
        case billPostcode = "bill_postcode"
        case billState = "bill_state"
        case billCountry = "bill_country"
        case billCompany = "bill_company"
        case billPhone = "bill_phone"
        case responseFields = "response_fields"
        case orderItem = "order_item"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(customerEmail, forKey: .customerEmail)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(coupons, forKey: .coupons)
        try container.encode(shippFirstName, forKey: .shippFirstName)
        try container.encode(shippLastName, forKey: .shippLastName)
        try container.encode(shippAddress1, forKey: .shippAddress1)
        try container.encodeIfPresent(shippAddress2, forKey: .shippAddress2)
        try container.encode(shippCity, forKey: .shippCity)
        try container.encode(shippPostcode, forKey: .shippPostcode)
        try container.encodeIfPresent(shippState, forKey: .shippState)
        try container.encode(shippCountry, forKey: .shippCountry)
        try container.encodeIfPresent(shippCompany, forKey: .shippCompany)
        try container.encodeIfPresent(shippPhone, forKey: .shippPhone)
        try container.encodeIfPresent(billFirstName, forKey: .billFirstName)
        try container.encodeIfPresent(billLastName, forKey: .billLastName)
        try container.encodeIfPresent(billAddress1, forKey: .billAddress1)
        try container.encodeIfPresent(billAddress2, forKey: .billAddress2)
        try container.encodeIfPresent(billCity, forKey: .billCity)
        try container.encodeIfPresent(billPostcode, forKey: .billPostcode)
        try container.encodeIfPresent(billState, forKey: .billState)
        try container.encodeIfPresent(billCountry, forKey: .billCountry)
        try container.encodeIfPresent(billCompany, forKey: .billCompany)
        try container.encodeIfPresent(billPhone, forKey: .billPhone)
        try container.encodeIfPresent(responseFields, forKey: .responseFields)
        try container.encode(orderItem, forKey: .orderItem)
    }
}

