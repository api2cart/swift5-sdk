//
// ProductUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductUpdate: Codable, JSONEncodable, Hashable {

    /** Defines product id that has to be updated */
    public var id: String?
    /** Defines product model that has to be updated */
    public var model: String?
    /** Defines new product's sku */
    public var sku: String?
    /** Defines product's name that has to be updated */
    public var name: String?
    /** Defines new product's description */
    public var description: String?
    /** Defines short description */
    public var shortDescription: String?
    /** Defines new product's price */
    public var price: Double?
    /** Defines product's old price */
    public var oldPrice: Double?
    /** Defines new product's special price */
    public var specialPrice: Double?
    /** Defines the date of special price creation */
    public var spriceCreate: String?
    /** Defines the term of special price offer duration */
    public var spriceExpire: String?
    /** Defines new product's cost price */
    public var costPrice: Double?
    /** Specifies product's fixed cost shipping price */
    public var fixedCostShippingPrice: Double?
    /** Defines new product's retail price */
    public var retailPrice: Double?
    /** Defines product's tier prices */
    public var tierPrices: [ProductAddTierPricesInner]?
    /** Defines reserve price value */
    public var reservePrice: Double?
    /** Defines buy it now value */
    public var buyitnowPrice: Double?
    /** Specifies whether a tax is charged */
    public var taxable: Bool? = true
    /** Defines tax classes where entity has to be added */
    public var taxClassId: String?
    /** Defines product's type */
    public var type: String?
    /** Defines product's status */
    public var status: String?
    /** The human-readable label for the condition (e.g., \"New\"). */
    public var condition: String?
    /** Set visibility status */
    public var visible: String?
    /** Set stock status */
    public var inStock: Bool?
    /** Defines category's visibility status */
    public var avail: Bool? = true
    /** Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time. */
    public var availFrom: String?
    /** A categorization for the product */
    public var productClass: String?
    /** Specifies the set of visible/invisible products for users */
    public var availableForView: Bool?
    /** Assign product to the stores that is specified by comma-separated stores' id */
    public var storesIds: String?
    /** Defines store id where the product should be found */
    public var storeId: String?
    /** Language id */
    public var langId: String?
    /** Defines new product's quantity */
    public var quantity: Double?
    /** This parameter allows to reserve/unreserve product quantity. */
    public var reserveQuantity: Double?
    /** Defines inventory tracking for product */
    public var manageStock: Bool?
    /** Set backorder status */
    public var backorderStatus: String?
    /** Defines the incremental changes in product quantity */
    public var increaseQuantity: Double?
    /** Defines the decrement changes in product quantity */
    public var reduceQuantity: Double?
    /** Specify the quantity threshold below which the product is considered low in stock */
    public var lowStockThreshold: Double?
    /** This parameter is used for selecting a warehouse where you need to set/modify a product quantity. */
    public var warehouseId: String?
    /** Weight */
    public var weight: Double?
    /** Weight Unit */
    public var weightUnit: String?
    /** Defines product's height */
    public var height: Double?
    /** Defines product's length */
    public var length: Double?
    /** Defines product's width */
    public var width: Double?
    /** Weight Unit */
    public var dimensionsUnit: String?
    /** Defines whether the product is virtual */
    public var isVirtual: Bool? = false
    /** Specifies product free shipping flag that has to be updated */
    public var isFreeShipping: Bool?
    /** Global Trade Item Number. An GTIN is an identifier for trade items. */
    public var gtin: String?
    /** Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. */
    public var upc: String?
    /** Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. */
    public var mpn: String?
    /** European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. */
    public var ean: String?
    /** International Standard Book Number. An ISBN is a unique identifier for books. */
    public var isbn: String?
    /** A barcode is a unique code composed of numbers used as a product identifier. */
    public var barcode: String?
    /** Defines product's manufacturer */
    public var manufacturer: String?
    /** Defines product's manufacturer by manufacturer_id */
    public var manufacturerId: String?
    /** Defines product add that is specified by comma-separated categories id */
    public var categoriesIds: String?
    /** Defines product related products ids that has to be updated */
    public var relatedProductsIds: String?
    /** Defines product up-sell products ids that has to be updated */
    public var upSellProductsIds: String?
    /** Defines product cross-sells products ids that has to be updated */
    public var crossSellProductsIds: String?
    /** Defines unique meta title for each entity */
    public var metaTitle: String?
    /** Defines unique meta keywords for each entity */
    public var metaKeywords: String?
    /** Defines unique meta description of a entity */
    public var metaDescription: String?
    /** Defines unique URL for SEO */
    public var seoUrl: String?
    /** Defines unique search keywords */
    public var searchKeywords: String?
    /** Product tags */
    public var tags: String?
    /** The delivery promise that applies to offer */
    public var deliveryCode: String?
    public var packageDetails: ProductAddPackageDetails?
    /** The country where the inventory item was made */
    public var countryOfOrigin: String?
    /** Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes */
    public var harmonizedSystemCode: String?
    /** The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \"cart.info\" API method response, in the field shipping_zones[]->id. */
    public var shippingTemplateId: Int? = 0
    /** An enumerated string for the era in which the maker made the product. */
    public var whenMade: String? = "made_to_order"
    /** If true, it indicates the product as a supply, otherwise it indicates that it is a finished product. */
    public var isSupply: Bool? = true
    /** Defines whether the product is downloadable */
    public var downloadable: Bool? = false
    /** A list of material strings for materials used in the product. */
    public var materials: [String]?
    /** When true, automatically renews a listing upon its expiration. */
    public var autoRenew: Bool? = false
    /** Set whether the product on sale */
    public var onSale: Bool? = false
    /** Defines product production partner ids that has to be updated */
    public var productionPartnerIds: String?
    public var manufacturerInfo: ProductAddManufacturerInfo?
    /** Report request id */
    public var reportRequestId: String?
    /** Disable report cache for current request */
    public var disableReportCache: Bool? = false
    /** Is reindex required */
    public var reindex: Bool? = true
    /** Is cache clear required */
    public var clearCache: Bool? = true
    /** Disable or enable check process status. Please note that the response will be slower due to additional requests to the store. */
    public var checkProcessStatus: Bool? = false
    /** An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         The list of possible specifications can be obtained using the category.info method (additional_fields->product_specifics).         <b>The structure of the parameter is different for specific platforms.</b> */
    public var specifics: [ProductAddSpecificsInner]?
    /** Add Shop Section Id */
    public var shopSectionId: Int?
    public var personalizationDetails: ProductAddPersonalizationDetails?

    public init(id: String? = nil, model: String? = nil, sku: String? = nil, name: String? = nil, description: String? = nil, shortDescription: String? = nil, price: Double? = nil, oldPrice: Double? = nil, specialPrice: Double? = nil, spriceCreate: String? = nil, spriceExpire: String? = nil, costPrice: Double? = nil, fixedCostShippingPrice: Double? = nil, retailPrice: Double? = nil, tierPrices: [ProductAddTierPricesInner]? = nil, reservePrice: Double? = nil, buyitnowPrice: Double? = nil, taxable: Bool? = true, taxClassId: String? = nil, type: String? = nil, status: String? = nil, condition: String? = nil, visible: String? = nil, inStock: Bool? = nil, avail: Bool? = true, availFrom: String? = nil, productClass: String? = nil, availableForView: Bool? = nil, storesIds: String? = nil, storeId: String? = nil, langId: String? = nil, quantity: Double? = nil, reserveQuantity: Double? = nil, manageStock: Bool? = nil, backorderStatus: String? = nil, increaseQuantity: Double? = nil, reduceQuantity: Double? = nil, lowStockThreshold: Double? = nil, warehouseId: String? = nil, weight: Double? = nil, weightUnit: String? = nil, height: Double? = nil, length: Double? = nil, width: Double? = nil, dimensionsUnit: String? = nil, isVirtual: Bool? = false, isFreeShipping: Bool? = nil, gtin: String? = nil, upc: String? = nil, mpn: String? = nil, ean: String? = nil, isbn: String? = nil, barcode: String? = nil, manufacturer: String? = nil, manufacturerId: String? = nil, categoriesIds: String? = nil, relatedProductsIds: String? = nil, upSellProductsIds: String? = nil, crossSellProductsIds: String? = nil, metaTitle: String? = nil, metaKeywords: String? = nil, metaDescription: String? = nil, seoUrl: String? = nil, searchKeywords: String? = nil, tags: String? = nil, deliveryCode: String? = nil, packageDetails: ProductAddPackageDetails? = nil, countryOfOrigin: String? = nil, harmonizedSystemCode: String? = nil, shippingTemplateId: Int? = 0, whenMade: String? = "made_to_order", isSupply: Bool? = true, downloadable: Bool? = false, materials: [String]? = nil, autoRenew: Bool? = false, onSale: Bool? = false, productionPartnerIds: String? = nil, manufacturerInfo: ProductAddManufacturerInfo? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = false, reindex: Bool? = true, clearCache: Bool? = true, checkProcessStatus: Bool? = false, specifics: [ProductAddSpecificsInner]? = nil, shopSectionId: Int? = nil, personalizationDetails: ProductAddPersonalizationDetails? = nil) {
        self.id = id
        self.model = model
        self.sku = sku
        self.name = name
        self.description = description
        self.shortDescription = shortDescription
        self.price = price
        self.oldPrice = oldPrice
        self.specialPrice = specialPrice
        self.spriceCreate = spriceCreate
        self.spriceExpire = spriceExpire
        self.costPrice = costPrice
        self.fixedCostShippingPrice = fixedCostShippingPrice
        self.retailPrice = retailPrice
        self.tierPrices = tierPrices
        self.reservePrice = reservePrice
        self.buyitnowPrice = buyitnowPrice
        self.taxable = taxable
        self.taxClassId = taxClassId
        self.type = type
        self.status = status
        self.condition = condition
        self.visible = visible
        self.inStock = inStock
        self.avail = avail
        self.availFrom = availFrom
        self.productClass = productClass
        self.availableForView = availableForView
        self.storesIds = storesIds
        self.storeId = storeId
        self.langId = langId
        self.quantity = quantity
        self.reserveQuantity = reserveQuantity
        self.manageStock = manageStock
        self.backorderStatus = backorderStatus
        self.increaseQuantity = increaseQuantity
        self.reduceQuantity = reduceQuantity
        self.lowStockThreshold = lowStockThreshold
        self.warehouseId = warehouseId
        self.weight = weight
        self.weightUnit = weightUnit
        self.height = height
        self.length = length
        self.width = width
        self.dimensionsUnit = dimensionsUnit
        self.isVirtual = isVirtual
        self.isFreeShipping = isFreeShipping
        self.gtin = gtin
        self.upc = upc
        self.mpn = mpn
        self.ean = ean
        self.isbn = isbn
        self.barcode = barcode
        self.manufacturer = manufacturer
        self.manufacturerId = manufacturerId
        self.categoriesIds = categoriesIds
        self.relatedProductsIds = relatedProductsIds
        self.upSellProductsIds = upSellProductsIds
        self.crossSellProductsIds = crossSellProductsIds
        self.metaTitle = metaTitle
        self.metaKeywords = metaKeywords
        self.metaDescription = metaDescription
        self.seoUrl = seoUrl
        self.searchKeywords = searchKeywords
        self.tags = tags
        self.deliveryCode = deliveryCode
        self.packageDetails = packageDetails
        self.countryOfOrigin = countryOfOrigin
        self.harmonizedSystemCode = harmonizedSystemCode
        self.shippingTemplateId = shippingTemplateId
        self.whenMade = whenMade
        self.isSupply = isSupply
        self.downloadable = downloadable
        self.materials = materials
        self.autoRenew = autoRenew
        self.onSale = onSale
        self.productionPartnerIds = productionPartnerIds
        self.manufacturerInfo = manufacturerInfo
        self.reportRequestId = reportRequestId
        self.disableReportCache = disableReportCache
        self.reindex = reindex
        self.clearCache = clearCache
        self.checkProcessStatus = checkProcessStatus
        self.specifics = specifics
        self.shopSectionId = shopSectionId
        self.personalizationDetails = personalizationDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case model
        case sku
        case name
        case description
        case shortDescription = "short_description"
        case price
        case oldPrice = "old_price"
        case specialPrice = "special_price"
        case spriceCreate = "sprice_create"
        case spriceExpire = "sprice_expire"
        case costPrice = "cost_price"
        case fixedCostShippingPrice = "fixed_cost_shipping_price"
        case retailPrice = "retail_price"
        case tierPrices = "tier_prices"
        case reservePrice = "reserve_price"
        case buyitnowPrice = "buyitnow_price"
        case taxable
        case taxClassId = "tax_class_id"
        case type
        case status
        case condition
        case visible
        case inStock = "in_stock"
        case avail
        case availFrom = "avail_from"
        case productClass = "product_class"
        case availableForView = "available_for_view"
        case storesIds = "stores_ids"
        case storeId = "store_id"
        case langId = "lang_id"
        case quantity
        case reserveQuantity = "reserve_quantity"
        case manageStock = "manage_stock"
        case backorderStatus = "backorder_status"
        case increaseQuantity = "increase_quantity"
        case reduceQuantity = "reduce_quantity"
        case lowStockThreshold = "low_stock_threshold"
        case warehouseId = "warehouse_id"
        case weight
        case weightUnit = "weight_unit"
        case height
        case length
        case width
        case dimensionsUnit = "dimensions_unit"
        case isVirtual = "is_virtual"
        case isFreeShipping = "is_free_shipping"
        case gtin
        case upc
        case mpn
        case ean
        case isbn
        case barcode
        case manufacturer
        case manufacturerId = "manufacturer_id"
        case categoriesIds = "categories_ids"
        case relatedProductsIds = "related_products_ids"
        case upSellProductsIds = "up_sell_products_ids"
        case crossSellProductsIds = "cross_sell_products_ids"
        case metaTitle = "meta_title"
        case metaKeywords = "meta_keywords"
        case metaDescription = "meta_description"
        case seoUrl = "seo_url"
        case searchKeywords = "search_keywords"
        case tags
        case deliveryCode = "delivery_code"
        case packageDetails = "package_details"
        case countryOfOrigin = "country_of_origin"
        case harmonizedSystemCode = "harmonized_system_code"
        case shippingTemplateId = "shipping_template_id"
        case whenMade = "when_made"
        case isSupply = "is_supply"
        case downloadable
        case materials
        case autoRenew = "auto_renew"
        case onSale = "on_sale"
        case productionPartnerIds = "production_partner_ids"
        case manufacturerInfo = "manufacturer_info"
        case reportRequestId = "report_request_id"
        case disableReportCache = "disable_report_cache"
        case reindex
        case clearCache = "clear_cache"
        case checkProcessStatus = "check_process_status"
        case specifics
        case shopSectionId = "shop_section_id"
        case personalizationDetails = "personalization_details"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(oldPrice, forKey: .oldPrice)
        try container.encodeIfPresent(specialPrice, forKey: .specialPrice)
        try container.encodeIfPresent(spriceCreate, forKey: .spriceCreate)
        try container.encodeIfPresent(spriceExpire, forKey: .spriceExpire)
        try container.encodeIfPresent(costPrice, forKey: .costPrice)
        try container.encodeIfPresent(fixedCostShippingPrice, forKey: .fixedCostShippingPrice)
        try container.encodeIfPresent(retailPrice, forKey: .retailPrice)
        try container.encodeIfPresent(tierPrices, forKey: .tierPrices)
        try container.encodeIfPresent(reservePrice, forKey: .reservePrice)
        try container.encodeIfPresent(buyitnowPrice, forKey: .buyitnowPrice)
        try container.encodeIfPresent(taxable, forKey: .taxable)
        try container.encodeIfPresent(taxClassId, forKey: .taxClassId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(condition, forKey: .condition)
        try container.encodeIfPresent(visible, forKey: .visible)
        try container.encodeIfPresent(inStock, forKey: .inStock)
        try container.encodeIfPresent(avail, forKey: .avail)
        try container.encodeIfPresent(availFrom, forKey: .availFrom)
        try container.encodeIfPresent(productClass, forKey: .productClass)
        try container.encodeIfPresent(availableForView, forKey: .availableForView)
        try container.encodeIfPresent(storesIds, forKey: .storesIds)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(langId, forKey: .langId)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(reserveQuantity, forKey: .reserveQuantity)
        try container.encodeIfPresent(manageStock, forKey: .manageStock)
        try container.encodeIfPresent(backorderStatus, forKey: .backorderStatus)
        try container.encodeIfPresent(increaseQuantity, forKey: .increaseQuantity)
        try container.encodeIfPresent(reduceQuantity, forKey: .reduceQuantity)
        try container.encodeIfPresent(lowStockThreshold, forKey: .lowStockThreshold)
        try container.encodeIfPresent(warehouseId, forKey: .warehouseId)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(weightUnit, forKey: .weightUnit)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(dimensionsUnit, forKey: .dimensionsUnit)
        try container.encodeIfPresent(isVirtual, forKey: .isVirtual)
        try container.encodeIfPresent(isFreeShipping, forKey: .isFreeShipping)
        try container.encodeIfPresent(gtin, forKey: .gtin)
        try container.encodeIfPresent(upc, forKey: .upc)
        try container.encodeIfPresent(mpn, forKey: .mpn)
        try container.encodeIfPresent(ean, forKey: .ean)
        try container.encodeIfPresent(isbn, forKey: .isbn)
        try container.encodeIfPresent(barcode, forKey: .barcode)
        try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try container.encodeIfPresent(manufacturerId, forKey: .manufacturerId)
        try container.encodeIfPresent(categoriesIds, forKey: .categoriesIds)
        try container.encodeIfPresent(relatedProductsIds, forKey: .relatedProductsIds)
        try container.encodeIfPresent(upSellProductsIds, forKey: .upSellProductsIds)
        try container.encodeIfPresent(crossSellProductsIds, forKey: .crossSellProductsIds)
        try container.encodeIfPresent(metaTitle, forKey: .metaTitle)
        try container.encodeIfPresent(metaKeywords, forKey: .metaKeywords)
        try container.encodeIfPresent(metaDescription, forKey: .metaDescription)
        try container.encodeIfPresent(seoUrl, forKey: .seoUrl)
        try container.encodeIfPresent(searchKeywords, forKey: .searchKeywords)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(deliveryCode, forKey: .deliveryCode)
        try container.encodeIfPresent(packageDetails, forKey: .packageDetails)
        try container.encodeIfPresent(countryOfOrigin, forKey: .countryOfOrigin)
        try container.encodeIfPresent(harmonizedSystemCode, forKey: .harmonizedSystemCode)
        try container.encodeIfPresent(shippingTemplateId, forKey: .shippingTemplateId)
        try container.encodeIfPresent(whenMade, forKey: .whenMade)
        try container.encodeIfPresent(isSupply, forKey: .isSupply)
        try container.encodeIfPresent(downloadable, forKey: .downloadable)
        try container.encodeIfPresent(materials, forKey: .materials)
        try container.encodeIfPresent(autoRenew, forKey: .autoRenew)
        try container.encodeIfPresent(onSale, forKey: .onSale)
        try container.encodeIfPresent(productionPartnerIds, forKey: .productionPartnerIds)
        try container.encodeIfPresent(manufacturerInfo, forKey: .manufacturerInfo)
        try container.encodeIfPresent(reportRequestId, forKey: .reportRequestId)
        try container.encodeIfPresent(disableReportCache, forKey: .disableReportCache)
        try container.encodeIfPresent(reindex, forKey: .reindex)
        try container.encodeIfPresent(clearCache, forKey: .clearCache)
        try container.encodeIfPresent(checkProcessStatus, forKey: .checkProcessStatus)
        try container.encodeIfPresent(specifics, forKey: .specifics)
        try container.encodeIfPresent(shopSectionId, forKey: .shopSectionId)
        try container.encodeIfPresent(personalizationDetails, forKey: .personalizationDetails)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ProductUpdate: Identifiable {}
