//
// AccountCartAdd.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AccountCartAdd: Codable, JSONEncodable, Hashable {

    public enum CartId: String, Codable, CaseIterable {
        case _3dCart = "3DCart"
        case _3dCartApi = "3DCartApi"
        case aceShop = "AceShop"
        case amazonSP = "AmazonSP"
        case aspDotNetStorefront = "AspDotNetStorefront"
        case bigCartel = "BigCartel"
        case bricklink = "Bricklink"
        case bigcommerceApi = "BigcommerceApi"
        case bol = "Bol"
        case commerceHQ = "CommerceHQ"
        case creloaded = "Creloaded"
        case cscart = "Cscart"
        case cubecart = "Cubecart"
        case demandware = "Demandware"
        case ebay = "EBay"
        case ecwid = "Ecwid"
        case etsyAPIv3 = "EtsyAPIv3"
        case facebook = "Facebook"
        case flipkart = "Flipkart"
        case gambio = "Gambio"
        case hybris = "Hybris"
        case jooCart = "JooCart"
        case lazada = "Lazada"
        case lightSpeed = "LightSpeed"
        case magento1212 = "Magento1212"
        case magento2Api = "Magento2Api"
        case mercadoLibre = "MercadoLibre"
        case mijoShop = "MijoShop"
        case miva = "Miva"
        case neto = "Neto"
        case opencart14 = "Opencart14"
        case oscmax2 = "Oscmax2"
        case oscommerce22ms2 = "Oscommerce22ms2"
        case otto = "Otto"
        case oxid = "Oxid"
        case pinnacle = "Pinnacle"
        case prestashop = "Prestashop"
        case prestashopApi = "PrestashopApi"
        case sspremium = "SSPremium"
        case salla = "Salla"
        case shopify = "Shopify"
        case shopee = "Shopee"
        case shoplazza = "Shoplazza"
        case shopline = "Shopline"
        case shopware = "Shopware"
        case shopwareApi = "ShopwareApi"
        case square = "Square"
        case squarespace = "Squarespace"
        case temu = "Temu"
        case tiendanube = "Tiendanube"
        case tikTokShop = "TikTokShop"
        case tomatocart = "Tomatocart"
        case ubercart = "Ubercart"
        case unas = "Unas"
        case virtuemart = "Virtuemart"
        case volusion = "Volusion"
        case wpecommerce = "WPecommerce"
        case walmart = "Walmart"
        case webAsyst = "WebAsyst"
        case wix = "Wix"
        case woocommerce = "Woocommerce"
        case woocommerceApi = "WoocommerceApi"
        case xcart = "Xcart"
        case xtcommerce = "Xtcommerce"
        case xtcommerceVeyton = "XtcommerceVeyton"
        case zencart137 = "Zencart137"
        case zid = "Zid"
        case zoey = "Zoey"
        case zoho = "Zoho"
    }
    public static let hybrisWebsitesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    /** Storeâ€™s identifier which you can get from cart_list method */
    public var cartId: CartId
    /** A web address of a store that you would like to connect to API2Cart */
    public var storeUrl: String?
    /** This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) */
    public var bridgeUrl: String?
    /** Absolute path to the store root directory (used with \"bridge_url\" parameter) */
    public var storeRoot: String?
    /** Set this parameter if bridge is already uploaded to store */
    public var storeKey: String?
    /** Specify if api2cart should validate cart version */
    public var validateVersion: Bool? = false
    /** Enables or disables cart's verification */
    public var verify: Bool? = true
    /** DB tables prefix */
    public var dbTablesPrefix: String?
    /** This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store's firewall may block specific values. */
    public var userAgent: String?
    /** FTP connection host */
    public var ftpHost: String?
    /** FTP User */
    public var ftpUser: String?
    /** FTP Password */
    public var ftpPassword: String?
    /** FTP Port */
    public var ftpPort: Int?
    /** FTP Store dir */
    public var ftpStoreDir: String?
    /** 3DCart Private Key */
    public var _3dcartPrivateKey: String?
    /** 3DCart Token */
    public var _3dcartAccessToken: String?
    /** 3DCart API Key */
    public var _3dcartapiApiKey: String?
    /** Amazon SP API app client id */
    public var amazonSpClientId: String?
    /** Amazon SP API app client secret */
    public var amazonSpClientSecret: String?
    /** Amazon SP API OAuth refresh token */
    public var amazonSpRefreshToken: String?
    /** Amazon AWS Region */
    public var amazonSpAwsRegion: String?
    /** Amazon SP API environment */
    public var amazonSpApiEnvironment: String? = "production"
    /** Amazon Seller ID (Merchant token) */
    public var amazonSellerId: String?
    /** It's a AspDotNetStorefront account for which API is available */
    public var aspdotnetstorefrontApiUser: String?
    /** AspDotNetStorefront API Password */
    public var aspdotnetstorefrontApiPass: String?
    /** It's a BigCommerce account for which API is enabled */
    public var bigcommerceapiAdminAccount: String?
    /** BigCommerce API URL */
    public var bigcommerceapiApiPath: String?
    /** Bigcommerce API Key */
    public var bigcommerceapiApiKey: String?
    /** Client ID of the requesting app */
    public var bigcommerceapiClientId: String?
    /** Access token authorizing the app to access resources on behalf of a user */
    public var bigcommerceapiAccessToken: String?
    /** API Path section unique to the store */
    public var bigcommerceapiContext: String?
    /** Bol API Key */
    public var bolApiKey: String?
    /** Bol API Secret */
    public var bolApiSecret: String?
    /** Bol Retailer ID */
    public var bolRetailerId: Int?
    /** Subdomain of store */
    public var bigcartelUserName: String?
    /** BigCartel account password */
    public var bigcartelPassword: String?
    /** Bricklink Consumer Key */
    public var bricklinkConsumerKey: String?
    /** Bricklink Consumer Secret */
    public var bricklinkConsumerSecret: String?
    /** Bricklink Access Token */
    public var bricklinkToken: String?
    /** Bricklink Access Token Secret */
    public var bricklinkTokenSecret: String?
    /** Demandware client id */
    public var demandwareClientId: String?
    /** Demandware api password */
    public var demandwareApiPassword: String?
    /** Demandware user name */
    public var demandwareUserName: String?
    /** Demandware user password */
    public var demandwareUserPassword: String?
    /** Application ID (AppID). */
    public var ebayClientId: String?
    /** Shared Secret from eBay application */
    public var ebayClientSecret: String?
    /** The RuName value that eBay assigns to your application. */
    public var ebayRuname: String?
    /** Used to authenticate API requests. */
    public var ebayAccessToken: String?
    /** Used to renew the access token. */
    public var ebayRefreshToken: String?
    /** eBay environment */
    public var ebayEnvironment: String? = "production"
    /** eBay global ID */
    public var ebaySiteId: Int? = 0
    /** Walmart client ID. For the region 'ca' use Consumer ID */
    public var walmartClientId: String?
    /** Walmart client secret. For the region 'ca' use Private Key */
    public var walmartClientSecret: String?
    /** Walmart environment */
    public var walmartEnvironment: String? = "production"
    /** Walmart WM_CONSUMER.CHANNEL.TYPE header */
    public var walmartChannelType: String?
    /** Walmart region */
    public var walmartRegion: String? = "us"
    /** Access token authorizing the app to access resources on behalf of a user */
    public var ecwidAcessToken: String?
    /** Store Id */
    public var ecwidStoreId: String?
    /** Lazada App ID */
    public var lazadaAppId: String?
    /** Lazada App Secret */
    public var lazadaAppSecret: String?
    /** Lazada Refresh Token */
    public var lazadaRefreshToken: String?
    /** Lazada API endpoint Region */
    public var lazadaRegion: String?
    /** LightSpeed api key */
    public var lightspeedApiKey: String?
    /** LightSpeed api secret */
    public var lightspeedApiSecret: String?
    /** Etsy keystring */
    public var etsyKeystring: String?
    /** Etsy shared secret */
    public var etsySharedSecret: String?
    /** Access token authorizing the app to access resources on behalf of a user */
    public var etsyAccessToken: String?
    /** Secret token authorizing the app to access resources on behalf of a user */
    public var etsyTokenSecret: String?
    /** Etsy Client Id */
    public var etsyClientId: String?
    /** Etsy Refresh token */
    public var etsyRefreshToken: String?
    /** Facebook App ID */
    public var facebookAppId: String?
    /** Facebook App Secret */
    public var facebookAppSecret: String?
    /** Facebook Access Token */
    public var facebookAccessToken: String?
    /** Facebook Business ID */
    public var facebookBusinessId: String?
    /** Neto API Key */
    public var netoApiKey: String?
    /** Neto User Name */
    public var netoApiUsername: String?
    /** Shopline APP Key */
    public var shoplineAccessToken: String?
    /** Shopline APP Key */
    public var shoplineAppKey: String?
    /** Shopline App Secret */
    public var shoplineAppSecret: String?
    /** Shopline Shared Secret */
    public var shoplineSharedSecret: String?
    /** Access token authorizing the app to access resources on behalf of a user */
    public var shopifyAccessToken: String?
    /** Shopify API Key */
    public var shopifyApiKey: String?
    /** Shopify API Password */
    public var shopifyApiPassword: String?
    /** Shared secret */
    public var shopifySharedSecret: String?
    /** Shopee Partner ID */
    public var shopeePartnerId: String?
    /** Shopee Partner Key */
    public var shopeePartnerKey: String?
    /** Shopee SHOP ID */
    public var shopeeShopId: String?
    /** Shopee Refresh Token */
    public var shopeeRefreshToken: String?
    /** Shopee API endpoint Region. Use for Chinese Mainland or Brazil. */
    public var shopeeRegion: String?
    /** Shopee Environment */
    public var shopeeEnvironment: String? = "production"
    /** Access token authorizing the app to access resources on behalf of a user */
    public var shoplazzaAccessToken: String?
    /** Shared secret */
    public var shoplazzaSharedSecret: String?
    /** Shopware access key */
    public var shopwareAccessKey: String?
    /** UNAS API Key */
    public var unasApiKey: String?
    /** Shopware api key */
    public var shopwareApiKey: String?
    /** Shopware client secret access key */
    public var shopwareApiSecret: String?
    /** Miva access token */
    public var mivaAccessToken: String?
    /** Miva signature */
    public var mivaSignature: String?
    /** Tiendanube User ID */
    public var tiendanubeUserId: Int?
    /** Tiendanube Access Token */
    public var tiendanubeAccessToken: String?
    /** Tiendanube Client Secret */
    public var tiendanubeClientSecret: String?
    /** It's a Volusion account for which API is enabled */
    public var volusionLogin: String?
    /** Volusion API Password */
    public var volusionPassword: String?
    /** Omni Commerce Connector Client ID */
    public var hybrisClientId: String?
    /** Omni Commerce Connector Client Secret */
    public var hybrisClientSecret: String?
    /** User Name */
    public var hybrisUsername: String?
    /** User password */
    public var hybrisPassword: String?
    /** Websites to stores mapping data */
    public var hybrisWebsites: [AccountCartAddHybrisWebsitesInner]?
    /** Square (Weebly) Client ID */
    public var squareClientId: String?
    /** Square (Weebly) Client Secret */
    public var squareClientSecret: String?
    /** Square (Weebly) Refresh Token */
    public var squareRefreshToken: String?
    /** Squarespace API Key */
    public var squarespaceApiKey: String?
    /** Squarespace Connector Client ID */
    public var squarespaceClientId: String?
    /** Squarespace Connector Client Secret */
    public var squarespaceClientSecret: String?
    /** Squarespace access token */
    public var squarespaceAccessToken: String?
    /** Squarespace refresh token */
    public var squarespaceRefreshToken: String?
    /** CommerceHQ api key */
    public var commercehqApiKey: String?
    /** CommerceHQ api password */
    public var commercehqApiPassword: String?
    /** Woocommerce consumer key */
    public var wcConsumerKey: String?
    /** Woocommerce consumer secret */
    public var wcConsumerSecret: String?
    /** Magento Consumer Key */
    public var magentoConsumerKey: String?
    /** Magento Consumer Secret */
    public var magentoConsumerSecret: String?
    /** Magento Access Token */
    public var magentoAccessToken: String?
    /** Magento Token Secret */
    public var magentoTokenSecret: String?
    /** Prestashop webservice key */
    public var prestashopWebserviceKey: String?
    /** Wix App ID */
    public var wixAppId: String?
    /** Wix App Secret Key */
    public var wixAppSecretKey: String?
    /** Wix Instance ID */
    public var wixInstanceId: String?
    /** Wix refresh token */
    public var wixRefreshToken: String?
    /** Mercado Libre App ID */
    public var mercadoLibreAppId: String?
    /** Mercado Libre App Secret Key */
    public var mercadoLibreAppSecretKey: String?
    /** Mercado Libre Refresh Token */
    public var mercadoLibreRefreshToken: String?
    /** Zid Client ID */
    public var zidClientId: Int?
    /** Zid Client Secret */
    public var zidClientSecret: String?
    /** Zid Access Token */
    public var zidAccessToken: String?
    /** Zid Authorization */
    public var zidAuthorization: String?
    /** Zid refresh token */
    public var zidRefreshToken: String?
    /** Flipkart Client ID */
    public var flipkartClientId: String?
    /** Flipkart Client Secret */
    public var flipkartClientSecret: String?
    /** Allegro Client ID */
    public var allegroClientId: String?
    /** Allegro Client Secret */
    public var allegroClientSecret: String?
    /** Allegro Access Token */
    public var allegroAccessToken: String?
    /** Allegro Refresh Token */
    public var allegroRefreshToken: String?
    /** Allegro Environment */
    public var allegroEnvironment: String? = "production"
    /** Zoho Client ID */
    public var zohoClientId: String?
    /** Zoho Client Secret */
    public var zohoClientSecret: String?
    /** Zoho Refresh Token */
    public var zohoRefreshToken: String?
    /** Zoho API endpoint Region */
    public var zohoRegion: String?
    /** Otto Client ID */
    public var ottoClientId: String?
    /** Otto Client Secret */
    public var ottoClientSecret: String?
    /** Otto App ID */
    public var ottoAppId: String?
    /** Otto Refresh Token */
    public var ottoRefreshToken: String?
    /** Otto Environment */
    public var ottoEnvironment: String? = "production"
    /** Otto Access Token */
    public var ottoAccessToken: String?
    /** TikTok Shop App Key */
    public var tiktokshopAppKey: String?
    /** TikTok Shop App Secret */
    public var tiktokshopAppSecret: String?
    /** TikTok Shop Refresh Token */
    public var tiktokshopRefreshToken: String?
    /** TikTok Shop Access Token */
    public var tiktokshopAccessToken: String?
    /** Salla Client ID */
    public var sallaClientId: String?
    /** Salla Client Secret */
    public var sallaClientSecret: String?
    /** Salla Refresh Token */
    public var sallaRefreshToken: String?
    /** Salla Access Token */
    public var sallaAccessToken: String?
    /** Temu App Key */
    public var temuAppKey: String?
    /** Temu App Secret */
    public var temuAppSecret: String?
    /** Temu Access Token */
    public var temuAccessToken: String?
    /** Temu API endpoint Region. */
    public var temuRegion: String?

    public init(cartId: CartId, storeUrl: String? = nil, bridgeUrl: String? = nil, storeRoot: String? = nil, storeKey: String? = nil, validateVersion: Bool? = false, verify: Bool? = true, dbTablesPrefix: String? = nil, userAgent: String? = nil, ftpHost: String? = nil, ftpUser: String? = nil, ftpPassword: String? = nil, ftpPort: Int? = nil, ftpStoreDir: String? = nil, _3dcartPrivateKey: String? = nil, _3dcartAccessToken: String? = nil, _3dcartapiApiKey: String? = nil, amazonSpClientId: String? = nil, amazonSpClientSecret: String? = nil, amazonSpRefreshToken: String? = nil, amazonSpAwsRegion: String? = nil, amazonSpApiEnvironment: String? = "production", amazonSellerId: String? = nil, aspdotnetstorefrontApiUser: String? = nil, aspdotnetstorefrontApiPass: String? = nil, bigcommerceapiAdminAccount: String? = nil, bigcommerceapiApiPath: String? = nil, bigcommerceapiApiKey: String? = nil, bigcommerceapiClientId: String? = nil, bigcommerceapiAccessToken: String? = nil, bigcommerceapiContext: String? = nil, bolApiKey: String? = nil, bolApiSecret: String? = nil, bolRetailerId: Int? = nil, bigcartelUserName: String? = nil, bigcartelPassword: String? = nil, bricklinkConsumerKey: String? = nil, bricklinkConsumerSecret: String? = nil, bricklinkToken: String? = nil, bricklinkTokenSecret: String? = nil, demandwareClientId: String? = nil, demandwareApiPassword: String? = nil, demandwareUserName: String? = nil, demandwareUserPassword: String? = nil, ebayClientId: String? = nil, ebayClientSecret: String? = nil, ebayRuname: String? = nil, ebayAccessToken: String? = nil, ebayRefreshToken: String? = nil, ebayEnvironment: String? = "production", ebaySiteId: Int? = 0, walmartClientId: String? = nil, walmartClientSecret: String? = nil, walmartEnvironment: String? = "production", walmartChannelType: String? = nil, walmartRegion: String? = "us", ecwidAcessToken: String? = nil, ecwidStoreId: String? = nil, lazadaAppId: String? = nil, lazadaAppSecret: String? = nil, lazadaRefreshToken: String? = nil, lazadaRegion: String? = nil, lightspeedApiKey: String? = nil, lightspeedApiSecret: String? = nil, etsyKeystring: String? = nil, etsySharedSecret: String? = nil, etsyAccessToken: String? = nil, etsyTokenSecret: String? = nil, etsyClientId: String? = nil, etsyRefreshToken: String? = nil, facebookAppId: String? = nil, facebookAppSecret: String? = nil, facebookAccessToken: String? = nil, facebookBusinessId: String? = nil, netoApiKey: String? = nil, netoApiUsername: String? = nil, shoplineAccessToken: String? = nil, shoplineAppKey: String? = nil, shoplineAppSecret: String? = nil, shoplineSharedSecret: String? = nil, shopifyAccessToken: String? = nil, shopifyApiKey: String? = nil, shopifyApiPassword: String? = nil, shopifySharedSecret: String? = nil, shopeePartnerId: String? = nil, shopeePartnerKey: String? = nil, shopeeShopId: String? = nil, shopeeRefreshToken: String? = nil, shopeeRegion: String? = nil, shopeeEnvironment: String? = "production", shoplazzaAccessToken: String? = nil, shoplazzaSharedSecret: String? = nil, shopwareAccessKey: String? = nil, unasApiKey: String? = nil, shopwareApiKey: String? = nil, shopwareApiSecret: String? = nil, mivaAccessToken: String? = nil, mivaSignature: String? = nil, tiendanubeUserId: Int? = nil, tiendanubeAccessToken: String? = nil, tiendanubeClientSecret: String? = nil, volusionLogin: String? = nil, volusionPassword: String? = nil, hybrisClientId: String? = nil, hybrisClientSecret: String? = nil, hybrisUsername: String? = nil, hybrisPassword: String? = nil, hybrisWebsites: [AccountCartAddHybrisWebsitesInner]? = nil, squareClientId: String? = nil, squareClientSecret: String? = nil, squareRefreshToken: String? = nil, squarespaceApiKey: String? = nil, squarespaceClientId: String? = nil, squarespaceClientSecret: String? = nil, squarespaceAccessToken: String? = nil, squarespaceRefreshToken: String? = nil, commercehqApiKey: String? = nil, commercehqApiPassword: String? = nil, wcConsumerKey: String? = nil, wcConsumerSecret: String? = nil, magentoConsumerKey: String? = nil, magentoConsumerSecret: String? = nil, magentoAccessToken: String? = nil, magentoTokenSecret: String? = nil, prestashopWebserviceKey: String? = nil, wixAppId: String? = nil, wixAppSecretKey: String? = nil, wixInstanceId: String? = nil, wixRefreshToken: String? = nil, mercadoLibreAppId: String? = nil, mercadoLibreAppSecretKey: String? = nil, mercadoLibreRefreshToken: String? = nil, zidClientId: Int? = nil, zidClientSecret: String? = nil, zidAccessToken: String? = nil, zidAuthorization: String? = nil, zidRefreshToken: String? = nil, flipkartClientId: String? = nil, flipkartClientSecret: String? = nil, allegroClientId: String? = nil, allegroClientSecret: String? = nil, allegroAccessToken: String? = nil, allegroRefreshToken: String? = nil, allegroEnvironment: String? = "production", zohoClientId: String? = nil, zohoClientSecret: String? = nil, zohoRefreshToken: String? = nil, zohoRegion: String? = nil, ottoClientId: String? = nil, ottoClientSecret: String? = nil, ottoAppId: String? = nil, ottoRefreshToken: String? = nil, ottoEnvironment: String? = "production", ottoAccessToken: String? = nil, tiktokshopAppKey: String? = nil, tiktokshopAppSecret: String? = nil, tiktokshopRefreshToken: String? = nil, tiktokshopAccessToken: String? = nil, sallaClientId: String? = nil, sallaClientSecret: String? = nil, sallaRefreshToken: String? = nil, sallaAccessToken: String? = nil, temuAppKey: String? = nil, temuAppSecret: String? = nil, temuAccessToken: String? = nil, temuRegion: String? = nil) {
        self.cartId = cartId
        self.storeUrl = storeUrl
        self.bridgeUrl = bridgeUrl
        self.storeRoot = storeRoot
        self.storeKey = storeKey
        self.validateVersion = validateVersion
        self.verify = verify
        self.dbTablesPrefix = dbTablesPrefix
        self.userAgent = userAgent
        self.ftpHost = ftpHost
        self.ftpUser = ftpUser
        self.ftpPassword = ftpPassword
        self.ftpPort = ftpPort
        self.ftpStoreDir = ftpStoreDir
        self._3dcartPrivateKey = _3dcartPrivateKey
        self._3dcartAccessToken = _3dcartAccessToken
        self._3dcartapiApiKey = _3dcartapiApiKey
        self.amazonSpClientId = amazonSpClientId
        self.amazonSpClientSecret = amazonSpClientSecret
        self.amazonSpRefreshToken = amazonSpRefreshToken
        self.amazonSpAwsRegion = amazonSpAwsRegion
        self.amazonSpApiEnvironment = amazonSpApiEnvironment
        self.amazonSellerId = amazonSellerId
        self.aspdotnetstorefrontApiUser = aspdotnetstorefrontApiUser
        self.aspdotnetstorefrontApiPass = aspdotnetstorefrontApiPass
        self.bigcommerceapiAdminAccount = bigcommerceapiAdminAccount
        self.bigcommerceapiApiPath = bigcommerceapiApiPath
        self.bigcommerceapiApiKey = bigcommerceapiApiKey
        self.bigcommerceapiClientId = bigcommerceapiClientId
        self.bigcommerceapiAccessToken = bigcommerceapiAccessToken
        self.bigcommerceapiContext = bigcommerceapiContext
        self.bolApiKey = bolApiKey
        self.bolApiSecret = bolApiSecret
        self.bolRetailerId = bolRetailerId
        self.bigcartelUserName = bigcartelUserName
        self.bigcartelPassword = bigcartelPassword
        self.bricklinkConsumerKey = bricklinkConsumerKey
        self.bricklinkConsumerSecret = bricklinkConsumerSecret
        self.bricklinkToken = bricklinkToken
        self.bricklinkTokenSecret = bricklinkTokenSecret
        self.demandwareClientId = demandwareClientId
        self.demandwareApiPassword = demandwareApiPassword
        self.demandwareUserName = demandwareUserName
        self.demandwareUserPassword = demandwareUserPassword
        self.ebayClientId = ebayClientId
        self.ebayClientSecret = ebayClientSecret
        self.ebayRuname = ebayRuname
        self.ebayAccessToken = ebayAccessToken
        self.ebayRefreshToken = ebayRefreshToken
        self.ebayEnvironment = ebayEnvironment
        self.ebaySiteId = ebaySiteId
        self.walmartClientId = walmartClientId
        self.walmartClientSecret = walmartClientSecret
        self.walmartEnvironment = walmartEnvironment
        self.walmartChannelType = walmartChannelType
        self.walmartRegion = walmartRegion
        self.ecwidAcessToken = ecwidAcessToken
        self.ecwidStoreId = ecwidStoreId
        self.lazadaAppId = lazadaAppId
        self.lazadaAppSecret = lazadaAppSecret
        self.lazadaRefreshToken = lazadaRefreshToken
        self.lazadaRegion = lazadaRegion
        self.lightspeedApiKey = lightspeedApiKey
        self.lightspeedApiSecret = lightspeedApiSecret
        self.etsyKeystring = etsyKeystring
        self.etsySharedSecret = etsySharedSecret
        self.etsyAccessToken = etsyAccessToken
        self.etsyTokenSecret = etsyTokenSecret
        self.etsyClientId = etsyClientId
        self.etsyRefreshToken = etsyRefreshToken
        self.facebookAppId = facebookAppId
        self.facebookAppSecret = facebookAppSecret
        self.facebookAccessToken = facebookAccessToken
        self.facebookBusinessId = facebookBusinessId
        self.netoApiKey = netoApiKey
        self.netoApiUsername = netoApiUsername
        self.shoplineAccessToken = shoplineAccessToken
        self.shoplineAppKey = shoplineAppKey
        self.shoplineAppSecret = shoplineAppSecret
        self.shoplineSharedSecret = shoplineSharedSecret
        self.shopifyAccessToken = shopifyAccessToken
        self.shopifyApiKey = shopifyApiKey
        self.shopifyApiPassword = shopifyApiPassword
        self.shopifySharedSecret = shopifySharedSecret
        self.shopeePartnerId = shopeePartnerId
        self.shopeePartnerKey = shopeePartnerKey
        self.shopeeShopId = shopeeShopId
        self.shopeeRefreshToken = shopeeRefreshToken
        self.shopeeRegion = shopeeRegion
        self.shopeeEnvironment = shopeeEnvironment
        self.shoplazzaAccessToken = shoplazzaAccessToken
        self.shoplazzaSharedSecret = shoplazzaSharedSecret
        self.shopwareAccessKey = shopwareAccessKey
        self.unasApiKey = unasApiKey
        self.shopwareApiKey = shopwareApiKey
        self.shopwareApiSecret = shopwareApiSecret
        self.mivaAccessToken = mivaAccessToken
        self.mivaSignature = mivaSignature
        self.tiendanubeUserId = tiendanubeUserId
        self.tiendanubeAccessToken = tiendanubeAccessToken
        self.tiendanubeClientSecret = tiendanubeClientSecret
        self.volusionLogin = volusionLogin
        self.volusionPassword = volusionPassword
        self.hybrisClientId = hybrisClientId
        self.hybrisClientSecret = hybrisClientSecret
        self.hybrisUsername = hybrisUsername
        self.hybrisPassword = hybrisPassword
        self.hybrisWebsites = hybrisWebsites
        self.squareClientId = squareClientId
        self.squareClientSecret = squareClientSecret
        self.squareRefreshToken = squareRefreshToken
        self.squarespaceApiKey = squarespaceApiKey
        self.squarespaceClientId = squarespaceClientId
        self.squarespaceClientSecret = squarespaceClientSecret
        self.squarespaceAccessToken = squarespaceAccessToken
        self.squarespaceRefreshToken = squarespaceRefreshToken
        self.commercehqApiKey = commercehqApiKey
        self.commercehqApiPassword = commercehqApiPassword
        self.wcConsumerKey = wcConsumerKey
        self.wcConsumerSecret = wcConsumerSecret
        self.magentoConsumerKey = magentoConsumerKey
        self.magentoConsumerSecret = magentoConsumerSecret
        self.magentoAccessToken = magentoAccessToken
        self.magentoTokenSecret = magentoTokenSecret
        self.prestashopWebserviceKey = prestashopWebserviceKey
        self.wixAppId = wixAppId
        self.wixAppSecretKey = wixAppSecretKey
        self.wixInstanceId = wixInstanceId
        self.wixRefreshToken = wixRefreshToken
        self.mercadoLibreAppId = mercadoLibreAppId
        self.mercadoLibreAppSecretKey = mercadoLibreAppSecretKey
        self.mercadoLibreRefreshToken = mercadoLibreRefreshToken
        self.zidClientId = zidClientId
        self.zidClientSecret = zidClientSecret
        self.zidAccessToken = zidAccessToken
        self.zidAuthorization = zidAuthorization
        self.zidRefreshToken = zidRefreshToken
        self.flipkartClientId = flipkartClientId
        self.flipkartClientSecret = flipkartClientSecret
        self.allegroClientId = allegroClientId
        self.allegroClientSecret = allegroClientSecret
        self.allegroAccessToken = allegroAccessToken
        self.allegroRefreshToken = allegroRefreshToken
        self.allegroEnvironment = allegroEnvironment
        self.zohoClientId = zohoClientId
        self.zohoClientSecret = zohoClientSecret
        self.zohoRefreshToken = zohoRefreshToken
        self.zohoRegion = zohoRegion
        self.ottoClientId = ottoClientId
        self.ottoClientSecret = ottoClientSecret
        self.ottoAppId = ottoAppId
        self.ottoRefreshToken = ottoRefreshToken
        self.ottoEnvironment = ottoEnvironment
        self.ottoAccessToken = ottoAccessToken
        self.tiktokshopAppKey = tiktokshopAppKey
        self.tiktokshopAppSecret = tiktokshopAppSecret
        self.tiktokshopRefreshToken = tiktokshopRefreshToken
        self.tiktokshopAccessToken = tiktokshopAccessToken
        self.sallaClientId = sallaClientId
        self.sallaClientSecret = sallaClientSecret
        self.sallaRefreshToken = sallaRefreshToken
        self.sallaAccessToken = sallaAccessToken
        self.temuAppKey = temuAppKey
        self.temuAppSecret = temuAppSecret
        self.temuAccessToken = temuAccessToken
        self.temuRegion = temuRegion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cartId = "cart_id"
        case storeUrl = "store_url"
        case bridgeUrl = "bridge_url"
        case storeRoot = "store_root"
        case storeKey = "store_key"
        case validateVersion = "validate_version"
        case verify
        case dbTablesPrefix = "db_tables_prefix"
        case userAgent = "user_agent"
        case ftpHost = "ftp_host"
        case ftpUser = "ftp_user"
        case ftpPassword = "ftp_password"
        case ftpPort = "ftp_port"
        case ftpStoreDir = "ftp_store_dir"
        case _3dcartPrivateKey = "3dcart_private_key"
        case _3dcartAccessToken = "3dcart_access_token"
        case _3dcartapiApiKey = "3dcartapi_api_key"
        case amazonSpClientId = "amazon_sp_client_id"
        case amazonSpClientSecret = "amazon_sp_client_secret"
        case amazonSpRefreshToken = "amazon_sp_refresh_token"
        case amazonSpAwsRegion = "amazon_sp_aws_region"
        case amazonSpApiEnvironment = "amazon_sp_api_environment"
        case amazonSellerId = "amazon_seller_id"
        case aspdotnetstorefrontApiUser = "aspdotnetstorefront_api_user"
        case aspdotnetstorefrontApiPass = "aspdotnetstorefront_api_pass"
        case bigcommerceapiAdminAccount = "bigcommerceapi_admin_account"
        case bigcommerceapiApiPath = "bigcommerceapi_api_path"
        case bigcommerceapiApiKey = "bigcommerceapi_api_key"
        case bigcommerceapiClientId = "bigcommerceapi_client_id"
        case bigcommerceapiAccessToken = "bigcommerceapi_access_token"
        case bigcommerceapiContext = "bigcommerceapi_context"
        case bolApiKey = "bol_api_key"
        case bolApiSecret = "bol_api_secret"
        case bolRetailerId = "bol_retailer_id"
        case bigcartelUserName = "bigcartel_user_name"
        case bigcartelPassword = "bigcartel_password"
        case bricklinkConsumerKey = "bricklink_consumer_key"
        case bricklinkConsumerSecret = "bricklink_consumer_secret"
        case bricklinkToken = "bricklink_token"
        case bricklinkTokenSecret = "bricklink_token_secret"
        case demandwareClientId = "demandware_client_id"
        case demandwareApiPassword = "demandware_api_password"
        case demandwareUserName = "demandware_user_name"
        case demandwareUserPassword = "demandware_user_password"
        case ebayClientId = "ebay_client_id"
        case ebayClientSecret = "ebay_client_secret"
        case ebayRuname = "ebay_runame"
        case ebayAccessToken = "ebay_access_token"
        case ebayRefreshToken = "ebay_refresh_token"
        case ebayEnvironment = "ebay_environment"
        case ebaySiteId = "ebay_site_id"
        case walmartClientId = "walmart_client_id"
        case walmartClientSecret = "walmart_client_secret"
        case walmartEnvironment = "walmart_environment"
        case walmartChannelType = "walmart_channel_type"
        case walmartRegion = "walmart_region"
        case ecwidAcessToken = "ecwid_acess_token"
        case ecwidStoreId = "ecwid_store_id"
        case lazadaAppId = "lazada_app_id"
        case lazadaAppSecret = "lazada_app_secret"
        case lazadaRefreshToken = "lazada_refresh_token"
        case lazadaRegion = "lazada_region"
        case lightspeedApiKey = "lightspeed_api_key"
        case lightspeedApiSecret = "lightspeed_api_secret"
        case etsyKeystring = "etsy_keystring"
        case etsySharedSecret = "etsy_shared_secret"
        case etsyAccessToken = "etsy_access_token"
        case etsyTokenSecret = "etsy_token_secret"
        case etsyClientId = "etsy_client_id"
        case etsyRefreshToken = "etsy_refresh_token"
        case facebookAppId = "facebook_app_id"
        case facebookAppSecret = "facebook_app_secret"
        case facebookAccessToken = "facebook_access_token"
        case facebookBusinessId = "facebook_business_id"
        case netoApiKey = "neto_api_key"
        case netoApiUsername = "neto_api_username"
        case shoplineAccessToken = "shopline_access_token"
        case shoplineAppKey = "shopline_app_key"
        case shoplineAppSecret = "shopline_app_secret"
        case shoplineSharedSecret = "shopline_shared_secret"
        case shopifyAccessToken = "shopify_access_token"
        case shopifyApiKey = "shopify_api_key"
        case shopifyApiPassword = "shopify_api_password"
        case shopifySharedSecret = "shopify_shared_secret"
        case shopeePartnerId = "shopee_partner_id"
        case shopeePartnerKey = "shopee_partner_key"
        case shopeeShopId = "shopee_shop_id"
        case shopeeRefreshToken = "shopee_refresh_token"
        case shopeeRegion = "shopee_region"
        case shopeeEnvironment = "shopee_environment"
        case shoplazzaAccessToken = "shoplazza_access_token"
        case shoplazzaSharedSecret = "shoplazza_shared_secret"
        case shopwareAccessKey = "shopware_access_key"
        case unasApiKey = "unas_api_key"
        case shopwareApiKey = "shopware_api_key"
        case shopwareApiSecret = "shopware_api_secret"
        case mivaAccessToken = "miva_access_token"
        case mivaSignature = "miva_signature"
        case tiendanubeUserId = "tiendanube_user_id"
        case tiendanubeAccessToken = "tiendanube_access_token"
        case tiendanubeClientSecret = "tiendanube_client_secret"
        case volusionLogin = "volusion_login"
        case volusionPassword = "volusion_password"
        case hybrisClientId = "hybris_client_id"
        case hybrisClientSecret = "hybris_client_secret"
        case hybrisUsername = "hybris_username"
        case hybrisPassword = "hybris_password"
        case hybrisWebsites = "hybris_websites"
        case squareClientId = "square_client_id"
        case squareClientSecret = "square_client_secret"
        case squareRefreshToken = "square_refresh_token"
        case squarespaceApiKey = "squarespace_api_key"
        case squarespaceClientId = "squarespace_client_id"
        case squarespaceClientSecret = "squarespace_client_secret"
        case squarespaceAccessToken = "squarespace_access_token"
        case squarespaceRefreshToken = "squarespace_refresh_token"
        case commercehqApiKey = "commercehq_api_key"
        case commercehqApiPassword = "commercehq_api_password"
        case wcConsumerKey = "wc_consumer_key"
        case wcConsumerSecret = "wc_consumer_secret"
        case magentoConsumerKey = "magento_consumer_key"
        case magentoConsumerSecret = "magento_consumer_secret"
        case magentoAccessToken = "magento_access_token"
        case magentoTokenSecret = "magento_token_secret"
        case prestashopWebserviceKey = "prestashop_webservice_key"
        case wixAppId = "wix_app_id"
        case wixAppSecretKey = "wix_app_secret_key"
        case wixInstanceId = "wix_instance_id"
        case wixRefreshToken = "wix_refresh_token"
        case mercadoLibreAppId = "mercado_libre_app_id"
        case mercadoLibreAppSecretKey = "mercado_libre_app_secret_key"
        case mercadoLibreRefreshToken = "mercado_libre_refresh_token"
        case zidClientId = "zid_client_id"
        case zidClientSecret = "zid_client_secret"
        case zidAccessToken = "zid_access_token"
        case zidAuthorization = "zid_authorization"
        case zidRefreshToken = "zid_refresh_token"
        case flipkartClientId = "flipkart_client_id"
        case flipkartClientSecret = "flipkart_client_secret"
        case allegroClientId = "allegro_client_id"
        case allegroClientSecret = "allegro_client_secret"
        case allegroAccessToken = "allegro_access_token"
        case allegroRefreshToken = "allegro_refresh_token"
        case allegroEnvironment = "allegro_environment"
        case zohoClientId = "zoho_client_id"
        case zohoClientSecret = "zoho_client_secret"
        case zohoRefreshToken = "zoho_refresh_token"
        case zohoRegion = "zoho_region"
        case ottoClientId = "otto_client_id"
        case ottoClientSecret = "otto_client_secret"
        case ottoAppId = "otto_app_id"
        case ottoRefreshToken = "otto_refresh_token"
        case ottoEnvironment = "otto_environment"
        case ottoAccessToken = "otto_access_token"
        case tiktokshopAppKey = "tiktokshop_app_key"
        case tiktokshopAppSecret = "tiktokshop_app_secret"
        case tiktokshopRefreshToken = "tiktokshop_refresh_token"
        case tiktokshopAccessToken = "tiktokshop_access_token"
        case sallaClientId = "salla_client_id"
        case sallaClientSecret = "salla_client_secret"
        case sallaRefreshToken = "salla_refresh_token"
        case sallaAccessToken = "salla_access_token"
        case temuAppKey = "temu_app_key"
        case temuAppSecret = "temu_app_secret"
        case temuAccessToken = "temu_access_token"
        case temuRegion = "temu_region"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cartId, forKey: .cartId)
        try container.encodeIfPresent(storeUrl, forKey: .storeUrl)
        try container.encodeIfPresent(bridgeUrl, forKey: .bridgeUrl)
        try container.encodeIfPresent(storeRoot, forKey: .storeRoot)
        try container.encodeIfPresent(storeKey, forKey: .storeKey)
        try container.encodeIfPresent(validateVersion, forKey: .validateVersion)
        try container.encodeIfPresent(verify, forKey: .verify)
        try container.encodeIfPresent(dbTablesPrefix, forKey: .dbTablesPrefix)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(ftpHost, forKey: .ftpHost)
        try container.encodeIfPresent(ftpUser, forKey: .ftpUser)
        try container.encodeIfPresent(ftpPassword, forKey: .ftpPassword)
        try container.encodeIfPresent(ftpPort, forKey: .ftpPort)
        try container.encodeIfPresent(ftpStoreDir, forKey: .ftpStoreDir)
        try container.encodeIfPresent(_3dcartPrivateKey, forKey: ._3dcartPrivateKey)
        try container.encodeIfPresent(_3dcartAccessToken, forKey: ._3dcartAccessToken)
        try container.encodeIfPresent(_3dcartapiApiKey, forKey: ._3dcartapiApiKey)
        try container.encodeIfPresent(amazonSpClientId, forKey: .amazonSpClientId)
        try container.encodeIfPresent(amazonSpClientSecret, forKey: .amazonSpClientSecret)
        try container.encodeIfPresent(amazonSpRefreshToken, forKey: .amazonSpRefreshToken)
        try container.encodeIfPresent(amazonSpAwsRegion, forKey: .amazonSpAwsRegion)
        try container.encodeIfPresent(amazonSpApiEnvironment, forKey: .amazonSpApiEnvironment)
        try container.encodeIfPresent(amazonSellerId, forKey: .amazonSellerId)
        try container.encodeIfPresent(aspdotnetstorefrontApiUser, forKey: .aspdotnetstorefrontApiUser)
        try container.encodeIfPresent(aspdotnetstorefrontApiPass, forKey: .aspdotnetstorefrontApiPass)
        try container.encodeIfPresent(bigcommerceapiAdminAccount, forKey: .bigcommerceapiAdminAccount)
        try container.encodeIfPresent(bigcommerceapiApiPath, forKey: .bigcommerceapiApiPath)
        try container.encodeIfPresent(bigcommerceapiApiKey, forKey: .bigcommerceapiApiKey)
        try container.encodeIfPresent(bigcommerceapiClientId, forKey: .bigcommerceapiClientId)
        try container.encodeIfPresent(bigcommerceapiAccessToken, forKey: .bigcommerceapiAccessToken)
        try container.encodeIfPresent(bigcommerceapiContext, forKey: .bigcommerceapiContext)
        try container.encodeIfPresent(bolApiKey, forKey: .bolApiKey)
        try container.encodeIfPresent(bolApiSecret, forKey: .bolApiSecret)
        try container.encodeIfPresent(bolRetailerId, forKey: .bolRetailerId)
        try container.encodeIfPresent(bigcartelUserName, forKey: .bigcartelUserName)
        try container.encodeIfPresent(bigcartelPassword, forKey: .bigcartelPassword)
        try container.encodeIfPresent(bricklinkConsumerKey, forKey: .bricklinkConsumerKey)
        try container.encodeIfPresent(bricklinkConsumerSecret, forKey: .bricklinkConsumerSecret)
        try container.encodeIfPresent(bricklinkToken, forKey: .bricklinkToken)
        try container.encodeIfPresent(bricklinkTokenSecret, forKey: .bricklinkTokenSecret)
        try container.encodeIfPresent(demandwareClientId, forKey: .demandwareClientId)
        try container.encodeIfPresent(demandwareApiPassword, forKey: .demandwareApiPassword)
        try container.encodeIfPresent(demandwareUserName, forKey: .demandwareUserName)
        try container.encodeIfPresent(demandwareUserPassword, forKey: .demandwareUserPassword)
        try container.encodeIfPresent(ebayClientId, forKey: .ebayClientId)
        try container.encodeIfPresent(ebayClientSecret, forKey: .ebayClientSecret)
        try container.encodeIfPresent(ebayRuname, forKey: .ebayRuname)
        try container.encodeIfPresent(ebayAccessToken, forKey: .ebayAccessToken)
        try container.encodeIfPresent(ebayRefreshToken, forKey: .ebayRefreshToken)
        try container.encodeIfPresent(ebayEnvironment, forKey: .ebayEnvironment)
        try container.encodeIfPresent(ebaySiteId, forKey: .ebaySiteId)
        try container.encodeIfPresent(walmartClientId, forKey: .walmartClientId)
        try container.encodeIfPresent(walmartClientSecret, forKey: .walmartClientSecret)
        try container.encodeIfPresent(walmartEnvironment, forKey: .walmartEnvironment)
        try container.encodeIfPresent(walmartChannelType, forKey: .walmartChannelType)
        try container.encodeIfPresent(walmartRegion, forKey: .walmartRegion)
        try container.encodeIfPresent(ecwidAcessToken, forKey: .ecwidAcessToken)
        try container.encodeIfPresent(ecwidStoreId, forKey: .ecwidStoreId)
        try container.encodeIfPresent(lazadaAppId, forKey: .lazadaAppId)
        try container.encodeIfPresent(lazadaAppSecret, forKey: .lazadaAppSecret)
        try container.encodeIfPresent(lazadaRefreshToken, forKey: .lazadaRefreshToken)
        try container.encodeIfPresent(lazadaRegion, forKey: .lazadaRegion)
        try container.encodeIfPresent(lightspeedApiKey, forKey: .lightspeedApiKey)
        try container.encodeIfPresent(lightspeedApiSecret, forKey: .lightspeedApiSecret)
        try container.encodeIfPresent(etsyKeystring, forKey: .etsyKeystring)
        try container.encodeIfPresent(etsySharedSecret, forKey: .etsySharedSecret)
        try container.encodeIfPresent(etsyAccessToken, forKey: .etsyAccessToken)
        try container.encodeIfPresent(etsyTokenSecret, forKey: .etsyTokenSecret)
        try container.encodeIfPresent(etsyClientId, forKey: .etsyClientId)
        try container.encodeIfPresent(etsyRefreshToken, forKey: .etsyRefreshToken)
        try container.encodeIfPresent(facebookAppId, forKey: .facebookAppId)
        try container.encodeIfPresent(facebookAppSecret, forKey: .facebookAppSecret)
        try container.encodeIfPresent(facebookAccessToken, forKey: .facebookAccessToken)
        try container.encodeIfPresent(facebookBusinessId, forKey: .facebookBusinessId)
        try container.encodeIfPresent(netoApiKey, forKey: .netoApiKey)
        try container.encodeIfPresent(netoApiUsername, forKey: .netoApiUsername)
        try container.encodeIfPresent(shoplineAccessToken, forKey: .shoplineAccessToken)
        try container.encodeIfPresent(shoplineAppKey, forKey: .shoplineAppKey)
        try container.encodeIfPresent(shoplineAppSecret, forKey: .shoplineAppSecret)
        try container.encodeIfPresent(shoplineSharedSecret, forKey: .shoplineSharedSecret)
        try container.encodeIfPresent(shopifyAccessToken, forKey: .shopifyAccessToken)
        try container.encodeIfPresent(shopifyApiKey, forKey: .shopifyApiKey)
        try container.encodeIfPresent(shopifyApiPassword, forKey: .shopifyApiPassword)
        try container.encodeIfPresent(shopifySharedSecret, forKey: .shopifySharedSecret)
        try container.encodeIfPresent(shopeePartnerId, forKey: .shopeePartnerId)
        try container.encodeIfPresent(shopeePartnerKey, forKey: .shopeePartnerKey)
        try container.encodeIfPresent(shopeeShopId, forKey: .shopeeShopId)
        try container.encodeIfPresent(shopeeRefreshToken, forKey: .shopeeRefreshToken)
        try container.encodeIfPresent(shopeeRegion, forKey: .shopeeRegion)
        try container.encodeIfPresent(shopeeEnvironment, forKey: .shopeeEnvironment)
        try container.encodeIfPresent(shoplazzaAccessToken, forKey: .shoplazzaAccessToken)
        try container.encodeIfPresent(shoplazzaSharedSecret, forKey: .shoplazzaSharedSecret)
        try container.encodeIfPresent(shopwareAccessKey, forKey: .shopwareAccessKey)
        try container.encodeIfPresent(unasApiKey, forKey: .unasApiKey)
        try container.encodeIfPresent(shopwareApiKey, forKey: .shopwareApiKey)
        try container.encodeIfPresent(shopwareApiSecret, forKey: .shopwareApiSecret)
        try container.encodeIfPresent(mivaAccessToken, forKey: .mivaAccessToken)
        try container.encodeIfPresent(mivaSignature, forKey: .mivaSignature)
        try container.encodeIfPresent(tiendanubeUserId, forKey: .tiendanubeUserId)
        try container.encodeIfPresent(tiendanubeAccessToken, forKey: .tiendanubeAccessToken)
        try container.encodeIfPresent(tiendanubeClientSecret, forKey: .tiendanubeClientSecret)
        try container.encodeIfPresent(volusionLogin, forKey: .volusionLogin)
        try container.encodeIfPresent(volusionPassword, forKey: .volusionPassword)
        try container.encodeIfPresent(hybrisClientId, forKey: .hybrisClientId)
        try container.encodeIfPresent(hybrisClientSecret, forKey: .hybrisClientSecret)
        try container.encodeIfPresent(hybrisUsername, forKey: .hybrisUsername)
        try container.encodeIfPresent(hybrisPassword, forKey: .hybrisPassword)
        try container.encodeIfPresent(hybrisWebsites, forKey: .hybrisWebsites)
        try container.encodeIfPresent(squareClientId, forKey: .squareClientId)
        try container.encodeIfPresent(squareClientSecret, forKey: .squareClientSecret)
        try container.encodeIfPresent(squareRefreshToken, forKey: .squareRefreshToken)
        try container.encodeIfPresent(squarespaceApiKey, forKey: .squarespaceApiKey)
        try container.encodeIfPresent(squarespaceClientId, forKey: .squarespaceClientId)
        try container.encodeIfPresent(squarespaceClientSecret, forKey: .squarespaceClientSecret)
        try container.encodeIfPresent(squarespaceAccessToken, forKey: .squarespaceAccessToken)
        try container.encodeIfPresent(squarespaceRefreshToken, forKey: .squarespaceRefreshToken)
        try container.encodeIfPresent(commercehqApiKey, forKey: .commercehqApiKey)
        try container.encodeIfPresent(commercehqApiPassword, forKey: .commercehqApiPassword)
        try container.encodeIfPresent(wcConsumerKey, forKey: .wcConsumerKey)
        try container.encodeIfPresent(wcConsumerSecret, forKey: .wcConsumerSecret)
        try container.encodeIfPresent(magentoConsumerKey, forKey: .magentoConsumerKey)
        try container.encodeIfPresent(magentoConsumerSecret, forKey: .magentoConsumerSecret)
        try container.encodeIfPresent(magentoAccessToken, forKey: .magentoAccessToken)
        try container.encodeIfPresent(magentoTokenSecret, forKey: .magentoTokenSecret)
        try container.encodeIfPresent(prestashopWebserviceKey, forKey: .prestashopWebserviceKey)
        try container.encodeIfPresent(wixAppId, forKey: .wixAppId)
        try container.encodeIfPresent(wixAppSecretKey, forKey: .wixAppSecretKey)
        try container.encodeIfPresent(wixInstanceId, forKey: .wixInstanceId)
        try container.encodeIfPresent(wixRefreshToken, forKey: .wixRefreshToken)
        try container.encodeIfPresent(mercadoLibreAppId, forKey: .mercadoLibreAppId)
        try container.encodeIfPresent(mercadoLibreAppSecretKey, forKey: .mercadoLibreAppSecretKey)
        try container.encodeIfPresent(mercadoLibreRefreshToken, forKey: .mercadoLibreRefreshToken)
        try container.encodeIfPresent(zidClientId, forKey: .zidClientId)
        try container.encodeIfPresent(zidClientSecret, forKey: .zidClientSecret)
        try container.encodeIfPresent(zidAccessToken, forKey: .zidAccessToken)
        try container.encodeIfPresent(zidAuthorization, forKey: .zidAuthorization)
        try container.encodeIfPresent(zidRefreshToken, forKey: .zidRefreshToken)
        try container.encodeIfPresent(flipkartClientId, forKey: .flipkartClientId)
        try container.encodeIfPresent(flipkartClientSecret, forKey: .flipkartClientSecret)
        try container.encodeIfPresent(allegroClientId, forKey: .allegroClientId)
        try container.encodeIfPresent(allegroClientSecret, forKey: .allegroClientSecret)
        try container.encodeIfPresent(allegroAccessToken, forKey: .allegroAccessToken)
        try container.encodeIfPresent(allegroRefreshToken, forKey: .allegroRefreshToken)
        try container.encodeIfPresent(allegroEnvironment, forKey: .allegroEnvironment)
        try container.encodeIfPresent(zohoClientId, forKey: .zohoClientId)
        try container.encodeIfPresent(zohoClientSecret, forKey: .zohoClientSecret)
        try container.encodeIfPresent(zohoRefreshToken, forKey: .zohoRefreshToken)
        try container.encodeIfPresent(zohoRegion, forKey: .zohoRegion)
        try container.encodeIfPresent(ottoClientId, forKey: .ottoClientId)
        try container.encodeIfPresent(ottoClientSecret, forKey: .ottoClientSecret)
        try container.encodeIfPresent(ottoAppId, forKey: .ottoAppId)
        try container.encodeIfPresent(ottoRefreshToken, forKey: .ottoRefreshToken)
        try container.encodeIfPresent(ottoEnvironment, forKey: .ottoEnvironment)
        try container.encodeIfPresent(ottoAccessToken, forKey: .ottoAccessToken)
        try container.encodeIfPresent(tiktokshopAppKey, forKey: .tiktokshopAppKey)
        try container.encodeIfPresent(tiktokshopAppSecret, forKey: .tiktokshopAppSecret)
        try container.encodeIfPresent(tiktokshopRefreshToken, forKey: .tiktokshopRefreshToken)
        try container.encodeIfPresent(tiktokshopAccessToken, forKey: .tiktokshopAccessToken)
        try container.encodeIfPresent(sallaClientId, forKey: .sallaClientId)
        try container.encodeIfPresent(sallaClientSecret, forKey: .sallaClientSecret)
        try container.encodeIfPresent(sallaRefreshToken, forKey: .sallaRefreshToken)
        try container.encodeIfPresent(sallaAccessToken, forKey: .sallaAccessToken)
        try container.encodeIfPresent(temuAppKey, forKey: .temuAppKey)
        try container.encodeIfPresent(temuAppSecret, forKey: .temuAppSecret)
        try container.encodeIfPresent(temuAccessToken, forKey: .temuAccessToken)
        try container.encodeIfPresent(temuRegion, forKey: .temuRegion)
    }
}

