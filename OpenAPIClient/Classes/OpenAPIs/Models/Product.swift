//
// Product.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Product: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var type: String?
    public var uModel: String?
    public var uSku: String?
    public var name: String?
    public var description: String?
    public var shortDescription: String?
    public var price: Double?
    public var advancedPrice: [ProductAdvancedPrice]?
    public var costPrice: Double?
    public var quantity: Double?
    public var inventory: [ProductInventory]?
    public var groupItems: [ProductGroupItem]?
    public var uBrandId: String?
    public var uBrand: String?
    public var categoriesIds: [String]?
    public var storesIds: [String]?
    public var url: String?
    public var seoUrl: String?
    public var metaTitle: String?
    public var metaKeywords: String?
    public var metaDescription: String?
    public var availSale: Bool?
    public var availView: Bool?
    public var isVirtual: Bool?
    public var isDownloadable: Bool?
    public var weight: Double?
    public var weightUnit: String?
    public var sortOrder: Int?
    public var inStock: Bool?
    public var backorders: String?
    public var manageStock: String?
    public var isStockManaged: Bool?
    public var onSale: Bool?
    public var createAt: A2CDateTime?
    public var modifiedAt: A2CDateTime?
    public var taxClassId: String?
    public var specialPrice: SpecialPrice?
    public var tierPrice: [ProductTierPrice]?
    public var groupPrice: [ProductGroupPrice]?
    public var images: [Image]?
    public var productOptions: [ProductOption]?
    public var uUpc: String?
    public var uMpn: String?
    public var uGtin: String?
    public var uIsbn: String?
    public var uEan: String?
    public var relatedProductsIds: [String]?
    public var upSellProductsIds: [String]?
    public var crossSellProductsIds: [String]?
    public var dimensionsUnit: String?
    public var width: Double?
    public var height: Double?
    public var length: Double?
    public var discounts: [Discount]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, type: String? = nil, uModel: String? = nil, uSku: String? = nil, name: String? = nil, description: String? = nil, shortDescription: String? = nil, price: Double? = nil, advancedPrice: [ProductAdvancedPrice]? = nil, costPrice: Double? = nil, quantity: Double? = nil, inventory: [ProductInventory]? = nil, groupItems: [ProductGroupItem]? = nil, uBrandId: String? = nil, uBrand: String? = nil, categoriesIds: [String]? = nil, storesIds: [String]? = nil, url: String? = nil, seoUrl: String? = nil, metaTitle: String? = nil, metaKeywords: String? = nil, metaDescription: String? = nil, availSale: Bool? = nil, availView: Bool? = nil, isVirtual: Bool? = nil, isDownloadable: Bool? = nil, weight: Double? = nil, weightUnit: String? = nil, sortOrder: Int? = nil, inStock: Bool? = nil, backorders: String? = nil, manageStock: String? = nil, isStockManaged: Bool? = nil, onSale: Bool? = nil, createAt: A2CDateTime? = nil, modifiedAt: A2CDateTime? = nil, taxClassId: String? = nil, specialPrice: SpecialPrice? = nil, tierPrice: [ProductTierPrice]? = nil, groupPrice: [ProductGroupPrice]? = nil, images: [Image]? = nil, productOptions: [ProductOption]? = nil, uUpc: String? = nil, uMpn: String? = nil, uGtin: String? = nil, uIsbn: String? = nil, uEan: String? = nil, relatedProductsIds: [String]? = nil, upSellProductsIds: [String]? = nil, crossSellProductsIds: [String]? = nil, dimensionsUnit: String? = nil, width: Double? = nil, height: Double? = nil, length: Double? = nil, discounts: [Discount]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.type = type
        self.uModel = uModel
        self.uSku = uSku
        self.name = name
        self.description = description
        self.shortDescription = shortDescription
        self.price = price
        self.advancedPrice = advancedPrice
        self.costPrice = costPrice
        self.quantity = quantity
        self.inventory = inventory
        self.groupItems = groupItems
        self.uBrandId = uBrandId
        self.uBrand = uBrand
        self.categoriesIds = categoriesIds
        self.storesIds = storesIds
        self.url = url
        self.seoUrl = seoUrl
        self.metaTitle = metaTitle
        self.metaKeywords = metaKeywords
        self.metaDescription = metaDescription
        self.availSale = availSale
        self.availView = availView
        self.isVirtual = isVirtual
        self.isDownloadable = isDownloadable
        self.weight = weight
        self.weightUnit = weightUnit
        self.sortOrder = sortOrder
        self.inStock = inStock
        self.backorders = backorders
        self.manageStock = manageStock
        self.isStockManaged = isStockManaged
        self.onSale = onSale
        self.createAt = createAt
        self.modifiedAt = modifiedAt
        self.taxClassId = taxClassId
        self.specialPrice = specialPrice
        self.tierPrice = tierPrice
        self.groupPrice = groupPrice
        self.images = images
        self.productOptions = productOptions
        self.uUpc = uUpc
        self.uMpn = uMpn
        self.uGtin = uGtin
        self.uIsbn = uIsbn
        self.uEan = uEan
        self.relatedProductsIds = relatedProductsIds
        self.upSellProductsIds = upSellProductsIds
        self.crossSellProductsIds = crossSellProductsIds
        self.dimensionsUnit = dimensionsUnit
        self.width = width
        self.height = height
        self.length = length
        self.discounts = discounts
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case uModel = "u_model"
        case uSku = "u_sku"
        case name
        case description
        case shortDescription = "short_description"
        case price
        case advancedPrice = "advanced_price"
        case costPrice = "cost_price"
        case quantity
        case inventory
        case groupItems = "group_items"
        case uBrandId = "u_brand_id"
        case uBrand = "u_brand"
        case categoriesIds = "categories_ids"
        case storesIds = "stores_ids"
        case url
        case seoUrl = "seo_url"
        case metaTitle = "meta_title"
        case metaKeywords = "meta_keywords"
        case metaDescription = "meta_description"
        case availSale = "avail_sale"
        case availView = "avail_view"
        case isVirtual = "is_virtual"
        case isDownloadable = "is_downloadable"
        case weight
        case weightUnit = "weight_unit"
        case sortOrder = "sort_order"
        case inStock = "in_stock"
        case backorders
        case manageStock = "manage_stock"
        case isStockManaged = "is_stock_managed"
        case onSale = "on_sale"
        case createAt = "create_at"
        case modifiedAt = "modified_at"
        case taxClassId = "tax_class_id"
        case specialPrice = "special_price"
        case tierPrice = "tier_price"
        case groupPrice = "group_price"
        case images
        case productOptions = "product_options"
        case uUpc = "u_upc"
        case uMpn = "u_mpn"
        case uGtin = "u_gtin"
        case uIsbn = "u_isbn"
        case uEan = "u_ean"
        case relatedProductsIds = "related_products_ids"
        case upSellProductsIds = "up_sell_products_ids"
        case crossSellProductsIds = "cross_sell_products_ids"
        case dimensionsUnit = "dimensions_unit"
        case width
        case height
        case length
        case discounts
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(uModel, forKey: .uModel)
        try container.encodeIfPresent(uSku, forKey: .uSku)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(advancedPrice, forKey: .advancedPrice)
        try container.encodeIfPresent(costPrice, forKey: .costPrice)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(inventory, forKey: .inventory)
        try container.encodeIfPresent(groupItems, forKey: .groupItems)
        try container.encodeIfPresent(uBrandId, forKey: .uBrandId)
        try container.encodeIfPresent(uBrand, forKey: .uBrand)
        try container.encodeIfPresent(categoriesIds, forKey: .categoriesIds)
        try container.encodeIfPresent(storesIds, forKey: .storesIds)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(seoUrl, forKey: .seoUrl)
        try container.encodeIfPresent(metaTitle, forKey: .metaTitle)
        try container.encodeIfPresent(metaKeywords, forKey: .metaKeywords)
        try container.encodeIfPresent(metaDescription, forKey: .metaDescription)
        try container.encodeIfPresent(availSale, forKey: .availSale)
        try container.encodeIfPresent(availView, forKey: .availView)
        try container.encodeIfPresent(isVirtual, forKey: .isVirtual)
        try container.encodeIfPresent(isDownloadable, forKey: .isDownloadable)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(weightUnit, forKey: .weightUnit)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(inStock, forKey: .inStock)
        try container.encodeIfPresent(backorders, forKey: .backorders)
        try container.encodeIfPresent(manageStock, forKey: .manageStock)
        try container.encodeIfPresent(isStockManaged, forKey: .isStockManaged)
        try container.encodeIfPresent(onSale, forKey: .onSale)
        try container.encodeIfPresent(createAt, forKey: .createAt)
        try container.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
        try container.encodeIfPresent(taxClassId, forKey: .taxClassId)
        try container.encodeIfPresent(specialPrice, forKey: .specialPrice)
        try container.encodeIfPresent(tierPrice, forKey: .tierPrice)
        try container.encodeIfPresent(groupPrice, forKey: .groupPrice)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(productOptions, forKey: .productOptions)
        try container.encodeIfPresent(uUpc, forKey: .uUpc)
        try container.encodeIfPresent(uMpn, forKey: .uMpn)
        try container.encodeIfPresent(uGtin, forKey: .uGtin)
        try container.encodeIfPresent(uIsbn, forKey: .uIsbn)
        try container.encodeIfPresent(uEan, forKey: .uEan)
        try container.encodeIfPresent(relatedProductsIds, forKey: .relatedProductsIds)
        try container.encodeIfPresent(upSellProductsIds, forKey: .upSellProductsIds)
        try container.encodeIfPresent(crossSellProductsIds, forKey: .crossSellProductsIds)
        try container.encodeIfPresent(dimensionsUnit, forKey: .dimensionsUnit)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(discounts, forKey: .discounts)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Product: Identifiable {}
