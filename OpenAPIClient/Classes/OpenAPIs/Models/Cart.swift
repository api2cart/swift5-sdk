//
// Cart.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Cart: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var url: String?
    public var version: String?
    public var bridgeVersion: String?
    public var dbPrefix: String?
    public var storesInfo: [CartStoreInfo]?
    public var warehouses: [CartWarehouse]?
    public var shippingZones: [CartShippingZone]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(name: String? = nil, url: String? = nil, version: String? = nil, bridgeVersion: String? = nil, dbPrefix: String? = nil, storesInfo: [CartStoreInfo]? = nil, warehouses: [CartWarehouse]? = nil, shippingZones: [CartShippingZone]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.name = name
        self.url = url
        self.version = version
        self.bridgeVersion = bridgeVersion
        self.dbPrefix = dbPrefix
        self.storesInfo = storesInfo
        self.warehouses = warehouses
        self.shippingZones = shippingZones
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case url
        case version
        case bridgeVersion = "bridge_version"
        case dbPrefix = "db_prefix"
        case storesInfo = "stores_info"
        case warehouses
        case shippingZones = "shipping_zones"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(bridgeVersion, forKey: .bridgeVersion)
        try container.encodeIfPresent(dbPrefix, forKey: .dbPrefix)
        try container.encodeIfPresent(storesInfo, forKey: .storesInfo)
        try container.encodeIfPresent(warehouses, forKey: .warehouses)
        try container.encodeIfPresent(shippingZones, forKey: .shippingZones)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

