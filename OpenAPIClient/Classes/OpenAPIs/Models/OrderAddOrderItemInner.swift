//
// OrderAddOrderItemInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderAddOrderItemInner: Codable, JSONEncodable, Hashable {

    /** Defines orders specified by order item id */
    public var orderItemId: String
    /** Defines orders specified by order item name */
    public var orderItemName: String
    /** Defines orders specified by order item model */
    public var orderItemModel: String?
    /** Defines orders specified by order item price */
    public var orderItemPrice: Double
    /** Defines orders specified by order item quantity */
    public var orderItemQuantity: Int
    /** Defines orders specified by order item weight */
    public var orderItemWeight: Double?
    /** Ordered product variant. Where x is order item ID */
    public var orderItemVariantId: String?
    /** Percentage of tax for product order */
    public var orderItemTax: Double? = 0
    /** Id of the tax class of product. */
    public var orderItemTaxClass: String?
    /** Defines if item price includes tax */
    public var orderItemPriceIncludesTax: Bool? = false
    /** Index of the parent grouped/bundle product */
    public var orderItemParent: Int?
    /** Option name of the parent grouped/bundle product */
    public var orderItemParentOptionName: String?
    /** Indicates whether subitems of the grouped/bundle product can be refunded separately */
    public var orderItemAllowRefundItemsSeparately: Bool?
    /** Indicates whether subitems of the grouped/bundle product can be shipped separately */
    public var orderItemAllowShipItemsSeparately: Bool?
    public var orderItemOption: [OrderAddOrderItemInnerOrderItemOptionInner]?
    public var orderItemProperty: [OrderAddOrderItemInnerOrderItemPropertyInner]?

    public init(orderItemId: String, orderItemName: String, orderItemModel: String? = nil, orderItemPrice: Double, orderItemQuantity: Int, orderItemWeight: Double? = nil, orderItemVariantId: String? = nil, orderItemTax: Double? = 0, orderItemTaxClass: String? = nil, orderItemPriceIncludesTax: Bool? = false, orderItemParent: Int? = nil, orderItemParentOptionName: String? = nil, orderItemAllowRefundItemsSeparately: Bool? = nil, orderItemAllowShipItemsSeparately: Bool? = nil, orderItemOption: [OrderAddOrderItemInnerOrderItemOptionInner]? = nil, orderItemProperty: [OrderAddOrderItemInnerOrderItemPropertyInner]? = nil) {
        self.orderItemId = orderItemId
        self.orderItemName = orderItemName
        self.orderItemModel = orderItemModel
        self.orderItemPrice = orderItemPrice
        self.orderItemQuantity = orderItemQuantity
        self.orderItemWeight = orderItemWeight
        self.orderItemVariantId = orderItemVariantId
        self.orderItemTax = orderItemTax
        self.orderItemTaxClass = orderItemTaxClass
        self.orderItemPriceIncludesTax = orderItemPriceIncludesTax
        self.orderItemParent = orderItemParent
        self.orderItemParentOptionName = orderItemParentOptionName
        self.orderItemAllowRefundItemsSeparately = orderItemAllowRefundItemsSeparately
        self.orderItemAllowShipItemsSeparately = orderItemAllowShipItemsSeparately
        self.orderItemOption = orderItemOption
        self.orderItemProperty = orderItemProperty
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderItemId = "order_item_id"
        case orderItemName = "order_item_name"
        case orderItemModel = "order_item_model"
        case orderItemPrice = "order_item_price"
        case orderItemQuantity = "order_item_quantity"
        case orderItemWeight = "order_item_weight"
        case orderItemVariantId = "order_item_variant_id"
        case orderItemTax = "order_item_tax"
        case orderItemTaxClass = "order_item_tax_class"
        case orderItemPriceIncludesTax = "order_item_price_includes_tax"
        case orderItemParent = "order_item_parent"
        case orderItemParentOptionName = "order_item_parent_option_name"
        case orderItemAllowRefundItemsSeparately = "order_item_allow_refund_items_separately"
        case orderItemAllowShipItemsSeparately = "order_item_allow_ship_items_separately"
        case orderItemOption = "order_item_option"
        case orderItemProperty = "order_item_property"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(orderItemId, forKey: .orderItemId)
        try container.encode(orderItemName, forKey: .orderItemName)
        try container.encodeIfPresent(orderItemModel, forKey: .orderItemModel)
        try container.encode(orderItemPrice, forKey: .orderItemPrice)
        try container.encode(orderItemQuantity, forKey: .orderItemQuantity)
        try container.encodeIfPresent(orderItemWeight, forKey: .orderItemWeight)
        try container.encodeIfPresent(orderItemVariantId, forKey: .orderItemVariantId)
        try container.encodeIfPresent(orderItemTax, forKey: .orderItemTax)
        try container.encodeIfPresent(orderItemTaxClass, forKey: .orderItemTaxClass)
        try container.encodeIfPresent(orderItemPriceIncludesTax, forKey: .orderItemPriceIncludesTax)
        try container.encodeIfPresent(orderItemParent, forKey: .orderItemParent)
        try container.encodeIfPresent(orderItemParentOptionName, forKey: .orderItemParentOptionName)
        try container.encodeIfPresent(orderItemAllowRefundItemsSeparately, forKey: .orderItemAllowRefundItemsSeparately)
        try container.encodeIfPresent(orderItemAllowShipItemsSeparately, forKey: .orderItemAllowShipItemsSeparately)
        try container.encodeIfPresent(orderItemOption, forKey: .orderItemOption)
        try container.encodeIfPresent(orderItemProperty, forKey: .orderItemProperty)
    }
}

