//
// OrderCalculateShippingRate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderCalculateShippingRate: Codable, JSONEncodable, Hashable {

    public var code: String?
    public var name: String?
    public var price: Double?
    public var priceIncTax: Double?
    public var tax: Double?
    public var taxRate: Double?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(code: String? = nil, name: String? = nil, price: Double? = nil, priceIncTax: Double? = nil, tax: Double? = nil, taxRate: Double? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.code = code
        self.name = name
        self.price = price
        self.priceIncTax = priceIncTax
        self.tax = tax
        self.taxRate = taxRate
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case name
        case price
        case priceIncTax = "price_inc_tax"
        case tax
        case taxRate = "tax_rate"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(priceIncTax, forKey: .priceIncTax)
        try container.encodeIfPresent(tax, forKey: .tax)
        try container.encodeIfPresent(taxRate, forKey: .taxRate)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

