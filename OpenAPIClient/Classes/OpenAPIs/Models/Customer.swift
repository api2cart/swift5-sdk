//
// Customer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Customer: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var email: String?
    public var firstName: String?
    public var lastName: String?
    public var phone: String?
    public var createdTime: A2CDateTime?
    public var modifiedTime: A2CDateTime?
    public var group: [CustomerGroup]?
    public var login: String?
    public var lastLogin: A2CDateTime?
    public var birthDay: A2CDateTime?
    public var status: String?
    public var isGuest: Bool?
    public var newsLetterSubscription: Bool?
    public var consents: [CustomerConsent]?
    public var gender: String?
    public var storesIds: [String]?
    public var website: String?
    public var fax: String?
    public var company: String?
    public var ipAddress: String?
    public var addressBook: [CustomerAddress]?
    public var langId: String?
    public var ordersCount: Int?
    public var lastOrderId: String?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, email: String? = nil, firstName: String? = nil, lastName: String? = nil, phone: String? = nil, createdTime: A2CDateTime? = nil, modifiedTime: A2CDateTime? = nil, group: [CustomerGroup]? = nil, login: String? = nil, lastLogin: A2CDateTime? = nil, birthDay: A2CDateTime? = nil, status: String? = nil, isGuest: Bool? = nil, newsLetterSubscription: Bool? = nil, consents: [CustomerConsent]? = nil, gender: String? = nil, storesIds: [String]? = nil, website: String? = nil, fax: String? = nil, company: String? = nil, ipAddress: String? = nil, addressBook: [CustomerAddress]? = nil, langId: String? = nil, ordersCount: Int? = nil, lastOrderId: String? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.phone = phone
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime
        self.group = group
        self.login = login
        self.lastLogin = lastLogin
        self.birthDay = birthDay
        self.status = status
        self.isGuest = isGuest
        self.newsLetterSubscription = newsLetterSubscription
        self.consents = consents
        self.gender = gender
        self.storesIds = storesIds
        self.website = website
        self.fax = fax
        self.company = company
        self.ipAddress = ipAddress
        self.addressBook = addressBook
        self.langId = langId
        self.ordersCount = ordersCount
        self.lastOrderId = lastOrderId
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case firstName = "first_name"
        case lastName = "last_name"
        case phone
        case createdTime = "created_time"
        case modifiedTime = "modified_time"
        case group
        case login
        case lastLogin = "last_login"
        case birthDay = "birth_day"
        case status
        case isGuest = "is_guest"
        case newsLetterSubscription = "news_letter_subscription"
        case consents
        case gender
        case storesIds = "stores_ids"
        case website
        case fax
        case company
        case ipAddress = "ip_address"
        case addressBook = "address_book"
        case langId = "lang_id"
        case ordersCount = "orders_count"
        case lastOrderId = "last_order_id"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(modifiedTime, forKey: .modifiedTime)
        try container.encodeIfPresent(group, forKey: .group)
        try container.encodeIfPresent(login, forKey: .login)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(birthDay, forKey: .birthDay)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(isGuest, forKey: .isGuest)
        try container.encodeIfPresent(newsLetterSubscription, forKey: .newsLetterSubscription)
        try container.encodeIfPresent(consents, forKey: .consents)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(storesIds, forKey: .storesIds)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encodeIfPresent(fax, forKey: .fax)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(addressBook, forKey: .addressBook)
        try container.encodeIfPresent(langId, forKey: .langId)
        try container.encodeIfPresent(ordersCount, forKey: .ordersCount)
        try container.encodeIfPresent(lastOrderId, forKey: .lastOrderId)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Customer: Identifiable {}
