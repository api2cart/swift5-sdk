//
// ProductVariantAdd.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductVariantAdd: Codable, JSONEncodable, Hashable {

    /** Defines product's id where the variant has to be added */
    public var productId: String?
    /** Defines variant's attributes list */
    public var attributes: [ProductVariantAddAttributesInner]?
    /** Defines variant's name that has to be added */
    public var name: String?
    /** Specifies variant's model that has to be added */
    public var model: String
    /** Specifies variant's description */
    public var description: String?
    /** Defines short description */
    public var shortDescription: String?
    /** Specifies the set of visible/invisible product's variants for users */
    public var availableForView: Bool? = true
    /** Specifies the set of visible/invisible product's variants for sale */
    public var availableForSale: Bool? = true
    /** Defines whether the product is virtual */
    public var isVirtual: Bool? = false
    /** Defines as a default variant */
    public var isDefault: Bool?
    /** Add variants specified by store id */
    public var storeId: String?
    /** Assign variant to the stores that is specified by comma-separated stores' id */
    public var storesIds: String?
    /** Language id */
    public var langId: String?
    /** Defines new product's variant price */
    public var price: Double?
    /** Defines product's old price */
    public var oldPrice: Double?
    /** Defines new product's cost price */
    public var costPrice: Double?
    /** Specifies variant's model that has to be added */
    public var specialPrice: Double?
    /** Defines the date of special price creation */
    public var spriceCreate: String?
    /** Defines the date of special price modification */
    public var spriceModified: String?
    /** Defines the term of special price offer duration */
    public var spriceExpire: String?
    /** Defines product's tier prices */
    public var tierPrices: [ProductAddTierPricesInner]?
    /** Defines product variant's quantity that has to be added */
    public var quantity: Double? = 0
    /** This parameter is used for selecting a warehouse where you need to set/modify a product quantity. */
    public var warehouseId: String?
    /** Set stock status */
    public var inStock: Bool?
    /** Set backorder status */
    public var backorderStatus: String?
    /** Defines inventory tracking for product variant */
    public var manageStock: Bool?
    /** Specify the quantity threshold below which the product is considered low in stock */
    public var lowStockThreshold: Double?
    /** Weight */
    public var weight: Double? = 0
    /** Defines product's width */
    public var width: Double?
    /** Defines product's height */
    public var height: Double?
    /** Defines product's length */
    public var length: Double?
    /** Weight Unit */
    public var weightUnit: String?
    /** Defines variant's sku that has to be added */
    public var sku: String?
    /** A barcode is a unique code composed of numbers used as a product identifier. */
    public var barcode: String?
    /** Global Trade Item Number. An GTIN is an identifier for trade items. */
    public var gtin: String?
    /** Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. */
    public var upc: String?
    /** European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. */
    public var ean: String?
    /** Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. */
    public var mpn: String?
    /** International Standard Book Number. An ISBN is a unique identifier for books. */
    public var isbn: String?
    /** Specifies the product variant's manufacturer */
    public var manufacturer: String?
    /** Defines the date of entity creation */
    public var createdAt: String?
    /** Defines unique meta title for each entity */
    public var metaTitle: String?
    /** Defines unique meta keywords for each entity */
    public var metaKeywords: String?
    /** Defines unique meta description of a entity */
    public var metaDescription: String?
    /** Defines unique product variant's URL */
    public var url: String?
    /** Defines tax classes where entity has to be added */
    public var taxClassId: String?
    /** Specifies whether a tax is charged */
    public var taxable: Bool? = true
    /** Specifies fixed cost shipping price */
    public var fixedCostShippingPrice: Double?
    /** Specifies variant's free shipping flag that has to be added */
    public var isFreeShipping: Bool?
    /** The country where the inventory item was made */
    public var countryOfOrigin: String?
    /** Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes */
    public var harmonizedSystemCode: String?
    /** String containing the JSON representation of the supplied data */
    public var marketplaceItemProperties: String?
    /** Is cache clear required */
    public var clearCache: Bool? = true

    public init(productId: String? = nil, attributes: [ProductVariantAddAttributesInner]? = nil, name: String? = nil, model: String, description: String? = nil, shortDescription: String? = nil, availableForView: Bool? = true, availableForSale: Bool? = true, isVirtual: Bool? = false, isDefault: Bool? = nil, storeId: String? = nil, storesIds: String? = nil, langId: String? = nil, price: Double? = nil, oldPrice: Double? = nil, costPrice: Double? = nil, specialPrice: Double? = nil, spriceCreate: String? = nil, spriceModified: String? = nil, spriceExpire: String? = nil, tierPrices: [ProductAddTierPricesInner]? = nil, quantity: Double? = 0, warehouseId: String? = nil, inStock: Bool? = nil, backorderStatus: String? = nil, manageStock: Bool? = nil, lowStockThreshold: Double? = nil, weight: Double? = 0, width: Double? = nil, height: Double? = nil, length: Double? = nil, weightUnit: String? = nil, sku: String? = nil, barcode: String? = nil, gtin: String? = nil, upc: String? = nil, ean: String? = nil, mpn: String? = nil, isbn: String? = nil, manufacturer: String? = nil, createdAt: String? = nil, metaTitle: String? = nil, metaKeywords: String? = nil, metaDescription: String? = nil, url: String? = nil, taxClassId: String? = nil, taxable: Bool? = true, fixedCostShippingPrice: Double? = nil, isFreeShipping: Bool? = nil, countryOfOrigin: String? = nil, harmonizedSystemCode: String? = nil, marketplaceItemProperties: String? = nil, clearCache: Bool? = true) {
        self.productId = productId
        self.attributes = attributes
        self.name = name
        self.model = model
        self.description = description
        self.shortDescription = shortDescription
        self.availableForView = availableForView
        self.availableForSale = availableForSale
        self.isVirtual = isVirtual
        self.isDefault = isDefault
        self.storeId = storeId
        self.storesIds = storesIds
        self.langId = langId
        self.price = price
        self.oldPrice = oldPrice
        self.costPrice = costPrice
        self.specialPrice = specialPrice
        self.spriceCreate = spriceCreate
        self.spriceModified = spriceModified
        self.spriceExpire = spriceExpire
        self.tierPrices = tierPrices
        self.quantity = quantity
        self.warehouseId = warehouseId
        self.inStock = inStock
        self.backorderStatus = backorderStatus
        self.manageStock = manageStock
        self.lowStockThreshold = lowStockThreshold
        self.weight = weight
        self.width = width
        self.height = height
        self.length = length
        self.weightUnit = weightUnit
        self.sku = sku
        self.barcode = barcode
        self.gtin = gtin
        self.upc = upc
        self.ean = ean
        self.mpn = mpn
        self.isbn = isbn
        self.manufacturer = manufacturer
        self.createdAt = createdAt
        self.metaTitle = metaTitle
        self.metaKeywords = metaKeywords
        self.metaDescription = metaDescription
        self.url = url
        self.taxClassId = taxClassId
        self.taxable = taxable
        self.fixedCostShippingPrice = fixedCostShippingPrice
        self.isFreeShipping = isFreeShipping
        self.countryOfOrigin = countryOfOrigin
        self.harmonizedSystemCode = harmonizedSystemCode
        self.marketplaceItemProperties = marketplaceItemProperties
        self.clearCache = clearCache
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case productId = "product_id"
        case attributes
        case name
        case model
        case description
        case shortDescription = "short_description"
        case availableForView = "available_for_view"
        case availableForSale = "available_for_sale"
        case isVirtual = "is_virtual"
        case isDefault = "is_default"
        case storeId = "store_id"
        case storesIds = "stores_ids"
        case langId = "lang_id"
        case price
        case oldPrice = "old_price"
        case costPrice = "cost_price"
        case specialPrice = "special_price"
        case spriceCreate = "sprice_create"
        case spriceModified = "sprice_modified"
        case spriceExpire = "sprice_expire"
        case tierPrices = "tier_prices"
        case quantity
        case warehouseId = "warehouse_id"
        case inStock = "in_stock"
        case backorderStatus = "backorder_status"
        case manageStock = "manage_stock"
        case lowStockThreshold = "low_stock_threshold"
        case weight
        case width
        case height
        case length
        case weightUnit = "weight_unit"
        case sku
        case barcode
        case gtin
        case upc
        case ean
        case mpn
        case isbn
        case manufacturer
        case createdAt = "created_at"
        case metaTitle = "meta_title"
        case metaKeywords = "meta_keywords"
        case metaDescription = "meta_description"
        case url
        case taxClassId = "tax_class_id"
        case taxable
        case fixedCostShippingPrice = "fixed_cost_shipping_price"
        case isFreeShipping = "is_free_shipping"
        case countryOfOrigin = "country_of_origin"
        case harmonizedSystemCode = "harmonized_system_code"
        case marketplaceItemProperties = "marketplace_item_properties"
        case clearCache = "clear_cache"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(model, forKey: .model)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(availableForView, forKey: .availableForView)
        try container.encodeIfPresent(availableForSale, forKey: .availableForSale)
        try container.encodeIfPresent(isVirtual, forKey: .isVirtual)
        try container.encodeIfPresent(isDefault, forKey: .isDefault)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(storesIds, forKey: .storesIds)
        try container.encodeIfPresent(langId, forKey: .langId)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(oldPrice, forKey: .oldPrice)
        try container.encodeIfPresent(costPrice, forKey: .costPrice)
        try container.encodeIfPresent(specialPrice, forKey: .specialPrice)
        try container.encodeIfPresent(spriceCreate, forKey: .spriceCreate)
        try container.encodeIfPresent(spriceModified, forKey: .spriceModified)
        try container.encodeIfPresent(spriceExpire, forKey: .spriceExpire)
        try container.encodeIfPresent(tierPrices, forKey: .tierPrices)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(warehouseId, forKey: .warehouseId)
        try container.encodeIfPresent(inStock, forKey: .inStock)
        try container.encodeIfPresent(backorderStatus, forKey: .backorderStatus)
        try container.encodeIfPresent(manageStock, forKey: .manageStock)
        try container.encodeIfPresent(lowStockThreshold, forKey: .lowStockThreshold)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(weightUnit, forKey: .weightUnit)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(barcode, forKey: .barcode)
        try container.encodeIfPresent(gtin, forKey: .gtin)
        try container.encodeIfPresent(upc, forKey: .upc)
        try container.encodeIfPresent(ean, forKey: .ean)
        try container.encodeIfPresent(mpn, forKey: .mpn)
        try container.encodeIfPresent(isbn, forKey: .isbn)
        try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(metaTitle, forKey: .metaTitle)
        try container.encodeIfPresent(metaKeywords, forKey: .metaKeywords)
        try container.encodeIfPresent(metaDescription, forKey: .metaDescription)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(taxClassId, forKey: .taxClassId)
        try container.encodeIfPresent(taxable, forKey: .taxable)
        try container.encodeIfPresent(fixedCostShippingPrice, forKey: .fixedCostShippingPrice)
        try container.encodeIfPresent(isFreeShipping, forKey: .isFreeShipping)
        try container.encodeIfPresent(countryOfOrigin, forKey: .countryOfOrigin)
        try container.encodeIfPresent(harmonizedSystemCode, forKey: .harmonizedSystemCode)
        try container.encodeIfPresent(marketplaceItemProperties, forKey: .marketplaceItemProperties)
        try container.encodeIfPresent(clearCache, forKey: .clearCache)
    }
}

