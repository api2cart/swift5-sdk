//
// ProductAddBatchPayloadInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductAddBatchPayloadInner: Codable, JSONEncodable, Hashable {

    public static let categoriesIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let relatedProductsIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let upSellProductsIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let crossSellProductsIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let storesIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let metaKeywordsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let searchKeywordsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let imagesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let tagsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let filesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public var name: String?
    public var description: String?
    public var shortDescription: String?
    public var sku: String?
    public var model: String?
    public var asin: String?
    public var upc: String?
    public var ean: String?
    public var gtin: String?
    public var mpn: String?
    public var isbn: String?
    public var barcode: String?
    public var price: Double?
    public var oldPrice: Double?
    public var costPrice: Double?
    public var specialPrice: Double?
    public var spriceCreate: String?
    public var spriceExpire: String?
    public var availFrom: String?
    public var advancedPrices: [ProductAddBatchPayloadInnerAdvancedPricesInner]?
    public var fixedCostShippingPrice: Double?
    public var buyitnowPrice: Double?
    public var reservePrice: Double?
    public var bestOffer: Double?
    public var quantity: Double?
    public var manageStock: Bool?
    public var productType: String?
    public var marketplaceItemProperties: AnyCodable?
    public var specifics: AnyCodable?
    public var isFreeShipping: Bool?
    public var taxable: Bool?
    public var status: String?
    public var condition: String?
    public var conditionDescription: String?
    public var visible: String?
    public var availableForView: Bool?
    public var availableForSale: Bool?
    public var isVirtual: Bool?
    public var inStock: Bool?
    public var type: String?
    public var listingType: String?
    public var listingDuration: String?
    public var downloadable: Bool?
    public var weight: Double?
    public var length: Double?
    public var width: Double?
    public var height: Double?
    public var weightUnit: String?
    public var dimensionsUnit: String?
    public var storeId: String?
    public var langId: String?
    public var categoryId: String?
    public var warehouseId: String?
    public var categoriesIds: [String]?
    public var relatedProductsIds: [String]?
    public var upSellProductsIds: [String]?
    public var crossSellProductsIds: [String]?
    public var storesIds: [String]?
    public var taxClassId: String?
    public var salesTax: ProductAddBatchPayloadInnerSalesTax?
    public var metaTitle: String?
    public var metaDescription: String?
    public var metaKeywords: [String]?
    public var searchKeywords: [String]?
    public var harmonizedSystemCode: String?
    public var url: String?
    public var seoUrl: String?
    public var externalProductLink: String?
    public var manufacturer: String?
    public var manufacturerId: String?
    public var backorderStatus: String?
    public var images: [ProductAddBatchPayloadInnerImagesInner]?
    public var tags: [String]?
    public var files: [ProductAddFilesInner]?

    public init(name: String? = nil, description: String? = nil, shortDescription: String? = nil, sku: String? = nil, model: String? = nil, asin: String? = nil, upc: String? = nil, ean: String? = nil, gtin: String? = nil, mpn: String? = nil, isbn: String? = nil, barcode: String? = nil, price: Double? = nil, oldPrice: Double? = nil, costPrice: Double? = nil, specialPrice: Double? = nil, spriceCreate: String? = nil, spriceExpire: String? = nil, availFrom: String? = nil, advancedPrices: [ProductAddBatchPayloadInnerAdvancedPricesInner]? = nil, fixedCostShippingPrice: Double? = nil, buyitnowPrice: Double? = nil, reservePrice: Double? = nil, bestOffer: Double? = nil, quantity: Double? = nil, manageStock: Bool? = nil, productType: String? = nil, marketplaceItemProperties: AnyCodable? = nil, specifics: AnyCodable? = nil, isFreeShipping: Bool? = nil, taxable: Bool? = nil, status: String? = nil, condition: String? = nil, conditionDescription: String? = nil, visible: String? = nil, availableForView: Bool? = nil, availableForSale: Bool? = nil, isVirtual: Bool? = nil, inStock: Bool? = nil, type: String? = nil, listingType: String? = nil, listingDuration: String? = nil, downloadable: Bool? = nil, weight: Double? = nil, length: Double? = nil, width: Double? = nil, height: Double? = nil, weightUnit: String? = nil, dimensionsUnit: String? = nil, storeId: String? = nil, langId: String? = nil, categoryId: String? = nil, warehouseId: String? = nil, categoriesIds: [String]? = nil, relatedProductsIds: [String]? = nil, upSellProductsIds: [String]? = nil, crossSellProductsIds: [String]? = nil, storesIds: [String]? = nil, taxClassId: String? = nil, salesTax: ProductAddBatchPayloadInnerSalesTax? = nil, metaTitle: String? = nil, metaDescription: String? = nil, metaKeywords: [String]? = nil, searchKeywords: [String]? = nil, harmonizedSystemCode: String? = nil, url: String? = nil, seoUrl: String? = nil, externalProductLink: String? = nil, manufacturer: String? = nil, manufacturerId: String? = nil, backorderStatus: String? = nil, images: [ProductAddBatchPayloadInnerImagesInner]? = nil, tags: [String]? = nil, files: [ProductAddFilesInner]? = nil) {
        self.name = name
        self.description = description
        self.shortDescription = shortDescription
        self.sku = sku
        self.model = model
        self.asin = asin
        self.upc = upc
        self.ean = ean
        self.gtin = gtin
        self.mpn = mpn
        self.isbn = isbn
        self.barcode = barcode
        self.price = price
        self.oldPrice = oldPrice
        self.costPrice = costPrice
        self.specialPrice = specialPrice
        self.spriceCreate = spriceCreate
        self.spriceExpire = spriceExpire
        self.availFrom = availFrom
        self.advancedPrices = advancedPrices
        self.fixedCostShippingPrice = fixedCostShippingPrice
        self.buyitnowPrice = buyitnowPrice
        self.reservePrice = reservePrice
        self.bestOffer = bestOffer
        self.quantity = quantity
        self.manageStock = manageStock
        self.productType = productType
        self.marketplaceItemProperties = marketplaceItemProperties
        self.specifics = specifics
        self.isFreeShipping = isFreeShipping
        self.taxable = taxable
        self.status = status
        self.condition = condition
        self.conditionDescription = conditionDescription
        self.visible = visible
        self.availableForView = availableForView
        self.availableForSale = availableForSale
        self.isVirtual = isVirtual
        self.inStock = inStock
        self.type = type
        self.listingType = listingType
        self.listingDuration = listingDuration
        self.downloadable = downloadable
        self.weight = weight
        self.length = length
        self.width = width
        self.height = height
        self.weightUnit = weightUnit
        self.dimensionsUnit = dimensionsUnit
        self.storeId = storeId
        self.langId = langId
        self.categoryId = categoryId
        self.warehouseId = warehouseId
        self.categoriesIds = categoriesIds
        self.relatedProductsIds = relatedProductsIds
        self.upSellProductsIds = upSellProductsIds
        self.crossSellProductsIds = crossSellProductsIds
        self.storesIds = storesIds
        self.taxClassId = taxClassId
        self.salesTax = salesTax
        self.metaTitle = metaTitle
        self.metaDescription = metaDescription
        self.metaKeywords = metaKeywords
        self.searchKeywords = searchKeywords
        self.harmonizedSystemCode = harmonizedSystemCode
        self.url = url
        self.seoUrl = seoUrl
        self.externalProductLink = externalProductLink
        self.manufacturer = manufacturer
        self.manufacturerId = manufacturerId
        self.backorderStatus = backorderStatus
        self.images = images
        self.tags = tags
        self.files = files
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case shortDescription = "short_description"
        case sku
        case model
        case asin
        case upc
        case ean
        case gtin
        case mpn
        case isbn
        case barcode
        case price
        case oldPrice = "old_price"
        case costPrice = "cost_price"
        case specialPrice = "special_price"
        case spriceCreate = "sprice_create"
        case spriceExpire = "sprice_expire"
        case availFrom = "avail_from"
        case advancedPrices = "advanced_prices"
        case fixedCostShippingPrice = "fixed_cost_shipping_price"
        case buyitnowPrice = "buyitnow_price"
        case reservePrice = "reserve_price"
        case bestOffer = "best_offer"
        case quantity
        case manageStock = "manage_stock"
        case productType = "product_type"
        case marketplaceItemProperties = "marketplace_item_properties"
        case specifics
        case isFreeShipping = "is_free_shipping"
        case taxable
        case status
        case condition
        case conditionDescription = "condition_description"
        case visible
        case availableForView = "available_for_view"
        case availableForSale = "available_for_sale"
        case isVirtual = "is_virtual"
        case inStock = "in_stock"
        case type
        case listingType = "listing_type"
        case listingDuration = "listing_duration"
        case downloadable
        case weight
        case length
        case width
        case height
        case weightUnit = "weight_unit"
        case dimensionsUnit = "dimensions_unit"
        case storeId = "store_id"
        case langId = "lang_id"
        case categoryId = "category_id"
        case warehouseId = "warehouse_id"
        case categoriesIds = "categories_ids"
        case relatedProductsIds = "related_products_ids"
        case upSellProductsIds = "up_sell_products_ids"
        case crossSellProductsIds = "cross_sell_products_ids"
        case storesIds = "stores_ids"
        case taxClassId = "tax_class_id"
        case salesTax = "sales_tax"
        case metaTitle = "meta_title"
        case metaDescription = "meta_description"
        case metaKeywords = "meta_keywords"
        case searchKeywords = "search_keywords"
        case harmonizedSystemCode = "harmonized_system_code"
        case url
        case seoUrl = "seo_url"
        case externalProductLink = "external_product_link"
        case manufacturer
        case manufacturerId = "manufacturer_id"
        case backorderStatus = "backorder_status"
        case images
        case tags
        case files
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(asin, forKey: .asin)
        try container.encodeIfPresent(upc, forKey: .upc)
        try container.encodeIfPresent(ean, forKey: .ean)
        try container.encodeIfPresent(gtin, forKey: .gtin)
        try container.encodeIfPresent(mpn, forKey: .mpn)
        try container.encodeIfPresent(isbn, forKey: .isbn)
        try container.encodeIfPresent(barcode, forKey: .barcode)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(oldPrice, forKey: .oldPrice)
        try container.encodeIfPresent(costPrice, forKey: .costPrice)
        try container.encodeIfPresent(specialPrice, forKey: .specialPrice)
        try container.encodeIfPresent(spriceCreate, forKey: .spriceCreate)
        try container.encodeIfPresent(spriceExpire, forKey: .spriceExpire)
        try container.encodeIfPresent(availFrom, forKey: .availFrom)
        try container.encodeIfPresent(advancedPrices, forKey: .advancedPrices)
        try container.encodeIfPresent(fixedCostShippingPrice, forKey: .fixedCostShippingPrice)
        try container.encodeIfPresent(buyitnowPrice, forKey: .buyitnowPrice)
        try container.encodeIfPresent(reservePrice, forKey: .reservePrice)
        try container.encodeIfPresent(bestOffer, forKey: .bestOffer)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(manageStock, forKey: .manageStock)
        try container.encodeIfPresent(productType, forKey: .productType)
        try container.encodeIfPresent(marketplaceItemProperties, forKey: .marketplaceItemProperties)
        try container.encodeIfPresent(specifics, forKey: .specifics)
        try container.encodeIfPresent(isFreeShipping, forKey: .isFreeShipping)
        try container.encodeIfPresent(taxable, forKey: .taxable)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(condition, forKey: .condition)
        try container.encodeIfPresent(conditionDescription, forKey: .conditionDescription)
        try container.encodeIfPresent(visible, forKey: .visible)
        try container.encodeIfPresent(availableForView, forKey: .availableForView)
        try container.encodeIfPresent(availableForSale, forKey: .availableForSale)
        try container.encodeIfPresent(isVirtual, forKey: .isVirtual)
        try container.encodeIfPresent(inStock, forKey: .inStock)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(listingType, forKey: .listingType)
        try container.encodeIfPresent(listingDuration, forKey: .listingDuration)
        try container.encodeIfPresent(downloadable, forKey: .downloadable)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(weightUnit, forKey: .weightUnit)
        try container.encodeIfPresent(dimensionsUnit, forKey: .dimensionsUnit)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(langId, forKey: .langId)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(warehouseId, forKey: .warehouseId)
        try container.encodeIfPresent(categoriesIds, forKey: .categoriesIds)
        try container.encodeIfPresent(relatedProductsIds, forKey: .relatedProductsIds)
        try container.encodeIfPresent(upSellProductsIds, forKey: .upSellProductsIds)
        try container.encodeIfPresent(crossSellProductsIds, forKey: .crossSellProductsIds)
        try container.encodeIfPresent(storesIds, forKey: .storesIds)
        try container.encodeIfPresent(taxClassId, forKey: .taxClassId)
        try container.encodeIfPresent(salesTax, forKey: .salesTax)
        try container.encodeIfPresent(metaTitle, forKey: .metaTitle)
        try container.encodeIfPresent(metaDescription, forKey: .metaDescription)
        try container.encodeIfPresent(metaKeywords, forKey: .metaKeywords)
        try container.encodeIfPresent(searchKeywords, forKey: .searchKeywords)
        try container.encodeIfPresent(harmonizedSystemCode, forKey: .harmonizedSystemCode)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(seoUrl, forKey: .seoUrl)
        try container.encodeIfPresent(externalProductLink, forKey: .externalProductLink)
        try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try container.encodeIfPresent(manufacturerId, forKey: .manufacturerId)
        try container.encodeIfPresent(backorderStatus, forKey: .backorderStatus)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(files, forKey: .files)
    }
}

