//
// ProductAddSpecificsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductAddSpecificsInner: Codable, JSONEncodable, Hashable {

    public static let valuesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let groupProductsDetailsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public var name: String?
    public var value: String?
    public var values: [String]?
    public var usedForVariations: Bool? = false
    public var scaleId: Int?
    public var inputValue: String?
    public var foodDetails: ProductAddSpecificsInnerFoodDetails?
    public var groupProductsDetails: [ProductAddSpecificsInnerGroupProductsDetailsInner]?
    public var bookingDetails: ProductAddSpecificsInnerBookingDetails?

    public init(name: String? = nil, value: String? = nil, values: [String]? = nil, usedForVariations: Bool? = false, scaleId: Int? = nil, inputValue: String? = nil, foodDetails: ProductAddSpecificsInnerFoodDetails? = nil, groupProductsDetails: [ProductAddSpecificsInnerGroupProductsDetailsInner]? = nil, bookingDetails: ProductAddSpecificsInnerBookingDetails? = nil) {
        self.name = name
        self.value = value
        self.values = values
        self.usedForVariations = usedForVariations
        self.scaleId = scaleId
        self.inputValue = inputValue
        self.foodDetails = foodDetails
        self.groupProductsDetails = groupProductsDetails
        self.bookingDetails = bookingDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case value
        case values
        case usedForVariations = "used_for_variations"
        case scaleId = "scale_id"
        case inputValue = "input_value"
        case foodDetails = "food_details"
        case groupProductsDetails = "group_products_details"
        case bookingDetails = "booking_details"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(values, forKey: .values)
        try container.encodeIfPresent(usedForVariations, forKey: .usedForVariations)
        try container.encodeIfPresent(scaleId, forKey: .scaleId)
        try container.encodeIfPresent(inputValue, forKey: .inputValue)
        try container.encodeIfPresent(foodDetails, forKey: .foodDetails)
        try container.encodeIfPresent(groupProductsDetails, forKey: .groupProductsDetails)
        try container.encodeIfPresent(bookingDetails, forKey: .bookingDetails)
    }
}

