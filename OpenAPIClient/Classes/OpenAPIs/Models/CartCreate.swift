//
// CartCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CartCreate: Codable, JSONEncodable, Hashable {

    public enum CartId: String, Codable, CaseIterable {
        case _3dCart = "3DCart"
        case _3dCartApi = "3DCartApi"
        case aceShop = "AceShop"
        case amazonSP = "AmazonSP"
        case aspDotNetStorefront = "AspDotNetStorefront"
        case bigCartel = "BigCartel"
        case bigcommerceApi = "BigcommerceApi"
        case bol = "Bol"
        case commerceHQ = "CommerceHQ"
        case creloaded = "Creloaded"
        case cscart = "Cscart"
        case cubecart = "Cubecart"
        case demandware = "Demandware"
        case ebay = "EBay"
        case ecwid = "Ecwid"
        case etsyAPIv3 = "EtsyAPIv3"
        case flipkart = "Flipkart"
        case gambio = "Gambio"
        case hybris = "Hybris"
        case jooCart = "JooCart"
        case lazada = "Lazada"
        case lightSpeed = "LightSpeed"
        case magento1212 = "Magento1212"
        case magento2Api = "Magento2Api"
        case mercadoLibre = "MercadoLibre"
        case mijoShop = "MijoShop"
        case miva = "Miva"
        case neto = "Neto"
        case opencart14 = "Opencart14"
        case oscmax2 = "Oscmax2"
        case oscommerce22ms2 = "Oscommerce22ms2"
        case otto = "Otto"
        case oxid = "Oxid"
        case pinnacle = "Pinnacle"
        case prestashop = "Prestashop"
        case prestashopApi = "PrestashopApi"
        case sspremium = "SSPremium"
        case salla = "Salla"
        case shopify = "Shopify"
        case shopee = "Shopee"
        case shoplazza = "Shoplazza"
        case shopline = "Shopline"
        case shopware = "Shopware"
        case shopwareApi = "ShopwareApi"
        case square = "Square"
        case squarespace = "Squarespace"
        case temu = "Temu"
        case tiendanube = "Tiendanube"
        case tikTokShop = "TikTokShop"
        case tomatocart = "Tomatocart"
        case ubercart = "Ubercart"
        case virtuemart = "Virtuemart"
        case volusion = "Volusion"
        case wpecommerce = "WPecommerce"
        case walmart = "Walmart"
        case webAsyst = "WebAsyst"
        case wix = "Wix"
        case woocommerce = "Woocommerce"
        case woocommerceApi = "WoocommerceApi"
        case xcart = "Xcart"
        case xtcommerce = "Xtcommerce"
        case xtcommerceVeyton = "XtcommerceVeyton"
        case zencart137 = "Zencart137"
        case zid = "Zid"
        case zoey = "Zoey"
        case zoho = "Zoho"
    }
    public static let hybrisWebsitesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    /** Storeâ€™s identifier which you can get from cart_list method */
    public var cartId: CartId
    /** A web address of a store that you would like to connect to API2Cart */
    public var storeUrl: String?
    /** This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) */
    public var bridgeUrl: String?
    /** Absolute path to the store root directory (used with \"bridge_url\" parameter) */
    public var storeRoot: String?
    /** Set this parameter if bridge is already uploaded to store */
    public var storeKey: String?
    /** Shared secret */
    public var sharedSecret: String?
    /** Specify if api2cart should validate cart version */
    public var validateVersion: Bool? = false
    /** Enables or disables cart's verification */
    public var verify: Bool? = true
    /** DB tables prefix */
    public var dbTablesPrefix: String?
    /** This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store's firewall may block specific values. */
    public var userAgent: String?
    /** FTP connection host */
    public var ftpHost: String?
    /** FTP User */
    public var ftpUser: String?
    /** FTP Password */
    public var ftpPassword: String?
    /** FTP Port */
    public var ftpPort: Int?
    /** FTP Store dir */
    public var ftpStoreDir: String?
    /** 3DCart API Key */
    public var apiKey3dcart: String?
    /** It's a BigCommerce account for which API is enabled */
    public var adminAccount: String?
    /** BigCommerce API URL */
    public var apiPath: String?
    /** Bigcommerce API Key */
    public var apiKeyBigcommerce: String?
    /** Client ID of the requesting app */
    public var clientId: String?
    /** Access token authorizing the app to access resources on behalf of a user */
    public var accessToken: String?
    /** API Path section unique to the store */
    public var context: String?
    /** Access token authorizing the app to access resources on behalf of a user */
    public var accessToken: String?
    /** Shopify API Key */
    public var apiKeyShopify: String?
    /** Shopify API Password */
    public var apiPassword: String?
    /** Access token authorizing the app to access resources on behalf of a user */
    public var accessTokenShopify: String?
    /** Neto API Key */
    public var apiKey: String?
    /** Neto User Name */
    public var apiUsername: String?
    /** Volusion API Password */
    public var encryptedPassword: String?
    /** It's a Volusion account for which API is enabled */
    public var login: String?
    /** It's a AspDotNetStorefront account for which API is available */
    public var apiUserAdnsf: String?
    /** AspDotNetStorefront API Password */
    public var apiPass: String?
    /** 3DCart Application Private Key */
    public var privateKey: String?
    /** 3DCart Token from Application */
    public var appToken: String?
    /** Etsy keystring */
    public var etsyKeystring: String?
    /** Etsy shared secret */
    public var etsySharedSecret: String?
    /** Secret token authorizing the app to access resources on behalf of a user */
    public var tokenSecret: String?
    /** Etsy Client Id */
    public var etsyClientId: String?
    /** Etsy Refresh token */
    public var etsyRefreshToken: String?
    /** Application ID (AppID). */
    public var ebayClientId: String?
    /** Shared Secret from eBay application */
    public var ebayClientSecret: String?
    /** The RuName value that eBay assigns to your application. */
    public var ebayRuname: String?
    /** Used to authenticate API requests. */
    public var ebayAccessToken: String?
    /** Used to renew the access token. */
    public var ebayRefreshToken: String?
    /** eBay environment */
    public var ebayEnvironment: String? = "production"
    /** eBay global ID */
    public var ebaySiteId: Int? = 0
    /** Demandware client id */
    public var dwClientId: String?
    /** Demandware api password */
    public var dwApiPass: String?
    /** Demandware user name */
    public var demandwareUserName: String?
    /** Demandware user password */
    public var demandwareUserPassword: String?
    /** Store Id */
    public var storeId: String
    /** Seller Id */
    public var sellerId: String?
    /**  */
    public var environment: String? = "production"
    /** Omni Commerce Connector Client ID */
    public var hybrisClientId: String?
    /** Omni Commerce Connector Client Secret */
    public var hybrisClientSecret: String?
    /** User Name */
    public var hybrisUsername: String?
    /** User password */
    public var hybrisPassword: String?
    /** Websites to stores mapping data */
    public var hybrisWebsites: [AccountCartAddHybrisWebsitesInner]?
    /** Walmart client ID. For the region 'ca' use Consumer ID */
    public var walmartClientId: String?
    /** Walmart client secret. For the region 'ca' use Private Key */
    public var walmartClientSecret: String?
    /** Walmart environment */
    public var walmartEnvironment: String? = "production"
    /** Walmart WM_CONSUMER.CHANNEL.TYPE header */
    public var walmartChannelType: String?
    /** Walmart region */
    public var walmartRegion: String? = "us"
    /** LightSpeed api key */
    public var lightspeedApiKey: String?
    /** LightSpeed api secret */
    public var lightspeedApiSecret: String?
    /** Access token authorizing the app to access resources on behalf of a user */
    public var shoplazzaAccessToken: String?
    /** Shared secret */
    public var shoplazzaSharedSecret: String?
    /** Shopware access key */
    public var shopwareAccessKey: String?
    /** Shopware api key */
    public var shopwareApiKey: String?
    /** Shopware client secret access key */
    public var shopwareApiSecret: String?
    /** CommerceHQ api key */
    public var commercehqApiKey: String?
    /** CommerceHQ api password */
    public var commercehqApiPassword: String?
    /** 3DCart Private Key */
    public var _3dcartPrivateKey: String?
    /** 3DCart Token */
    public var _3dcartAccessToken: String?
    /** Woocommerce consumer key */
    public var wcConsumerKey: String?
    /** Woocommerce consumer secret */
    public var wcConsumerSecret: String?
    /** Magento Consumer Key */
    public var magentoConsumerKey: String?
    /** Magento Consumer Secret */
    public var magentoConsumerSecret: String?
    /** Magento Access Token */
    public var magentoAccessToken: String?
    /** Magento Token Secret */
    public var magentoTokenSecret: String?
    /** Prestashop webservice key */
    public var prestashopWebserviceKey: String?
    /** Wix App ID */
    public var wixAppId: String
    /** Wix App Secret Key */
    public var wixAppSecretKey: String
    /** Wix Instance ID */
    public var wixInstanceId: String?
    /** Wix refresh token */
    public var wixRefreshToken: String?
    /** Mercado Libre App ID */
    public var mercadoLibreAppId: String?
    /** Mercado Libre App Secret Key */
    public var mercadoLibreAppSecretKey: String?
    /** Mercado Libre Refresh Token */
    public var mercadoLibreRefreshToken: String?
    /** Zid Client ID */
    public var zidClientId: Int?
    /** Zid Client Secret */
    public var zidClientSecret: String?
    /** Zid Access Token */
    public var zidAccessToken: String?
    /** Zid Authorization */
    public var zidAuthorization: String?
    /** Zid refresh token */
    public var zidRefreshToken: String?
    /** Flipkart Client ID */
    public var flipkartClientId: String?
    /** Flipkart Client Secret */
    public var flipkartClientSecret: String?
    /** Allegro Client ID */
    public var allegroClientId: String?
    /** Allegro Client Secret */
    public var allegroClientSecret: String?
    /** Allegro Access Token */
    public var allegroAccessToken: String?
    /** Allegro Refresh Token */
    public var allegroRefreshToken: String?
    /** Allegro Environment */
    public var allegroEnvironment: String? = "production"

    public init(cartId: CartId, storeUrl: String? = nil, bridgeUrl: String? = nil, storeRoot: String? = nil, storeKey: String? = nil, sharedSecret: String? = nil, validateVersion: Bool? = false, verify: Bool? = true, dbTablesPrefix: String? = nil, userAgent: String? = nil, ftpHost: String? = nil, ftpUser: String? = nil, ftpPassword: String? = nil, ftpPort: Int? = nil, ftpStoreDir: String? = nil, apiKey3dcart: String? = nil, adminAccount: String? = nil, apiPath: String? = nil, apiKeyBigcommerce: String? = nil, clientId: String? = nil, accessToken: String? = nil, context: String? = nil, accessToken: String? = nil, apiKeyShopify: String? = nil, apiPassword: String? = nil, accessTokenShopify: String? = nil, apiKey: String? = nil, apiUsername: String? = nil, encryptedPassword: String? = nil, login: String? = nil, apiUserAdnsf: String? = nil, apiPass: String? = nil, privateKey: String? = nil, appToken: String? = nil, etsyKeystring: String? = nil, etsySharedSecret: String? = nil, tokenSecret: String? = nil, etsyClientId: String? = nil, etsyRefreshToken: String? = nil, ebayClientId: String? = nil, ebayClientSecret: String? = nil, ebayRuname: String? = nil, ebayAccessToken: String? = nil, ebayRefreshToken: String? = nil, ebayEnvironment: String? = "production", ebaySiteId: Int? = 0, dwClientId: String? = nil, dwApiPass: String? = nil, demandwareUserName: String? = nil, demandwareUserPassword: String? = nil, storeId: String, sellerId: String? = nil, environment: String? = "production", hybrisClientId: String? = nil, hybrisClientSecret: String? = nil, hybrisUsername: String? = nil, hybrisPassword: String? = nil, hybrisWebsites: [AccountCartAddHybrisWebsitesInner]? = nil, walmartClientId: String? = nil, walmartClientSecret: String? = nil, walmartEnvironment: String? = "production", walmartChannelType: String? = nil, walmartRegion: String? = "us", lightspeedApiKey: String? = nil, lightspeedApiSecret: String? = nil, shoplazzaAccessToken: String? = nil, shoplazzaSharedSecret: String? = nil, shopwareAccessKey: String? = nil, shopwareApiKey: String? = nil, shopwareApiSecret: String? = nil, commercehqApiKey: String? = nil, commercehqApiPassword: String? = nil, _3dcartPrivateKey: String? = nil, _3dcartAccessToken: String? = nil, wcConsumerKey: String? = nil, wcConsumerSecret: String? = nil, magentoConsumerKey: String? = nil, magentoConsumerSecret: String? = nil, magentoAccessToken: String? = nil, magentoTokenSecret: String? = nil, prestashopWebserviceKey: String? = nil, wixAppId: String, wixAppSecretKey: String, wixInstanceId: String? = nil, wixRefreshToken: String? = nil, mercadoLibreAppId: String? = nil, mercadoLibreAppSecretKey: String? = nil, mercadoLibreRefreshToken: String? = nil, zidClientId: Int? = nil, zidClientSecret: String? = nil, zidAccessToken: String? = nil, zidAuthorization: String? = nil, zidRefreshToken: String? = nil, flipkartClientId: String? = nil, flipkartClientSecret: String? = nil, allegroClientId: String? = nil, allegroClientSecret: String? = nil, allegroAccessToken: String? = nil, allegroRefreshToken: String? = nil, allegroEnvironment: String? = "production") {
        self.cartId = cartId
        self.storeUrl = storeUrl
        self.bridgeUrl = bridgeUrl
        self.storeRoot = storeRoot
        self.storeKey = storeKey
        self.sharedSecret = sharedSecret
        self.validateVersion = validateVersion
        self.verify = verify
        self.dbTablesPrefix = dbTablesPrefix
        self.userAgent = userAgent
        self.ftpHost = ftpHost
        self.ftpUser = ftpUser
        self.ftpPassword = ftpPassword
        self.ftpPort = ftpPort
        self.ftpStoreDir = ftpStoreDir
        self.apiKey3dcart = apiKey3dcart
        self.adminAccount = adminAccount
        self.apiPath = apiPath
        self.apiKeyBigcommerce = apiKeyBigcommerce
        self.clientId = clientId
        self.accessToken = accessToken
        self.context = context
        self.accessToken = accessToken
        self.apiKeyShopify = apiKeyShopify
        self.apiPassword = apiPassword
        self.accessTokenShopify = accessTokenShopify
        self.apiKey = apiKey
        self.apiUsername = apiUsername
        self.encryptedPassword = encryptedPassword
        self.login = login
        self.apiUserAdnsf = apiUserAdnsf
        self.apiPass = apiPass
        self.privateKey = privateKey
        self.appToken = appToken
        self.etsyKeystring = etsyKeystring
        self.etsySharedSecret = etsySharedSecret
        self.tokenSecret = tokenSecret
        self.etsyClientId = etsyClientId
        self.etsyRefreshToken = etsyRefreshToken
        self.ebayClientId = ebayClientId
        self.ebayClientSecret = ebayClientSecret
        self.ebayRuname = ebayRuname
        self.ebayAccessToken = ebayAccessToken
        self.ebayRefreshToken = ebayRefreshToken
        self.ebayEnvironment = ebayEnvironment
        self.ebaySiteId = ebaySiteId
        self.dwClientId = dwClientId
        self.dwApiPass = dwApiPass
        self.demandwareUserName = demandwareUserName
        self.demandwareUserPassword = demandwareUserPassword
        self.storeId = storeId
        self.sellerId = sellerId
        self.environment = environment
        self.hybrisClientId = hybrisClientId
        self.hybrisClientSecret = hybrisClientSecret
        self.hybrisUsername = hybrisUsername
        self.hybrisPassword = hybrisPassword
        self.hybrisWebsites = hybrisWebsites
        self.walmartClientId = walmartClientId
        self.walmartClientSecret = walmartClientSecret
        self.walmartEnvironment = walmartEnvironment
        self.walmartChannelType = walmartChannelType
        self.walmartRegion = walmartRegion
        self.lightspeedApiKey = lightspeedApiKey
        self.lightspeedApiSecret = lightspeedApiSecret
        self.shoplazzaAccessToken = shoplazzaAccessToken
        self.shoplazzaSharedSecret = shoplazzaSharedSecret
        self.shopwareAccessKey = shopwareAccessKey
        self.shopwareApiKey = shopwareApiKey
        self.shopwareApiSecret = shopwareApiSecret
        self.commercehqApiKey = commercehqApiKey
        self.commercehqApiPassword = commercehqApiPassword
        self._3dcartPrivateKey = _3dcartPrivateKey
        self._3dcartAccessToken = _3dcartAccessToken
        self.wcConsumerKey = wcConsumerKey
        self.wcConsumerSecret = wcConsumerSecret
        self.magentoConsumerKey = magentoConsumerKey
        self.magentoConsumerSecret = magentoConsumerSecret
        self.magentoAccessToken = magentoAccessToken
        self.magentoTokenSecret = magentoTokenSecret
        self.prestashopWebserviceKey = prestashopWebserviceKey
        self.wixAppId = wixAppId
        self.wixAppSecretKey = wixAppSecretKey
        self.wixInstanceId = wixInstanceId
        self.wixRefreshToken = wixRefreshToken
        self.mercadoLibreAppId = mercadoLibreAppId
        self.mercadoLibreAppSecretKey = mercadoLibreAppSecretKey
        self.mercadoLibreRefreshToken = mercadoLibreRefreshToken
        self.zidClientId = zidClientId
        self.zidClientSecret = zidClientSecret
        self.zidAccessToken = zidAccessToken
        self.zidAuthorization = zidAuthorization
        self.zidRefreshToken = zidRefreshToken
        self.flipkartClientId = flipkartClientId
        self.flipkartClientSecret = flipkartClientSecret
        self.allegroClientId = allegroClientId
        self.allegroClientSecret = allegroClientSecret
        self.allegroAccessToken = allegroAccessToken
        self.allegroRefreshToken = allegroRefreshToken
        self.allegroEnvironment = allegroEnvironment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cartId = "cart_id"
        case storeUrl = "store_url"
        case bridgeUrl = "bridge_url"
        case storeRoot = "store_root"
        case storeKey = "store_key"
        case sharedSecret = "shared_secret"
        case validateVersion = "validate_version"
        case verify
        case dbTablesPrefix = "db_tables_prefix"
        case userAgent = "user_agent"
        case ftpHost = "ftp_host"
        case ftpUser = "ftp_user"
        case ftpPassword = "ftp_password"
        case ftpPort = "ftp_port"
        case ftpStoreDir = "ftp_store_dir"
        case apiKey3dcart = "apiKey_3dcart"
        case adminAccount = "AdminAccount"
        case apiPath = "ApiPath"
        case apiKeyBigcommerce = "ApiKey_Bigcommerce"
        case clientId = "client_id"
        case accessToken
        case context
        case accessToken = "access_token"
        case apiKeyShopify = "apiKey_shopify"
        case apiPassword
        case accessTokenShopify = "accessToken_shopify"
        case apiKey
        case apiUsername
        case encryptedPassword = "EncryptedPassword"
        case login = "Login"
        case apiUserAdnsf = "apiUser_adnsf"
        case apiPass
        case privateKey
        case appToken
        case etsyKeystring = "etsy_keystring"
        case etsySharedSecret = "etsy_shared_secret"
        case tokenSecret
        case etsyClientId = "etsy_client_id"
        case etsyRefreshToken = "etsy_refresh_token"
        case ebayClientId = "ebay_client_id"
        case ebayClientSecret = "ebay_client_secret"
        case ebayRuname = "ebay_runame"
        case ebayAccessToken = "ebay_access_token"
        case ebayRefreshToken = "ebay_refresh_token"
        case ebayEnvironment = "ebay_environment"
        case ebaySiteId = "ebay_site_id"
        case dwClientId = "dw_client_id"
        case dwApiPass = "dw_api_pass"
        case demandwareUserName = "demandware_user_name"
        case demandwareUserPassword = "demandware_user_password"
        case storeId = "store_id"
        case sellerId = "seller_id"
        case environment
        case hybrisClientId = "hybris_client_id"
        case hybrisClientSecret = "hybris_client_secret"
        case hybrisUsername = "hybris_username"
        case hybrisPassword = "hybris_password"
        case hybrisWebsites = "hybris_websites"
        case walmartClientId = "walmart_client_id"
        case walmartClientSecret = "walmart_client_secret"
        case walmartEnvironment = "walmart_environment"
        case walmartChannelType = "walmart_channel_type"
        case walmartRegion = "walmart_region"
        case lightspeedApiKey = "lightspeed_api_key"
        case lightspeedApiSecret = "lightspeed_api_secret"
        case shoplazzaAccessToken = "shoplazza_access_token"
        case shoplazzaSharedSecret = "shoplazza_shared_secret"
        case shopwareAccessKey = "shopware_access_key"
        case shopwareApiKey = "shopware_api_key"
        case shopwareApiSecret = "shopware_api_secret"
        case commercehqApiKey = "commercehq_api_key"
        case commercehqApiPassword = "commercehq_api_password"
        case _3dcartPrivateKey = "3dcart_private_key"
        case _3dcartAccessToken = "3dcart_access_token"
        case wcConsumerKey = "wc_consumer_key"
        case wcConsumerSecret = "wc_consumer_secret"
        case magentoConsumerKey = "magento_consumer_key"
        case magentoConsumerSecret = "magento_consumer_secret"
        case magentoAccessToken = "magento_access_token"
        case magentoTokenSecret = "magento_token_secret"
        case prestashopWebserviceKey = "prestashop_webservice_key"
        case wixAppId = "wix_app_id"
        case wixAppSecretKey = "wix_app_secret_key"
        case wixInstanceId = "wix_instance_id"
        case wixRefreshToken = "wix_refresh_token"
        case mercadoLibreAppId = "mercado_libre_app_id"
        case mercadoLibreAppSecretKey = "mercado_libre_app_secret_key"
        case mercadoLibreRefreshToken = "mercado_libre_refresh_token"
        case zidClientId = "zid_client_id"
        case zidClientSecret = "zid_client_secret"
        case zidAccessToken = "zid_access_token"
        case zidAuthorization = "zid_authorization"
        case zidRefreshToken = "zid_refresh_token"
        case flipkartClientId = "flipkart_client_id"
        case flipkartClientSecret = "flipkart_client_secret"
        case allegroClientId = "allegro_client_id"
        case allegroClientSecret = "allegro_client_secret"
        case allegroAccessToken = "allegro_access_token"
        case allegroRefreshToken = "allegro_refresh_token"
        case allegroEnvironment = "allegro_environment"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cartId, forKey: .cartId)
        try container.encodeIfPresent(storeUrl, forKey: .storeUrl)
        try container.encodeIfPresent(bridgeUrl, forKey: .bridgeUrl)
        try container.encodeIfPresent(storeRoot, forKey: .storeRoot)
        try container.encodeIfPresent(storeKey, forKey: .storeKey)
        try container.encodeIfPresent(sharedSecret, forKey: .sharedSecret)
        try container.encodeIfPresent(validateVersion, forKey: .validateVersion)
        try container.encodeIfPresent(verify, forKey: .verify)
        try container.encodeIfPresent(dbTablesPrefix, forKey: .dbTablesPrefix)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(ftpHost, forKey: .ftpHost)
        try container.encodeIfPresent(ftpUser, forKey: .ftpUser)
        try container.encodeIfPresent(ftpPassword, forKey: .ftpPassword)
        try container.encodeIfPresent(ftpPort, forKey: .ftpPort)
        try container.encodeIfPresent(ftpStoreDir, forKey: .ftpStoreDir)
        try container.encodeIfPresent(apiKey3dcart, forKey: .apiKey3dcart)
        try container.encodeIfPresent(adminAccount, forKey: .adminAccount)
        try container.encodeIfPresent(apiPath, forKey: .apiPath)
        try container.encodeIfPresent(apiKeyBigcommerce, forKey: .apiKeyBigcommerce)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(context, forKey: .context)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(apiKeyShopify, forKey: .apiKeyShopify)
        try container.encodeIfPresent(apiPassword, forKey: .apiPassword)
        try container.encodeIfPresent(accessTokenShopify, forKey: .accessTokenShopify)
        try container.encodeIfPresent(apiKey, forKey: .apiKey)
        try container.encodeIfPresent(apiUsername, forKey: .apiUsername)
        try container.encodeIfPresent(encryptedPassword, forKey: .encryptedPassword)
        try container.encodeIfPresent(login, forKey: .login)
        try container.encodeIfPresent(apiUserAdnsf, forKey: .apiUserAdnsf)
        try container.encodeIfPresent(apiPass, forKey: .apiPass)
        try container.encodeIfPresent(privateKey, forKey: .privateKey)
        try container.encodeIfPresent(appToken, forKey: .appToken)
        try container.encodeIfPresent(etsyKeystring, forKey: .etsyKeystring)
        try container.encodeIfPresent(etsySharedSecret, forKey: .etsySharedSecret)
        try container.encodeIfPresent(tokenSecret, forKey: .tokenSecret)
        try container.encodeIfPresent(etsyClientId, forKey: .etsyClientId)
        try container.encodeIfPresent(etsyRefreshToken, forKey: .etsyRefreshToken)
        try container.encodeIfPresent(ebayClientId, forKey: .ebayClientId)
        try container.encodeIfPresent(ebayClientSecret, forKey: .ebayClientSecret)
        try container.encodeIfPresent(ebayRuname, forKey: .ebayRuname)
        try container.encodeIfPresent(ebayAccessToken, forKey: .ebayAccessToken)
        try container.encodeIfPresent(ebayRefreshToken, forKey: .ebayRefreshToken)
        try container.encodeIfPresent(ebayEnvironment, forKey: .ebayEnvironment)
        try container.encodeIfPresent(ebaySiteId, forKey: .ebaySiteId)
        try container.encodeIfPresent(dwClientId, forKey: .dwClientId)
        try container.encodeIfPresent(dwApiPass, forKey: .dwApiPass)
        try container.encodeIfPresent(demandwareUserName, forKey: .demandwareUserName)
        try container.encodeIfPresent(demandwareUserPassword, forKey: .demandwareUserPassword)
        try container.encode(storeId, forKey: .storeId)
        try container.encodeIfPresent(sellerId, forKey: .sellerId)
        try container.encodeIfPresent(environment, forKey: .environment)
        try container.encodeIfPresent(hybrisClientId, forKey: .hybrisClientId)
        try container.encodeIfPresent(hybrisClientSecret, forKey: .hybrisClientSecret)
        try container.encodeIfPresent(hybrisUsername, forKey: .hybrisUsername)
        try container.encodeIfPresent(hybrisPassword, forKey: .hybrisPassword)
        try container.encodeIfPresent(hybrisWebsites, forKey: .hybrisWebsites)
        try container.encodeIfPresent(walmartClientId, forKey: .walmartClientId)
        try container.encodeIfPresent(walmartClientSecret, forKey: .walmartClientSecret)
        try container.encodeIfPresent(walmartEnvironment, forKey: .walmartEnvironment)
        try container.encodeIfPresent(walmartChannelType, forKey: .walmartChannelType)
        try container.encodeIfPresent(walmartRegion, forKey: .walmartRegion)
        try container.encodeIfPresent(lightspeedApiKey, forKey: .lightspeedApiKey)
        try container.encodeIfPresent(lightspeedApiSecret, forKey: .lightspeedApiSecret)
        try container.encodeIfPresent(shoplazzaAccessToken, forKey: .shoplazzaAccessToken)
        try container.encodeIfPresent(shoplazzaSharedSecret, forKey: .shoplazzaSharedSecret)
        try container.encodeIfPresent(shopwareAccessKey, forKey: .shopwareAccessKey)
        try container.encodeIfPresent(shopwareApiKey, forKey: .shopwareApiKey)
        try container.encodeIfPresent(shopwareApiSecret, forKey: .shopwareApiSecret)
        try container.encodeIfPresent(commercehqApiKey, forKey: .commercehqApiKey)
        try container.encodeIfPresent(commercehqApiPassword, forKey: .commercehqApiPassword)
        try container.encodeIfPresent(_3dcartPrivateKey, forKey: ._3dcartPrivateKey)
        try container.encodeIfPresent(_3dcartAccessToken, forKey: ._3dcartAccessToken)
        try container.encodeIfPresent(wcConsumerKey, forKey: .wcConsumerKey)
        try container.encodeIfPresent(wcConsumerSecret, forKey: .wcConsumerSecret)
        try container.encodeIfPresent(magentoConsumerKey, forKey: .magentoConsumerKey)
        try container.encodeIfPresent(magentoConsumerSecret, forKey: .magentoConsumerSecret)
        try container.encodeIfPresent(magentoAccessToken, forKey: .magentoAccessToken)
        try container.encodeIfPresent(magentoTokenSecret, forKey: .magentoTokenSecret)
        try container.encodeIfPresent(prestashopWebserviceKey, forKey: .prestashopWebserviceKey)
        try container.encode(wixAppId, forKey: .wixAppId)
        try container.encode(wixAppSecretKey, forKey: .wixAppSecretKey)
        try container.encodeIfPresent(wixInstanceId, forKey: .wixInstanceId)
        try container.encodeIfPresent(wixRefreshToken, forKey: .wixRefreshToken)
        try container.encodeIfPresent(mercadoLibreAppId, forKey: .mercadoLibreAppId)
        try container.encodeIfPresent(mercadoLibreAppSecretKey, forKey: .mercadoLibreAppSecretKey)
        try container.encodeIfPresent(mercadoLibreRefreshToken, forKey: .mercadoLibreRefreshToken)
        try container.encodeIfPresent(zidClientId, forKey: .zidClientId)
        try container.encodeIfPresent(zidClientSecret, forKey: .zidClientSecret)
        try container.encodeIfPresent(zidAccessToken, forKey: .zidAccessToken)
        try container.encodeIfPresent(zidAuthorization, forKey: .zidAuthorization)
        try container.encodeIfPresent(zidRefreshToken, forKey: .zidRefreshToken)
        try container.encodeIfPresent(flipkartClientId, forKey: .flipkartClientId)
        try container.encodeIfPresent(flipkartClientSecret, forKey: .flipkartClientSecret)
        try container.encodeIfPresent(allegroClientId, forKey: .allegroClientId)
        try container.encodeIfPresent(allegroClientSecret, forKey: .allegroClientSecret)
        try container.encodeIfPresent(allegroAccessToken, forKey: .allegroAccessToken)
        try container.encodeIfPresent(allegroRefreshToken, forKey: .allegroRefreshToken)
        try container.encodeIfPresent(allegroEnvironment, forKey: .allegroEnvironment)
    }
}

