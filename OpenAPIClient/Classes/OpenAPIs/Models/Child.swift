//
// Child.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Child: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var parentId: String?
    public var sku: String?
    public var upc: String?
    public var ean: String?
    public var mpn: String?
    public var gtin: String?
    public var isbn: String?
    public var url: String?
    public var seoUrl: String?
    public var sortOrder: Int?
    public var createdTime: A2CDateTime?
    public var modifiedTime: A2CDateTime?
    public var name: String?
    public var shortDescription: String?
    public var fullDescription: String?
    public var images: [Image]?
    public var combination: [ProductChildItemCombination]?
    public var defaultPrice: Double?
    public var costPrice: Double?
    public var listPrice: Double?
    public var wholesalePrice: Double?
    public var advancedPrice: [ProductAdvancedPrice]?
    public var taxClassId: String?
    public var availForSale: Bool?
    public var allowBackorders: Bool?
    public var inStock: Bool?
    public var onSale: Bool?
    public var manageStock: Bool?
    public var inventoryLevel: Double?
    public var inventory: [ProductInventory]?
    public var minQuantity: Double?
    public var defaultQtyInPack: Double?
    public var isQtyInPackFixed: Bool?
    public var weightUnit: String?
    public var weight: Double?
    public var dimensionsUnit: String?
    public var width: Double?
    public var height: Double?
    public var length: Double?
    public var metaTitle: String?
    public var metaDescription: String?
    public var metaKeywords: String?
    public var discounts: [Discount]?
    public var isVirtual: Bool?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, parentId: String? = nil, sku: String? = nil, upc: String? = nil, ean: String? = nil, mpn: String? = nil, gtin: String? = nil, isbn: String? = nil, url: String? = nil, seoUrl: String? = nil, sortOrder: Int? = nil, createdTime: A2CDateTime? = nil, modifiedTime: A2CDateTime? = nil, name: String? = nil, shortDescription: String? = nil, fullDescription: String? = nil, images: [Image]? = nil, combination: [ProductChildItemCombination]? = nil, defaultPrice: Double? = nil, costPrice: Double? = nil, listPrice: Double? = nil, wholesalePrice: Double? = nil, advancedPrice: [ProductAdvancedPrice]? = nil, taxClassId: String? = nil, availForSale: Bool? = nil, allowBackorders: Bool? = nil, inStock: Bool? = nil, onSale: Bool? = nil, manageStock: Bool? = nil, inventoryLevel: Double? = nil, inventory: [ProductInventory]? = nil, minQuantity: Double? = nil, defaultQtyInPack: Double? = nil, isQtyInPackFixed: Bool? = nil, weightUnit: String? = nil, weight: Double? = nil, dimensionsUnit: String? = nil, width: Double? = nil, height: Double? = nil, length: Double? = nil, metaTitle: String? = nil, metaDescription: String? = nil, metaKeywords: String? = nil, discounts: [Discount]? = nil, isVirtual: Bool? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.parentId = parentId
        self.sku = sku
        self.upc = upc
        self.ean = ean
        self.mpn = mpn
        self.gtin = gtin
        self.isbn = isbn
        self.url = url
        self.seoUrl = seoUrl
        self.sortOrder = sortOrder
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime
        self.name = name
        self.shortDescription = shortDescription
        self.fullDescription = fullDescription
        self.images = images
        self.combination = combination
        self.defaultPrice = defaultPrice
        self.costPrice = costPrice
        self.listPrice = listPrice
        self.wholesalePrice = wholesalePrice
        self.advancedPrice = advancedPrice
        self.taxClassId = taxClassId
        self.availForSale = availForSale
        self.allowBackorders = allowBackorders
        self.inStock = inStock
        self.onSale = onSale
        self.manageStock = manageStock
        self.inventoryLevel = inventoryLevel
        self.inventory = inventory
        self.minQuantity = minQuantity
        self.defaultQtyInPack = defaultQtyInPack
        self.isQtyInPackFixed = isQtyInPackFixed
        self.weightUnit = weightUnit
        self.weight = weight
        self.dimensionsUnit = dimensionsUnit
        self.width = width
        self.height = height
        self.length = length
        self.metaTitle = metaTitle
        self.metaDescription = metaDescription
        self.metaKeywords = metaKeywords
        self.discounts = discounts
        self.isVirtual = isVirtual
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case parentId = "parent_id"
        case sku
        case upc
        case ean
        case mpn
        case gtin
        case isbn
        case url
        case seoUrl = "seo_url"
        case sortOrder = "sort_order"
        case createdTime = "created_time"
        case modifiedTime = "modified_time"
        case name
        case shortDescription = "short_description"
        case fullDescription = "full_description"
        case images
        case combination
        case defaultPrice = "default_price"
        case costPrice = "cost_price"
        case listPrice = "list_price"
        case wholesalePrice = "wholesale_price"
        case advancedPrice = "advanced_price"
        case taxClassId = "tax_class_id"
        case availForSale = "avail_for_sale"
        case allowBackorders = "allow_backorders"
        case inStock = "in_stock"
        case onSale = "on_sale"
        case manageStock = "manage_stock"
        case inventoryLevel = "inventory_level"
        case inventory
        case minQuantity = "min_quantity"
        case defaultQtyInPack = "default_qty_in_pack"
        case isQtyInPackFixed = "is_qty_in_pack_fixed"
        case weightUnit = "weight_unit"
        case weight
        case dimensionsUnit = "dimensions_unit"
        case width
        case height
        case length
        case metaTitle = "meta_title"
        case metaDescription = "meta_description"
        case metaKeywords = "meta_keywords"
        case discounts
        case isVirtual = "is_virtual"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(upc, forKey: .upc)
        try container.encodeIfPresent(ean, forKey: .ean)
        try container.encodeIfPresent(mpn, forKey: .mpn)
        try container.encodeIfPresent(gtin, forKey: .gtin)
        try container.encodeIfPresent(isbn, forKey: .isbn)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(seoUrl, forKey: .seoUrl)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(modifiedTime, forKey: .modifiedTime)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(fullDescription, forKey: .fullDescription)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(combination, forKey: .combination)
        try container.encodeIfPresent(defaultPrice, forKey: .defaultPrice)
        try container.encodeIfPresent(costPrice, forKey: .costPrice)
        try container.encodeIfPresent(listPrice, forKey: .listPrice)
        try container.encodeIfPresent(wholesalePrice, forKey: .wholesalePrice)
        try container.encodeIfPresent(advancedPrice, forKey: .advancedPrice)
        try container.encodeIfPresent(taxClassId, forKey: .taxClassId)
        try container.encodeIfPresent(availForSale, forKey: .availForSale)
        try container.encodeIfPresent(allowBackorders, forKey: .allowBackorders)
        try container.encodeIfPresent(inStock, forKey: .inStock)
        try container.encodeIfPresent(onSale, forKey: .onSale)
        try container.encodeIfPresent(manageStock, forKey: .manageStock)
        try container.encodeIfPresent(inventoryLevel, forKey: .inventoryLevel)
        try container.encodeIfPresent(inventory, forKey: .inventory)
        try container.encodeIfPresent(minQuantity, forKey: .minQuantity)
        try container.encodeIfPresent(defaultQtyInPack, forKey: .defaultQtyInPack)
        try container.encodeIfPresent(isQtyInPackFixed, forKey: .isQtyInPackFixed)
        try container.encodeIfPresent(weightUnit, forKey: .weightUnit)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(dimensionsUnit, forKey: .dimensionsUnit)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(metaTitle, forKey: .metaTitle)
        try container.encodeIfPresent(metaDescription, forKey: .metaDescription)
        try container.encodeIfPresent(metaKeywords, forKey: .metaKeywords)
        try container.encodeIfPresent(discounts, forKey: .discounts)
        try container.encodeIfPresent(isVirtual, forKey: .isVirtual)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Child: Identifiable {}
